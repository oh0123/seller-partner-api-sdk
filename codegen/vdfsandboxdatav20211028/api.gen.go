// Package vdfsandboxdatav20211028 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package vdfsandboxdatav20211028

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for TransactionStatus.
const (
	FAILURE    TransactionStatus = "FAILURE"
	PROCESSING TransactionStatus = "PROCESSING"
	SUCCESS    TransactionStatus = "SUCCESS"
)

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList struct {
	// Errors An array of individual error objects containing error details.
	Errors []Error `json:"errors"`
}

// GenerateOrderScenarioRequest The request body for the generateOrderScenarios operation.
type GenerateOrderScenarioRequest struct {
	// Orders The list of test orders requested as indicated by party identifiers.
	Orders *[]OrderScenarioRequest `json:"orders,omitempty"`
}

// OrderScenarioRequest The party identifiers required to generate the test data.
type OrderScenarioRequest struct {
	// SellingParty The identification object for the party information. For example, warehouse code or vendor code. Please refer to specific party for more details.
	SellingParty PartyIdentification `json:"sellingParty"`

	// ShipFromParty The identification object for the party information. For example, warehouse code or vendor code. Please refer to specific party for more details.
	ShipFromParty PartyIdentification `json:"shipFromParty"`
}

// PartyIdentification The identification object for the party information. For example, warehouse code or vendor code. Please refer to specific party for more details.
type PartyIdentification struct {
	// PartyId Assigned identification for the party. For example, warehouse code or vendor code. Please refer to specific party for more details.
	PartyId string `json:"partyId"`
}

// Scenario A scenario test case response returned when the request is successful.
type Scenario struct {
	// Orders A list of orders that can be used by the caller to test each life cycle or scenario.
	Orders []TestOrder `json:"orders"`

	// ScenarioId An identifier that identifies the type of scenario that user can use for testing.
	ScenarioId string `json:"scenarioId"`
}

// TestCaseData The set of test case data returned in response to the test data request.
type TestCaseData struct {
	// Scenarios Set of use cases that describes the possible test scenarios.
	Scenarios *[]Scenario `json:"scenarios,omitempty"`
}

// TestOrder Error response returned when the request is unsuccessful.
type TestOrder struct {
	// OrderId An error code that identifies the type of error that occurred.
	OrderId string `json:"orderId"`
}

// Transaction The transaction details including the status. If the transaction was successful, also includes the requested test order data.
type Transaction struct {
	// Status The current processing status of the transaction.
	Status TransactionStatus `json:"status"`

	// TestCaseData The set of test case data returned in response to the test data request.
	TestCaseData *TestCaseData `json:"testCaseData,omitempty"`

	// TransactionId The unique identifier returned in the response to the generateOrderScenarios request.
	TransactionId string `json:"transactionId"`
}

// TransactionStatus The current processing status of the transaction.
type TransactionStatus string

// TransactionReference A GUID assigned by Amazon to identify this transaction.
type TransactionReference struct {
	// TransactionId A GUID (Globally Unique Identifier) assigned by Amazon to uniquely identify the transaction.
	TransactionId *string `json:"transactionId,omitempty"`
}

// TransactionStatusRenamedByExtension The payload for the getOrderScenarios operation.
type TransactionStatusRenamedByExtension struct {
	// TransactionStatus The transaction details including the status. If the transaction was successful, also includes the requested test order data.
	TransactionStatus *Transaction `json:"transactionStatus,omitempty"`
}

// GenerateOrderScenariosJSONRequestBody defines body for GenerateOrderScenarios for application/json ContentType.
type GenerateOrderScenariosJSONRequestBody = GenerateOrderScenarioRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GenerateOrderScenariosWithBody request with any body
	GenerateOrderScenariosWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	GenerateOrderScenarios(ctx context.Context, body GenerateOrderScenariosJSONRequestBody) (*http.Response, error)

	// GetOrderScenarios request
	GetOrderScenarios(ctx context.Context, transactionId string) (*http.Response, error)
}

func (c *Client) GenerateOrderScenariosWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGenerateOrderScenariosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GenerateOrderScenarios(ctx context.Context, body GenerateOrderScenariosJSONRequestBody) (*http.Response, error) {
	req, err := NewGenerateOrderScenariosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetOrderScenarios(ctx context.Context, transactionId string) (*http.Response, error) {
	req, err := NewGetOrderScenariosRequest(c.Server, transactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGenerateOrderScenariosRequest calls the generic GenerateOrderScenarios builder with application/json body
func NewGenerateOrderScenariosRequest(server string, body GenerateOrderScenariosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateOrderScenariosRequestWithBody(server, "application/json", bodyReader)
}

// NewGenerateOrderScenariosRequestWithBody generates requests for GenerateOrderScenarios with any type of body
func NewGenerateOrderScenariosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vendor/directFulfillment/sandbox/2021-10-28/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrderScenariosRequest generates requests for GetOrderScenarios
func NewGetOrderScenariosRequest(server string, transactionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vendor/directFulfillment/sandbox/2021-10-28/transactions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GenerateOrderScenariosWithBodyWithResponse request with any body
	GenerateOrderScenariosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GenerateOrderScenariosResp, error)

	GenerateOrderScenariosWithResponse(ctx context.Context, body GenerateOrderScenariosJSONRequestBody) (*GenerateOrderScenariosResp, error)

	// GetOrderScenariosWithResponse request
	GetOrderScenariosWithResponse(ctx context.Context, transactionId string) (*GetOrderScenariosResp, error)
}

type GenerateOrderScenariosResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *TransactionReference
	JSON400      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r GenerateOrderScenariosResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateOrderScenariosResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderScenariosResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionStatusRenamedByExtension
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r GetOrderScenariosResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderScenariosResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GenerateOrderScenariosWithBodyWithResponse request with arbitrary body returning *GenerateOrderScenariosResp
func (c *ClientWithResponses) GenerateOrderScenariosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GenerateOrderScenariosResp, error) {
	rsp, err := c.GenerateOrderScenariosWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGenerateOrderScenariosResp(rsp)
}

func (c *ClientWithResponses) GenerateOrderScenariosWithResponse(ctx context.Context, body GenerateOrderScenariosJSONRequestBody) (*GenerateOrderScenariosResp, error) {
	rsp, err := c.GenerateOrderScenarios(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseGenerateOrderScenariosResp(rsp)
}

// GetOrderScenariosWithResponse request returning *GetOrderScenariosResp
func (c *ClientWithResponses) GetOrderScenariosWithResponse(ctx context.Context, transactionId string) (*GetOrderScenariosResp, error) {
	rsp, err := c.GetOrderScenarios(ctx, transactionId)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderScenariosResp(rsp)
}

// ParseGenerateOrderScenariosResp parses an HTTP response from a GenerateOrderScenariosWithResponse call
func ParseGenerateOrderScenariosResp(rsp *http.Response) (*GenerateOrderScenariosResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateOrderScenariosResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TransactionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetOrderScenariosResp parses an HTTP response from a GetOrderScenariosWithResponse call
func ParseGetOrderScenariosResp(rsp *http.Response) (*GetOrderScenariosResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderScenariosResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionStatusRenamedByExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
