// Package financesv0 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package financesv0

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// AdhocDisbursementEvent An event related to an Adhoc Disbursement.
type AdhocDisbursementEvent struct {
	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// TransactionAmount A currency type and amount.
	TransactionAmount *Currency `json:"TransactionAmount,omitempty"`

	// TransactionId The identifier for the transaction.
	TransactionId *string `json:"TransactionId,omitempty"`

	// TransactionType Indicates the type of transaction.
	//
	// Example: "Disbursed to Amazon Gift Card balance"
	TransactionType *string `json:"TransactionType,omitempty"`
}

// AdhocDisbursementEventList A list of `AdhocDisbursement` events.
type AdhocDisbursementEventList = []AdhocDisbursementEvent

// AdjustmentEvent An adjustment to the seller's account.
type AdjustmentEvent struct {
	// AdjustmentAmount A currency type and amount.
	AdjustmentAmount *Currency `json:"AdjustmentAmount,omitempty"`

	// AdjustmentItemList A list of information about items in an adjustment to the seller's account.
	AdjustmentItemList *AdjustmentItemList `json:"AdjustmentItemList,omitempty"`

	// AdjustmentType The type of adjustment.
	//
	// Possible values:
	//
	// * FBAInventoryReimbursement - An FBA inventory reimbursement to a seller's account. This occurs if a seller's inventory is damaged.
	//
	// * ReserveEvent - A reserve event that is generated at the time of a settlement period closing. This occurs when some money from a seller's account is held back.
	//
	// * PostageBilling - The amount paid by a seller for shipping labels.
	//
	// * PostageRefund - The reimbursement of shipping labels purchased for orders that were canceled or refunded.
	//
	// * LostOrDamagedReimbursement - An Amazon Easy Ship reimbursement to a seller's account for a package that we lost or damaged.
	//
	// * CanceledButPickedUpReimbursement - An Amazon Easy Ship reimbursement to a seller's account. This occurs when a package is picked up and the order is subsequently canceled. This value is used only in the India marketplace.
	//
	// * ReimbursementClawback - An Amazon Easy Ship reimbursement clawback from a seller's account. This occurs when a prior reimbursement is reversed. This value is used only in the India marketplace.
	//
	// * SellerRewards - An award credited to a seller's account for their participation in an offer in the Seller Rewards program. Applies only to the India marketplace.
	AdjustmentType *string `json:"AdjustmentType,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`
}

// AdjustmentEventList A list of adjustment event information for the seller's account.
type AdjustmentEventList = []AdjustmentEvent

// AdjustmentItem An item in an adjustment to the seller's account.
type AdjustmentItem struct {
	// ASIN The Amazon Standard Identification Number (ASIN) of the item.
	ASIN *string `json:"ASIN,omitempty"`

	// FnSKU A unique identifier assigned to products stored in and fulfilled from a fulfillment center.
	FnSKU *string `json:"FnSKU,omitempty"`

	// PerUnitAmount A currency type and amount.
	PerUnitAmount *Currency `json:"PerUnitAmount,omitempty"`

	// ProductDescription A short description of the item.
	ProductDescription *string `json:"ProductDescription,omitempty"`

	// Quantity Represents the number of units in the seller's inventory when the AdustmentType is FBAInventoryReimbursement.
	Quantity *string `json:"Quantity,omitempty"`

	// SellerSKU The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API.
	SellerSKU *string `json:"SellerSKU,omitempty"`

	// TotalAmount A currency type and amount.
	TotalAmount *Currency `json:"TotalAmount,omitempty"`
}

// AdjustmentItemList A list of information about items in an adjustment to the seller's account.
type AdjustmentItemList = []AdjustmentItem

// AffordabilityExpenseEvent An expense related to an affordability promotion.
type AffordabilityExpenseEvent struct {
	// AmazonOrderId An Amazon-defined identifier for an order.
	AmazonOrderId *string `json:"AmazonOrderId,omitempty"`

	// BaseExpense A currency type and amount.
	BaseExpense *Currency `json:"BaseExpense,omitempty"`

	// MarketplaceId An encrypted, Amazon-defined marketplace identifier.
	MarketplaceId *string `json:"MarketplaceId,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// TaxTypeCGST A currency type and amount.
	TaxTypeCGST Currency `json:"TaxTypeCGST"`

	// TaxTypeIGST A currency type and amount.
	TaxTypeIGST Currency `json:"TaxTypeIGST"`

	// TaxTypeSGST A currency type and amount.
	TaxTypeSGST Currency `json:"TaxTypeSGST"`

	// TotalExpense A currency type and amount.
	TotalExpense *Currency `json:"TotalExpense,omitempty"`

	// TransactionType Indicates the type of transaction.
	//
	// Possible values:
	//
	// * Charge - For an affordability promotion expense.
	//
	// * Refund - For an affordability promotion expense reversal.
	TransactionType *string `json:"TransactionType,omitempty"`
}

// AffordabilityExpenseEventList A list of expense information related to an affordability promotion.
type AffordabilityExpenseEventList = []AffordabilityExpenseEvent

// BigDecimal defines model for BigDecimal.
type BigDecimal = float32

// CapacityReservationBillingEvent An event related to a capacity reservation billing charge.
type CapacityReservationBillingEvent struct {
	// Description A short description of the capacity reservation billing event.
	Description *string `json:"Description,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// TransactionAmount A currency type and amount.
	TransactionAmount *Currency `json:"TransactionAmount,omitempty"`

	// TransactionType Indicates the type of transaction. For example, FBA Inventory Fee
	TransactionType *string `json:"TransactionType,omitempty"`
}

// CapacityReservationBillingEventList A list of `CapacityReservationBillingEvent` events.
type CapacityReservationBillingEventList = []CapacityReservationBillingEvent

// ChargeComponent A charge on the seller's account.
//
// Possible values:
//
// * Principal - The selling price of the order item, equal to the selling price of the item multiplied by the quantity ordered.
//
// * Tax - The tax collected by the seller on the Principal.
//
// * MarketplaceFacilitatorTax-Principal - The tax withheld on the Principal.
//
// * MarketplaceFacilitatorTax-Shipping - The tax withheld on the ShippingCharge.
//
// * MarketplaceFacilitatorTax-Giftwrap - The tax withheld on the Giftwrap charge.
//
// * MarketplaceFacilitatorTax-Other - The tax withheld on other miscellaneous charges.
//
// * Discount - The promotional discount for an order item.
//
// * TaxDiscount - The tax amount deducted for promotional rebates.
//
// * CODItemCharge - The COD charge for an order item.
//
// * CODItemTaxCharge - The tax collected by the seller on a CODItemCharge.
//
// * CODOrderCharge - The COD charge for an order.
//
// * CODOrderTaxCharge - The tax collected by the seller on a CODOrderCharge.
//
// * CODShippingCharge - Shipping charges for a COD order.
//
// * CODShippingTaxCharge - The tax collected by the seller on a CODShippingCharge.
//
// * ShippingCharge - The shipping charge.
//
// * ShippingTax - The tax collected by the seller on a ShippingCharge.
//
// * Goodwill - The amount given to a buyer as a gesture of goodwill or to compensate for pain and suffering in the buying experience.
//
// * Giftwrap - The gift wrap charge.
//
// * GiftwrapTax - The tax collected by the seller on a Giftwrap charge.
//
// * RestockingFee - The charge applied to the buyer when returning a product in certain categories.
//
// * ReturnShipping - The amount given to the buyer to compensate for shipping the item back in the event we are at fault.
//
// * PointsFee - The value of Amazon Points deducted from the refund if the buyer does not have enough Amazon Points to cover the deduction.
//
// * GenericDeduction - A generic bad debt deduction.
//
// * FreeReplacementReturnShipping - The compensation for return shipping when a buyer receives the wrong item, requests a free replacement, and returns the incorrect item.
//
// * PaymentMethodFee - The fee collected for certain payment methods in certain marketplaces.
//
// * ExportCharge - The export duty that is charged when an item is shipped to an international destination as part of the Amazon Global program.
//
// * SAFE-TReimbursement - The SAFE-T claim amount for the item.
//
// * TCS-CGST - Tax Collected at Source (TCS) for Central Goods and Services Tax (CGST).
//
// * TCS-SGST - Tax Collected at Source for State Goods and Services Tax (SGST).
//
// * TCS-IGST - Tax Collected at Source for Integrated Goods and Services Tax (IGST).
//
// * TCS-UTGST - Tax Collected at Source for Union Territories Goods and Services Tax (UTGST).
type ChargeComponent struct {
	// ChargeAmount A currency type and amount.
	ChargeAmount *Currency `json:"ChargeAmount,omitempty"`

	// ChargeType The type of charge.
	ChargeType *string `json:"ChargeType,omitempty"`
}

// ChargeComponentList A list of charge information on the seller's account.
type ChargeComponentList = []ChargeComponent

// ChargeInstrument A payment instrument.
type ChargeInstrument struct {
	// Amount A currency type and amount.
	Amount *Currency `json:"Amount,omitempty"`

	// Description A short description of the charge instrument.
	Description *string `json:"Description,omitempty"`

	// Tail The account tail (trailing digits) of the charge instrument.
	Tail *string `json:"Tail,omitempty"`
}

// ChargeInstrumentList A list of payment instruments.
type ChargeInstrumentList = []ChargeInstrument

// ChargeRefundEvent An event related to charge refund.
type ChargeRefundEvent struct {
	// ChargeRefundTransactions A list of `ChargeRefund` transactions
	ChargeRefundTransactions *ChargeRefundTransactions `json:"ChargeRefundTransactions,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// ReasonCode The reason given for a charge refund.
	//
	// Example: `SubscriptionFeeCorrection`
	ReasonCode *string `json:"ReasonCode,omitempty"`

	// ReasonCodeDescription A description of the Reason Code.
	//
	// Example: `SubscriptionFeeCorrection`
	ReasonCodeDescription *string `json:"ReasonCodeDescription,omitempty"`
}

// ChargeRefundEventList A list of charge refund events.
type ChargeRefundEventList = []ChargeRefundEvent

// ChargeRefundTransaction The charge refund transaction.
type ChargeRefundTransaction struct {
	// ChargeAmount A currency type and amount.
	ChargeAmount *Currency `json:"ChargeAmount,omitempty"`

	// ChargeType The type of charge.
	ChargeType *string `json:"ChargeType,omitempty"`
}

// ChargeRefundTransactions A list of `ChargeRefund` transactions
type ChargeRefundTransactions = []ChargeRefundTransaction

// CouponPaymentEvent An event related to coupon payments.
type CouponPaymentEvent struct {
	// ChargeComponent A charge on the seller's account.
	//
	// Possible values:
	//
	// * Principal - The selling price of the order item, equal to the selling price of the item multiplied by the quantity ordered.
	//
	// * Tax - The tax collected by the seller on the Principal.
	//
	// * MarketplaceFacilitatorTax-Principal - The tax withheld on the Principal.
	//
	// * MarketplaceFacilitatorTax-Shipping - The tax withheld on the ShippingCharge.
	//
	// * MarketplaceFacilitatorTax-Giftwrap - The tax withheld on the Giftwrap charge.
	//
	// * MarketplaceFacilitatorTax-Other - The tax withheld on other miscellaneous charges.
	//
	// * Discount - The promotional discount for an order item.
	//
	// * TaxDiscount - The tax amount deducted for promotional rebates.
	//
	// * CODItemCharge - The COD charge for an order item.
	//
	// * CODItemTaxCharge - The tax collected by the seller on a CODItemCharge.
	//
	// * CODOrderCharge - The COD charge for an order.
	//
	// * CODOrderTaxCharge - The tax collected by the seller on a CODOrderCharge.
	//
	// * CODShippingCharge - Shipping charges for a COD order.
	//
	// * CODShippingTaxCharge - The tax collected by the seller on a CODShippingCharge.
	//
	// * ShippingCharge - The shipping charge.
	//
	// * ShippingTax - The tax collected by the seller on a ShippingCharge.
	//
	// * Goodwill - The amount given to a buyer as a gesture of goodwill or to compensate for pain and suffering in the buying experience.
	//
	// * Giftwrap - The gift wrap charge.
	//
	// * GiftwrapTax - The tax collected by the seller on a Giftwrap charge.
	//
	// * RestockingFee - The charge applied to the buyer when returning a product in certain categories.
	//
	// * ReturnShipping - The amount given to the buyer to compensate for shipping the item back in the event we are at fault.
	//
	// * PointsFee - The value of Amazon Points deducted from the refund if the buyer does not have enough Amazon Points to cover the deduction.
	//
	// * GenericDeduction - A generic bad debt deduction.
	//
	// * FreeReplacementReturnShipping - The compensation for return shipping when a buyer receives the wrong item, requests a free replacement, and returns the incorrect item.
	//
	// * PaymentMethodFee - The fee collected for certain payment methods in certain marketplaces.
	//
	// * ExportCharge - The export duty that is charged when an item is shipped to an international destination as part of the Amazon Global program.
	//
	// * SAFE-TReimbursement - The SAFE-T claim amount for the item.
	//
	// * TCS-CGST - Tax Collected at Source (TCS) for Central Goods and Services Tax (CGST).
	//
	// * TCS-SGST - Tax Collected at Source for State Goods and Services Tax (SGST).
	//
	// * TCS-IGST - Tax Collected at Source for Integrated Goods and Services Tax (IGST).
	//
	// * TCS-UTGST - Tax Collected at Source for Union Territories Goods and Services Tax (UTGST).
	ChargeComponent *ChargeComponent `json:"ChargeComponent,omitempty"`

	// ClipOrRedemptionCount The number of coupon clips or redemptions.
	ClipOrRedemptionCount *int64 `json:"ClipOrRedemptionCount,omitempty"`

	// CouponId A coupon identifier.
	CouponId *string `json:"CouponId,omitempty"`

	// FeeComponent A fee associated with the event.
	FeeComponent *FeeComponent `json:"FeeComponent,omitempty"`

	// PaymentEventId A payment event identifier.
	PaymentEventId *string `json:"PaymentEventId,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// SellerCouponDescription The description provided by the seller when they created the coupon.
	SellerCouponDescription *string `json:"SellerCouponDescription,omitempty"`

	// TotalAmount A currency type and amount.
	TotalAmount *Currency `json:"TotalAmount,omitempty"`
}

// CouponPaymentEventList A list of coupon payment event information.
type CouponPaymentEventList = []CouponPaymentEvent

// Currency A currency type and amount.
type Currency struct {
	CurrencyAmount *BigDecimal `json:"CurrencyAmount,omitempty"`

	// CurrencyCode The three-digit currency code in ISO 4217 format.
	CurrencyCode *string `json:"CurrencyCode,omitempty"`
}

// Date date-time format string
type Date = string

// DebtRecoveryEvent A debt payment or debt adjustment.
type DebtRecoveryEvent struct {
	// ChargeInstrumentList A list of payment instruments.
	ChargeInstrumentList *ChargeInstrumentList `json:"ChargeInstrumentList,omitempty"`

	// DebtRecoveryItemList A list of debt recovery item information.
	DebtRecoveryItemList *DebtRecoveryItemList `json:"DebtRecoveryItemList,omitempty"`

	// DebtRecoveryType The debt recovery type.
	//
	// Possible values:
	//
	// * DebtPayment
	//
	// * DebtPaymentFailure
	//
	// *DebtAdjustment
	DebtRecoveryType *string `json:"DebtRecoveryType,omitempty"`

	// OverPaymentCredit A currency type and amount.
	OverPaymentCredit *Currency `json:"OverPaymentCredit,omitempty"`

	// RecoveryAmount A currency type and amount.
	RecoveryAmount *Currency `json:"RecoveryAmount,omitempty"`
}

// DebtRecoveryEventList A list of debt recovery event information.
type DebtRecoveryEventList = []DebtRecoveryEvent

// DebtRecoveryItem An item of a debt payment or debt adjustment.
type DebtRecoveryItem struct {
	// GroupBeginDate date-time format string
	GroupBeginDate *Date `json:"GroupBeginDate,omitempty"`

	// GroupEndDate date-time format string
	GroupEndDate *Date `json:"GroupEndDate,omitempty"`

	// OriginalAmount A currency type and amount.
	OriginalAmount *Currency `json:"OriginalAmount,omitempty"`

	// RecoveryAmount A currency type and amount.
	RecoveryAmount *Currency `json:"RecoveryAmount,omitempty"`
}

// DebtRecoveryItemList A list of debt recovery item information.
type DebtRecoveryItemList = []DebtRecoveryItem

// DirectPayment A payment made directly to a seller.
type DirectPayment struct {
	// DirectPaymentAmount A currency type and amount.
	DirectPaymentAmount *Currency `json:"DirectPaymentAmount,omitempty"`

	// DirectPaymentType The type of payment.
	//
	// Possible values:
	//
	// * StoredValueCardRevenue - The amount that is deducted from the seller's account because the seller received money through a stored value card.
	//
	// * StoredValueCardRefund - The amount that Amazon returns to the seller if the order that is bought using a stored value card is refunded.
	//
	// * PrivateLabelCreditCardRevenue - The amount that is deducted from the seller's account because the seller received money through a private label credit card offered by Amazon.
	//
	// * PrivateLabelCreditCardRefund - The amount that Amazon returns to the seller if the order that is bought using a private label credit card offered by Amazon is refunded.
	//
	// * CollectOnDeliveryRevenue - The COD amount that the seller collected directly from the buyer.
	//
	// * CollectOnDeliveryRefund - The amount that Amazon refunds to the buyer if an order paid for by COD is refunded.
	DirectPaymentType *string `json:"DirectPaymentType,omitempty"`
}

// DirectPaymentList A list of direct payment information.
type DirectPaymentList = []DirectPayment

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition in a human-readable form.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList = []Error

// FBALiquidationEvent A payment event for Fulfillment by Amazon (FBA) inventory liquidation. This event is used only in the US marketplace.
type FBALiquidationEvent struct {
	// LiquidationFeeAmount A currency type and amount.
	LiquidationFeeAmount *Currency `json:"LiquidationFeeAmount,omitempty"`

	// LiquidationProceedsAmount A currency type and amount.
	LiquidationProceedsAmount *Currency `json:"LiquidationProceedsAmount,omitempty"`

	// OriginalRemovalOrderId The identifier for the original removal order.
	OriginalRemovalOrderId *string `json:"OriginalRemovalOrderId,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`
}

// FBALiquidationEventList A list of FBA inventory liquidation payment events.
type FBALiquidationEventList = []FBALiquidationEvent

// FailedAdhocDisbursementEvent Failed ad hoc disbursement event list.
type FailedAdhocDisbursementEvent struct {
	// DisbursementId The disbursement identifier.
	DisbursementId *string `json:"DisbursementId,omitempty"`

	// FundsTransfersType The type of fund transfer.
	//
	// Example "Refund"
	FundsTransfersType *string `json:"FundsTransfersType,omitempty"`

	// PaymentDisbursementType The type of payment for disbursement.
	//
	// Example `CREDIT_CARD`
	PaymentDisbursementType *string `json:"PaymentDisbursementType,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// Status The status of the failed `AdhocDisbursement`.
	//
	// Example `HARD_DECLINED`
	Status *string `json:"Status,omitempty"`

	// TransferAmount A currency type and amount.
	TransferAmount *Currency `json:"TransferAmount,omitempty"`

	// TransferId The transfer identifier.
	TransferId *string `json:"TransferId,omitempty"`
}

// FailedAdhocDisbursementEventList A list of `FailedAdhocDisbursementEvent`s.
type FailedAdhocDisbursementEventList = []FailedAdhocDisbursementEvent

// FeeComponent A fee associated with the event.
type FeeComponent struct {
	// FeeAmount A currency type and amount.
	FeeAmount *Currency `json:"FeeAmount,omitempty"`

	// FeeType The type of fee. For more information about Selling on Amazon fees, see [Selling on Amazon Fee Schedule](https://sellercentral.amazon.com/gp/help/200336920) on Seller Central. For more information about Fulfillment by Amazon fees, see [FBA features, services and fees](https://sellercentral.amazon.com/gp/help/201074400) on Seller Central.
	FeeType *string `json:"FeeType,omitempty"`
}

// FeeComponentList A list of fee component information.
type FeeComponentList = []FeeComponent

// FinancialEventGroup Information related to a financial event group.
type FinancialEventGroup struct {
	// AccountTail The account tail of the payment instrument.
	AccountTail *string `json:"AccountTail,omitempty"`

	// BeginningBalance A currency type and amount.
	BeginningBalance *Currency `json:"BeginningBalance,omitempty"`

	// ConvertedTotal A currency type and amount.
	ConvertedTotal *Currency `json:"ConvertedTotal,omitempty"`

	// FinancialEventGroupEnd date-time format string
	FinancialEventGroupEnd *Date `json:"FinancialEventGroupEnd,omitempty"`

	// FinancialEventGroupId A unique identifier for the financial event group.
	FinancialEventGroupId *string `json:"FinancialEventGroupId,omitempty"`

	// FinancialEventGroupStart date-time format string
	FinancialEventGroupStart *Date `json:"FinancialEventGroupStart,omitempty"`

	// FundTransferDate date-time format string
	FundTransferDate *Date `json:"FundTransferDate,omitempty"`

	// FundTransferStatus The status of the fund transfer.
	FundTransferStatus *string `json:"FundTransferStatus,omitempty"`

	// OriginalTotal A currency type and amount.
	OriginalTotal *Currency `json:"OriginalTotal,omitempty"`

	// ProcessingStatus The processing status of the financial event group indicates whether the balance of the financial event group is settled.
	//
	// Possible values:
	//
	// * Open
	//
	// * Closed
	ProcessingStatus *string `json:"ProcessingStatus,omitempty"`

	// TraceId The trace identifier used by sellers to look up transactions externally.
	TraceId *string `json:"TraceId,omitempty"`
}

// FinancialEventGroupList A list of financial event group information.
type FinancialEventGroupList = []FinancialEventGroup

// FinancialEvents Contains all information related to a financial event.
type FinancialEvents struct {
	// AdhocDisbursementEventList A list of `AdhocDisbursement` events.
	AdhocDisbursementEventList *AdhocDisbursementEventList `json:"AdhocDisbursementEventList,omitempty"`

	// AdjustmentEventList A list of adjustment event information for the seller's account.
	AdjustmentEventList *AdjustmentEventList `json:"AdjustmentEventList,omitempty"`

	// AffordabilityExpenseEventList A list of expense information related to an affordability promotion.
	AffordabilityExpenseEventList *AffordabilityExpenseEventList `json:"AffordabilityExpenseEventList,omitempty"`

	// AffordabilityExpenseReversalEventList A list of expense information related to an affordability promotion.
	AffordabilityExpenseReversalEventList *AffordabilityExpenseEventList `json:"AffordabilityExpenseReversalEventList,omitempty"`

	// CapacityReservationBillingEventList A list of `CapacityReservationBillingEvent` events.
	CapacityReservationBillingEventList *CapacityReservationBillingEventList `json:"CapacityReservationBillingEventList,omitempty"`

	// ChargeRefundEventList A list of charge refund events.
	ChargeRefundEventList *ChargeRefundEventList `json:"ChargeRefundEventList,omitempty"`

	// ChargebackEventList A list of shipment event information.
	ChargebackEventList *ShipmentEventList `json:"ChargebackEventList,omitempty"`

	// CouponPaymentEventList A list of coupon payment event information.
	CouponPaymentEventList *CouponPaymentEventList `json:"CouponPaymentEventList,omitempty"`

	// DebtRecoveryEventList A list of debt recovery event information.
	DebtRecoveryEventList *DebtRecoveryEventList `json:"DebtRecoveryEventList,omitempty"`

	// FBALiquidationEventList A list of FBA inventory liquidation payment events.
	FBALiquidationEventList *FBALiquidationEventList `json:"FBALiquidationEventList,omitempty"`

	// FailedAdhocDisbursementEventList A list of `FailedAdhocDisbursementEvent`s.
	FailedAdhocDisbursementEventList *FailedAdhocDisbursementEventList `json:"FailedAdhocDisbursementEventList,omitempty"`

	// GuaranteeClaimEventList A list of shipment event information.
	GuaranteeClaimEventList *ShipmentEventList `json:"GuaranteeClaimEventList,omitempty"`

	// ImagingServicesFeeEventList A list of fee events related to Amazon Imaging services.
	ImagingServicesFeeEventList *ImagingServicesFeeEventList `json:"ImagingServicesFeeEventList,omitempty"`

	// LoanServicingEventList A list of loan servicing events.
	LoanServicingEventList *LoanServicingEventList `json:"LoanServicingEventList,omitempty"`

	// NetworkComminglingTransactionEventList A list of network commingling transaction events.
	NetworkComminglingTransactionEventList *NetworkComminglingTransactionEventList `json:"NetworkComminglingTransactionEventList,omitempty"`

	// PayWithAmazonEventList A list of events related to the seller's Pay with Amazon account.
	PayWithAmazonEventList *PayWithAmazonEventList `json:"PayWithAmazonEventList,omitempty"`

	// ProductAdsPaymentEventList A list of sponsored products payment events.
	ProductAdsPaymentEventList *ProductAdsPaymentEventList `json:"ProductAdsPaymentEventList,omitempty"`

	// RefundEventList A list of shipment event information.
	RefundEventList *ShipmentEventList `json:"RefundEventList,omitempty"`

	// RemovalShipmentAdjustmentEventList A comma-delimited list of Removal shipmentAdjustment details for FBA inventory.
	RemovalShipmentAdjustmentEventList *RemovalShipmentAdjustmentEventList `json:"RemovalShipmentAdjustmentEventList,omitempty"`

	// RemovalShipmentEventList A list of removal shipment event information.
	RemovalShipmentEventList *RemovalShipmentEventList `json:"RemovalShipmentEventList,omitempty"`

	// RentalTransactionEventList A list of rental transaction event information.
	RentalTransactionEventList *RentalTransactionEventList `json:"RentalTransactionEventList,omitempty"`

	// RetrochargeEventList A list of information about Retrocharge or RetrochargeReversal events.
	RetrochargeEventList *RetrochargeEventList `json:"RetrochargeEventList,omitempty"`

	// SAFETReimbursementEventList A list of SAFETReimbursementEvents.
	SAFETReimbursementEventList *SAFETReimbursementEventList `json:"SAFETReimbursementEventList,omitempty"`

	// SellerDealPaymentEventList A list of payment events for deal-related fees.
	SellerDealPaymentEventList *SellerDealPaymentEventList `json:"SellerDealPaymentEventList,omitempty"`

	// SellerReviewEnrollmentPaymentEventList A list of information about fee events for the Early Reviewer Program.
	SellerReviewEnrollmentPaymentEventList *SellerReviewEnrollmentPaymentEventList `json:"SellerReviewEnrollmentPaymentEventList,omitempty"`

	// ServiceFeeEventList A list of information about service fee events.
	ServiceFeeEventList *ServiceFeeEventList `json:"ServiceFeeEventList,omitempty"`

	// ServiceProviderCreditEventList A list of information about solution provider credits.
	ServiceProviderCreditEventList *SolutionProviderCreditEventList `json:"ServiceProviderCreditEventList,omitempty"`

	// ShipmentEventList A list of shipment event information.
	ShipmentEventList *ShipmentEventList `json:"ShipmentEventList,omitempty"`

	// ShipmentSettleEventList A list of `ShipmentEvent` items.
	ShipmentSettleEventList *ShipmentSettleEventList `json:"ShipmentSettleEventList,omitempty"`

	// TDSReimbursementEventList A list of `TDSReimbursementEvent` items.
	TDSReimbursementEventList *TDSReimbursementEventList `json:"TDSReimbursementEventList,omitempty"`

	// TaxWithholdingEventList A list of `TaxWithholding` events.
	TaxWithholdingEventList *TaxWithholdingEventList `json:"TaxWithholdingEventList,omitempty"`

	// TrialShipmentEventList A list of information about trial shipment financial events.
	TrialShipmentEventList *TrialShipmentEventList `json:"TrialShipmentEventList,omitempty"`

	// ValueAddedServiceChargeEventList A list of `ValueAddedServiceCharge` events.
	ValueAddedServiceChargeEventList *ValueAddedServiceChargeEventList `json:"ValueAddedServiceChargeEventList,omitempty"`
}

// ImagingServicesFeeEvent A fee event related to Amazon Imaging services.
type ImagingServicesFeeEvent struct {
	// ASIN The Amazon Standard Identification Number (ASIN) of the item for which the imaging service was requested.
	ASIN *string `json:"ASIN,omitempty"`

	// FeeList A list of fee component information.
	FeeList *FeeComponentList `json:"FeeList,omitempty"`

	// ImagingRequestBillingItemID The identifier for the imaging services request.
	ImagingRequestBillingItemID *string `json:"ImagingRequestBillingItemID,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`
}

// ImagingServicesFeeEventList A list of fee events related to Amazon Imaging services.
type ImagingServicesFeeEventList = []ImagingServicesFeeEvent

// ListFinancialEventGroupsPayload The payload for the listFinancialEventGroups operation.
type ListFinancialEventGroupsPayload struct {
	// FinancialEventGroupList A list of financial event group information.
	FinancialEventGroupList *FinancialEventGroupList `json:"FinancialEventGroupList,omitempty"`

	// NextToken When present and not empty, pass this string token in the next request to return the next response page.
	NextToken *string `json:"NextToken,omitempty"`
}

// ListFinancialEventGroupsResponse The response schema for the listFinancialEventGroups operation.
type ListFinancialEventGroupsResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The payload for the listFinancialEventGroups operation.
	Payload *ListFinancialEventGroupsPayload `json:"payload,omitempty"`
}

// ListFinancialEventsPayload The payload for the listFinancialEvents operation.
type ListFinancialEventsPayload struct {
	// FinancialEvents Contains all information related to a financial event.
	FinancialEvents *FinancialEvents `json:"FinancialEvents,omitempty"`

	// NextToken When present and not empty, pass this string token in the next request to return the next response page.
	NextToken *string `json:"NextToken,omitempty"`
}

// ListFinancialEventsResponse The response schema for the listFinancialEvents operation.
type ListFinancialEventsResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The payload for the listFinancialEvents operation.
	Payload *ListFinancialEventsPayload `json:"payload,omitempty"`
}

// LoanServicingEvent A loan advance, loan payment, or loan refund.
type LoanServicingEvent struct {
	// LoanAmount A currency type and amount.
	LoanAmount *Currency `json:"LoanAmount,omitempty"`

	// SourceBusinessEventType The type of event.
	//
	// Possible values:
	//
	// * LoanAdvance
	//
	// * LoanPayment
	//
	// * LoanRefund
	SourceBusinessEventType *string `json:"SourceBusinessEventType,omitempty"`
}

// LoanServicingEventList A list of loan servicing events.
type LoanServicingEventList = []LoanServicingEvent

// NetworkComminglingTransactionEvent A network commingling transaction event.
type NetworkComminglingTransactionEvent struct {
	// ASIN The Amazon Standard Identification Number (ASIN) of the swapped item.
	ASIN *string `json:"ASIN,omitempty"`

	// MarketplaceId The marketplace in which the event took place.
	MarketplaceId *string `json:"MarketplaceId,omitempty"`

	// NetCoTransactionID The identifier for the network item swap.
	NetCoTransactionID *string `json:"NetCoTransactionID,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// SwapReason The reason for the network item swap.
	SwapReason *string `json:"SwapReason,omitempty"`

	// TaxAmount A currency type and amount.
	TaxAmount *Currency `json:"TaxAmount,omitempty"`

	// TaxExclusiveAmount A currency type and amount.
	TaxExclusiveAmount *Currency `json:"TaxExclusiveAmount,omitempty"`

	// TransactionType The type of network item swap.
	//
	// Possible values:
	//
	// * NetCo - A Fulfillment by Amazon inventory pooling transaction. Available only in the India marketplace.
	//
	// * ComminglingVAT - A commingling VAT transaction. Available only in the UK, Spain, France, Germany, and Italy marketplaces.
	TransactionType *string `json:"TransactionType,omitempty"`
}

// NetworkComminglingTransactionEventList A list of network commingling transaction events.
type NetworkComminglingTransactionEventList = []NetworkComminglingTransactionEvent

// PayWithAmazonEvent An event related to the seller's Pay with Amazon account.
type PayWithAmazonEvent struct {
	// AmountDescription A short description of this payment event.
	AmountDescription *string `json:"AmountDescription,omitempty"`

	// BusinessObjectType The type of business object.
	BusinessObjectType *string `json:"BusinessObjectType,omitempty"`

	// Charge A charge on the seller's account.
	//
	// Possible values:
	//
	// * Principal - The selling price of the order item, equal to the selling price of the item multiplied by the quantity ordered.
	//
	// * Tax - The tax collected by the seller on the Principal.
	//
	// * MarketplaceFacilitatorTax-Principal - The tax withheld on the Principal.
	//
	// * MarketplaceFacilitatorTax-Shipping - The tax withheld on the ShippingCharge.
	//
	// * MarketplaceFacilitatorTax-Giftwrap - The tax withheld on the Giftwrap charge.
	//
	// * MarketplaceFacilitatorTax-Other - The tax withheld on other miscellaneous charges.
	//
	// * Discount - The promotional discount for an order item.
	//
	// * TaxDiscount - The tax amount deducted for promotional rebates.
	//
	// * CODItemCharge - The COD charge for an order item.
	//
	// * CODItemTaxCharge - The tax collected by the seller on a CODItemCharge.
	//
	// * CODOrderCharge - The COD charge for an order.
	//
	// * CODOrderTaxCharge - The tax collected by the seller on a CODOrderCharge.
	//
	// * CODShippingCharge - Shipping charges for a COD order.
	//
	// * CODShippingTaxCharge - The tax collected by the seller on a CODShippingCharge.
	//
	// * ShippingCharge - The shipping charge.
	//
	// * ShippingTax - The tax collected by the seller on a ShippingCharge.
	//
	// * Goodwill - The amount given to a buyer as a gesture of goodwill or to compensate for pain and suffering in the buying experience.
	//
	// * Giftwrap - The gift wrap charge.
	//
	// * GiftwrapTax - The tax collected by the seller on a Giftwrap charge.
	//
	// * RestockingFee - The charge applied to the buyer when returning a product in certain categories.
	//
	// * ReturnShipping - The amount given to the buyer to compensate for shipping the item back in the event we are at fault.
	//
	// * PointsFee - The value of Amazon Points deducted from the refund if the buyer does not have enough Amazon Points to cover the deduction.
	//
	// * GenericDeduction - A generic bad debt deduction.
	//
	// * FreeReplacementReturnShipping - The compensation for return shipping when a buyer receives the wrong item, requests a free replacement, and returns the incorrect item.
	//
	// * PaymentMethodFee - The fee collected for certain payment methods in certain marketplaces.
	//
	// * ExportCharge - The export duty that is charged when an item is shipped to an international destination as part of the Amazon Global program.
	//
	// * SAFE-TReimbursement - The SAFE-T claim amount for the item.
	//
	// * TCS-CGST - Tax Collected at Source (TCS) for Central Goods and Services Tax (CGST).
	//
	// * TCS-SGST - Tax Collected at Source for State Goods and Services Tax (SGST).
	//
	// * TCS-IGST - Tax Collected at Source for Integrated Goods and Services Tax (IGST).
	//
	// * TCS-UTGST - Tax Collected at Source for Union Territories Goods and Services Tax (UTGST).
	Charge *ChargeComponent `json:"Charge,omitempty"`

	// FeeList A list of fee component information.
	FeeList *FeeComponentList `json:"FeeList,omitempty"`

	// FulfillmentChannel The fulfillment channel.
	//
	// Possible values:
	//
	// * AFN - Amazon Fulfillment Network (Fulfillment by Amazon)
	//
	// * MFN - Merchant Fulfillment Network (self-fulfilled)
	FulfillmentChannel *string `json:"FulfillmentChannel,omitempty"`

	// PaymentAmountType The type of payment.
	//
	// Possible values:
	//
	// * Sales
	PaymentAmountType *string `json:"PaymentAmountType,omitempty"`

	// SalesChannel The sales channel for the transaction.
	SalesChannel *string `json:"SalesChannel,omitempty"`

	// SellerOrderId An order identifier that is specified by the seller.
	SellerOrderId *string `json:"SellerOrderId,omitempty"`

	// StoreName The store name where the event occurred.
	StoreName *string `json:"StoreName,omitempty"`

	// TransactionPostedDate date-time format string
	TransactionPostedDate *Date `json:"TransactionPostedDate,omitempty"`
}

// PayWithAmazonEventList A list of events related to the seller's Pay with Amazon account.
type PayWithAmazonEventList = []PayWithAmazonEvent

// ProductAdsPaymentEvent A Sponsored Products payment event.
type ProductAdsPaymentEvent struct {
	// BaseValue A currency type and amount.
	BaseValue *Currency `json:"baseValue,omitempty"`

	// InvoiceId Identifier for the invoice that the transaction appears in.
	InvoiceId *string `json:"invoiceId,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"postedDate,omitempty"`

	// TaxValue A currency type and amount.
	TaxValue *Currency `json:"taxValue,omitempty"`

	// TransactionType Indicates if the transaction is for a charge or a refund.
	//
	// Possible values:
	//
	// * charge - Charge
	//
	// * refund - Refund
	TransactionType *string `json:"transactionType,omitempty"`

	// TransactionValue A currency type and amount.
	TransactionValue *Currency `json:"transactionValue,omitempty"`
}

// ProductAdsPaymentEventList A list of sponsored products payment events.
type ProductAdsPaymentEventList = []ProductAdsPaymentEvent

// Promotion A promotion applied to an item.
type Promotion struct {
	// PromotionAmount A currency type and amount.
	PromotionAmount *Currency `json:"PromotionAmount,omitempty"`

	// PromotionId The seller-specified identifier for the promotion.
	PromotionId *string `json:"PromotionId,omitempty"`

	// PromotionType The type of promotion.
	PromotionType *string `json:"PromotionType,omitempty"`
}

// PromotionList A list of promotions.
type PromotionList = []Promotion

// RemovalShipmentAdjustmentEvent A financial adjustment event for FBA liquidated inventory. A positive value indicates money owed to Amazon by the buyer (for example, when the charge was incorrectly calculated as less than it should be). A negative value indicates a full or partial refund owed to the buyer (for example, when the buyer receives damaged items or fewer items than ordered).
type RemovalShipmentAdjustmentEvent struct {
	// AdjustmentEventId The unique identifier for the adjustment event.
	AdjustmentEventId *string `json:"AdjustmentEventId,omitempty"`

	// MerchantOrderId The merchant removal orderId.
	MerchantOrderId *string `json:"MerchantOrderId,omitempty"`

	// OrderId The orderId for shipping inventory.
	OrderId *string `json:"OrderId,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// RemovalShipmentItemAdjustmentList A comma-delimited list of Removal shipmentItemAdjustment details for FBA inventory.
	RemovalShipmentItemAdjustmentList *[]RemovalShipmentItemAdjustment `json:"RemovalShipmentItemAdjustmentList,omitempty"`

	// TransactionType The type of removal order.
	//
	// Possible values:
	//
	// * WHOLESALE_LIQUIDATION.
	TransactionType *string `json:"TransactionType,omitempty"`
}

// RemovalShipmentAdjustmentEventList A comma-delimited list of Removal shipmentAdjustment details for FBA inventory.
type RemovalShipmentAdjustmentEventList = []RemovalShipmentAdjustmentEvent

// RemovalShipmentEvent A removal shipment event for a removal order.
type RemovalShipmentEvent struct {
	// MerchantOrderId The merchant removal orderId.
	MerchantOrderId *string `json:"MerchantOrderId,omitempty"`

	// OrderId The identifier for the removal shipment order.
	OrderId *string `json:"OrderId,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// RemovalShipmentItemList A list of information about removal shipment items.
	RemovalShipmentItemList *RemovalShipmentItemList `json:"RemovalShipmentItemList,omitempty"`

	// TransactionType The type of removal order.
	//
	// Possible values:
	//
	// * WHOLESALE_LIQUIDATION
	TransactionType *string `json:"TransactionType,omitempty"`
}

// RemovalShipmentEventList A list of removal shipment event information.
type RemovalShipmentEventList = []RemovalShipmentEvent

// RemovalShipmentItem Item-level information for a removal shipment.
type RemovalShipmentItem struct {
	// FeeAmount A currency type and amount.
	FeeAmount *Currency `json:"FeeAmount,omitempty"`

	// FulfillmentNetworkSKU The Amazon fulfillment network SKU for the item.
	FulfillmentNetworkSKU *string `json:"FulfillmentNetworkSKU,omitempty"`

	// Quantity The quantity of the item.
	Quantity *int32 `json:"Quantity,omitempty"`

	// RemovalShipmentItemId An identifier for an item in a removal shipment.
	RemovalShipmentItemId *string `json:"RemovalShipmentItemId,omitempty"`

	// Revenue A currency type and amount.
	Revenue *Currency `json:"Revenue,omitempty"`

	// TaxAmount A currency type and amount.
	TaxAmount *Currency `json:"TaxAmount,omitempty"`

	// TaxCollectionModel The tax collection model applied to the item.
	//
	// Possible values:
	//
	// * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
	//
	// * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
	TaxCollectionModel *string `json:"TaxCollectionModel,omitempty"`

	// TaxWithheld A currency type and amount.
	TaxWithheld *Currency `json:"TaxWithheld,omitempty"`
}

// RemovalShipmentItemAdjustment Item-level information for a removal shipment item adjustment.
type RemovalShipmentItemAdjustment struct {
	// AdjustedQuantity Adjusted quantity of removal shipmentItemAdjustment items.
	AdjustedQuantity *int32 `json:"AdjustedQuantity,omitempty"`

	// FulfillmentNetworkSKU The Amazon fulfillment network SKU for the item.
	FulfillmentNetworkSKU *string `json:"FulfillmentNetworkSKU,omitempty"`

	// RemovalShipmentItemId An identifier for an item in a removal shipment.
	RemovalShipmentItemId *string `json:"RemovalShipmentItemId,omitempty"`

	// RevenueAdjustment A currency type and amount.
	RevenueAdjustment *Currency `json:"RevenueAdjustment,omitempty"`

	// TaxAmountAdjustment A currency type and amount.
	TaxAmountAdjustment *Currency `json:"TaxAmountAdjustment,omitempty"`

	// TaxCollectionModel The tax collection model applied to the item.
	//
	// Possible values:
	//
	// * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
	//
	// * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
	TaxCollectionModel *string `json:"TaxCollectionModel,omitempty"`

	// TaxWithheldAdjustment A currency type and amount.
	TaxWithheldAdjustment *Currency `json:"TaxWithheldAdjustment,omitempty"`
}

// RemovalShipmentItemList A list of information about removal shipment items.
type RemovalShipmentItemList = []RemovalShipmentItem

// RentalTransactionEvent An event related to a rental transaction.
type RentalTransactionEvent struct {
	// AmazonOrderId An Amazon-defined identifier for an order.
	AmazonOrderId *string `json:"AmazonOrderId,omitempty"`

	// ExtensionLength The number of days that the buyer extended an already rented item. This value is only returned for RentalCustomerPayment-Extension and RentalCustomerRefund-Extension events.
	ExtensionLength *int32 `json:"ExtensionLength,omitempty"`

	// MarketplaceName The name of the marketplace.
	MarketplaceName *string `json:"MarketplaceName,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// RentalChargeList A list of charge information on the seller's account.
	RentalChargeList *ChargeComponentList `json:"RentalChargeList,omitempty"`

	// RentalEventType The type of rental event.
	//
	// Possible values:
	//
	// * RentalCustomerPayment-Buyout - Transaction type that represents when the customer wants to buy out a rented item.
	//
	// * RentalCustomerPayment-Extension - Transaction type that represents when the customer wants to extend the rental period.
	//
	// * RentalCustomerRefund-Buyout - Transaction type that represents when the customer requests a refund for the buyout of the rented item.
	//
	// * RentalCustomerRefund-Extension - Transaction type that represents when the customer requests a refund over the extension on the rented item.
	//
	// * RentalHandlingFee - Transaction type that represents the fee that Amazon charges sellers who rent through Amazon.
	//
	// * RentalChargeFailureReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a failed charge.
	//
	// * RentalLostItemReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a lost item.
	RentalEventType *string `json:"RentalEventType,omitempty"`

	// RentalFeeList A list of fee component information.
	RentalFeeList *FeeComponentList `json:"RentalFeeList,omitempty"`

	// RentalInitialValue A currency type and amount.
	RentalInitialValue *Currency `json:"RentalInitialValue,omitempty"`

	// RentalReimbursement A currency type and amount.
	RentalReimbursement *Currency `json:"RentalReimbursement,omitempty"`

	// RentalTaxWithheldList A list of information about taxes withheld.
	RentalTaxWithheldList *TaxWithheldComponentList `json:"RentalTaxWithheldList,omitempty"`
}

// RentalTransactionEventList A list of rental transaction event information.
type RentalTransactionEventList = []RentalTransactionEvent

// RetrochargeEvent A retrocharge or retrocharge reversal.
type RetrochargeEvent struct {
	// AmazonOrderId An Amazon-defined identifier for an order.
	AmazonOrderId *string `json:"AmazonOrderId,omitempty"`

	// BaseTax A currency type and amount.
	BaseTax *Currency `json:"BaseTax,omitempty"`

	// MarketplaceName The name of the marketplace where the retrocharge event occurred.
	MarketplaceName *string `json:"MarketplaceName,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// RetrochargeEventType The type of event.
	//
	// Possible values:
	//
	// * Retrocharge
	//
	// * RetrochargeReversal
	RetrochargeEventType *string `json:"RetrochargeEventType,omitempty"`

	// RetrochargeTaxWithheldList A list of information about taxes withheld.
	RetrochargeTaxWithheldList *TaxWithheldComponentList `json:"RetrochargeTaxWithheldList,omitempty"`

	// ShippingTax A currency type and amount.
	ShippingTax *Currency `json:"ShippingTax,omitempty"`
}

// RetrochargeEventList A list of information about Retrocharge or RetrochargeReversal events.
type RetrochargeEventList = []RetrochargeEvent

// SAFETReimbursementEvent A SAFE-T claim reimbursement on the seller's account.
type SAFETReimbursementEvent struct {
	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// ReasonCode Indicates why the seller was reimbursed.
	ReasonCode *string `json:"ReasonCode,omitempty"`

	// ReimbursedAmount A currency type and amount.
	ReimbursedAmount *Currency `json:"ReimbursedAmount,omitempty"`

	// SAFETClaimId A SAFE-T claim identifier.
	SAFETClaimId *string `json:"SAFETClaimId,omitempty"`

	// SAFETReimbursementItemList A list of SAFETReimbursementItems.
	SAFETReimbursementItemList *SAFETReimbursementItemList `json:"SAFETReimbursementItemList,omitempty"`
}

// SAFETReimbursementEventList A list of SAFETReimbursementEvents.
type SAFETReimbursementEventList = []SAFETReimbursementEvent

// SAFETReimbursementItem An item from a SAFE-T claim reimbursement.
type SAFETReimbursementItem struct {
	// ItemChargeList A list of charge information on the seller's account.
	ItemChargeList *ChargeComponentList `json:"itemChargeList,omitempty"`

	// ProductDescription The description of the item as shown on the product detail page on the retail website.
	ProductDescription *string `json:"productDescription,omitempty"`

	// Quantity The number of units of the item being reimbursed.
	Quantity *string `json:"quantity,omitempty"`
}

// SAFETReimbursementItemList A list of SAFETReimbursementItems.
type SAFETReimbursementItemList = []SAFETReimbursementItem

// SellerDealPaymentEvent An event linked to the payment of a fee related to the specified deal.
type SellerDealPaymentEvent struct {
	// DealDescription The internal description of the deal.
	DealDescription *string `json:"dealDescription,omitempty"`

	// DealId The unique identifier of the deal.
	DealId *string `json:"dealId,omitempty"`

	// EventType The type of event: SellerDealComplete.
	EventType *string `json:"eventType,omitempty"`

	// FeeAmount A currency type and amount.
	FeeAmount *Currency `json:"feeAmount,omitempty"`

	// FeeType The type of fee: RunLightningDealFee.
	FeeType *string `json:"feeType,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"postedDate,omitempty"`

	// TaxAmount A currency type and amount.
	TaxAmount *Currency `json:"taxAmount,omitempty"`

	// TotalAmount A currency type and amount.
	TotalAmount *Currency `json:"totalAmount,omitempty"`
}

// SellerDealPaymentEventList A list of payment events for deal-related fees.
type SellerDealPaymentEventList = []SellerDealPaymentEvent

// SellerReviewEnrollmentPaymentEvent A fee payment event for the Early Reviewer Program.
type SellerReviewEnrollmentPaymentEvent struct {
	// ChargeComponent A charge on the seller's account.
	//
	// Possible values:
	//
	// * Principal - The selling price of the order item, equal to the selling price of the item multiplied by the quantity ordered.
	//
	// * Tax - The tax collected by the seller on the Principal.
	//
	// * MarketplaceFacilitatorTax-Principal - The tax withheld on the Principal.
	//
	// * MarketplaceFacilitatorTax-Shipping - The tax withheld on the ShippingCharge.
	//
	// * MarketplaceFacilitatorTax-Giftwrap - The tax withheld on the Giftwrap charge.
	//
	// * MarketplaceFacilitatorTax-Other - The tax withheld on other miscellaneous charges.
	//
	// * Discount - The promotional discount for an order item.
	//
	// * TaxDiscount - The tax amount deducted for promotional rebates.
	//
	// * CODItemCharge - The COD charge for an order item.
	//
	// * CODItemTaxCharge - The tax collected by the seller on a CODItemCharge.
	//
	// * CODOrderCharge - The COD charge for an order.
	//
	// * CODOrderTaxCharge - The tax collected by the seller on a CODOrderCharge.
	//
	// * CODShippingCharge - Shipping charges for a COD order.
	//
	// * CODShippingTaxCharge - The tax collected by the seller on a CODShippingCharge.
	//
	// * ShippingCharge - The shipping charge.
	//
	// * ShippingTax - The tax collected by the seller on a ShippingCharge.
	//
	// * Goodwill - The amount given to a buyer as a gesture of goodwill or to compensate for pain and suffering in the buying experience.
	//
	// * Giftwrap - The gift wrap charge.
	//
	// * GiftwrapTax - The tax collected by the seller on a Giftwrap charge.
	//
	// * RestockingFee - The charge applied to the buyer when returning a product in certain categories.
	//
	// * ReturnShipping - The amount given to the buyer to compensate for shipping the item back in the event we are at fault.
	//
	// * PointsFee - The value of Amazon Points deducted from the refund if the buyer does not have enough Amazon Points to cover the deduction.
	//
	// * GenericDeduction - A generic bad debt deduction.
	//
	// * FreeReplacementReturnShipping - The compensation for return shipping when a buyer receives the wrong item, requests a free replacement, and returns the incorrect item.
	//
	// * PaymentMethodFee - The fee collected for certain payment methods in certain marketplaces.
	//
	// * ExportCharge - The export duty that is charged when an item is shipped to an international destination as part of the Amazon Global program.
	//
	// * SAFE-TReimbursement - The SAFE-T claim amount for the item.
	//
	// * TCS-CGST - Tax Collected at Source (TCS) for Central Goods and Services Tax (CGST).
	//
	// * TCS-SGST - Tax Collected at Source for State Goods and Services Tax (SGST).
	//
	// * TCS-IGST - Tax Collected at Source for Integrated Goods and Services Tax (IGST).
	//
	// * TCS-UTGST - Tax Collected at Source for Union Territories Goods and Services Tax (UTGST).
	ChargeComponent *ChargeComponent `json:"ChargeComponent,omitempty"`

	// EnrollmentId An enrollment identifier.
	EnrollmentId *string `json:"EnrollmentId,omitempty"`

	// FeeComponent A fee associated with the event.
	FeeComponent *FeeComponent `json:"FeeComponent,omitempty"`

	// ParentASIN The Amazon Standard Identification Number (ASIN) of the item that was enrolled in the Early Reviewer Program.
	ParentASIN *string `json:"ParentASIN,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// TotalAmount A currency type and amount.
	TotalAmount *Currency `json:"TotalAmount,omitempty"`
}

// SellerReviewEnrollmentPaymentEventList A list of information about fee events for the Early Reviewer Program.
type SellerReviewEnrollmentPaymentEventList = []SellerReviewEnrollmentPaymentEvent

// ServiceFeeEvent A service fee on the seller's account.
type ServiceFeeEvent struct {
	// ASIN The Amazon Standard Identification Number (ASIN) of the item.
	ASIN *string `json:"ASIN,omitempty"`

	// AmazonOrderId An Amazon-defined identifier for an order.
	AmazonOrderId *string `json:"AmazonOrderId,omitempty"`

	// FeeDescription A short description of the service fee event.
	FeeDescription *string `json:"FeeDescription,omitempty"`

	// FeeList A list of fee component information.
	FeeList *FeeComponentList `json:"FeeList,omitempty"`

	// FeeReason A short description of the service fee reason.
	FeeReason *string `json:"FeeReason,omitempty"`

	// FnSKU A unique identifier assigned by Amazon to products stored in and fulfilled from an Amazon fulfillment center.
	FnSKU *string `json:"FnSKU,omitempty"`

	// SellerSKU The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API.
	SellerSKU *string `json:"SellerSKU,omitempty"`
}

// ServiceFeeEventList A list of information about service fee events.
type ServiceFeeEventList = []ServiceFeeEvent

// ShipmentEvent A shipment, refund, guarantee claim, or chargeback.
type ShipmentEvent struct {
	// AmazonOrderId An Amazon-defined identifier for an order.
	AmazonOrderId *string `json:"AmazonOrderId,omitempty"`

	// DirectPaymentList A list of direct payment information.
	DirectPaymentList *DirectPaymentList `json:"DirectPaymentList,omitempty"`

	// MarketplaceName The name of the marketplace where the event occurred.
	MarketplaceName *string `json:"MarketplaceName,omitempty"`

	// OrderChargeAdjustmentList A list of charge information on the seller's account.
	OrderChargeAdjustmentList *ChargeComponentList `json:"OrderChargeAdjustmentList,omitempty"`

	// OrderChargeList A list of charge information on the seller's account.
	OrderChargeList *ChargeComponentList `json:"OrderChargeList,omitempty"`

	// OrderFeeAdjustmentList A list of fee component information.
	OrderFeeAdjustmentList *FeeComponentList `json:"OrderFeeAdjustmentList,omitempty"`

	// OrderFeeList A list of fee component information.
	OrderFeeList *FeeComponentList `json:"OrderFeeList,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// SellerOrderId A seller-defined identifier for an order.
	SellerOrderId *string `json:"SellerOrderId,omitempty"`

	// ShipmentFeeAdjustmentList A list of fee component information.
	ShipmentFeeAdjustmentList *FeeComponentList `json:"ShipmentFeeAdjustmentList,omitempty"`

	// ShipmentFeeList A list of fee component information.
	ShipmentFeeList *FeeComponentList `json:"ShipmentFeeList,omitempty"`

	// ShipmentItemAdjustmentList A list of shipment items.
	ShipmentItemAdjustmentList *ShipmentItemList `json:"ShipmentItemAdjustmentList,omitempty"`

	// ShipmentItemList A list of shipment items.
	ShipmentItemList *ShipmentItemList `json:"ShipmentItemList,omitempty"`
}

// ShipmentEventList A list of shipment event information.
type ShipmentEventList = []ShipmentEvent

// ShipmentItem An item of a shipment, refund, guarantee claim, or chargeback.
type ShipmentItem struct {
	// CostOfPointsGranted A currency type and amount.
	CostOfPointsGranted *Currency `json:"CostOfPointsGranted,omitempty"`

	// CostOfPointsReturned A currency type and amount.
	CostOfPointsReturned *Currency `json:"CostOfPointsReturned,omitempty"`

	// ItemChargeAdjustmentList A list of charge information on the seller's account.
	ItemChargeAdjustmentList *ChargeComponentList `json:"ItemChargeAdjustmentList,omitempty"`

	// ItemChargeList A list of charge information on the seller's account.
	ItemChargeList *ChargeComponentList `json:"ItemChargeList,omitempty"`

	// ItemFeeAdjustmentList A list of fee component information.
	ItemFeeAdjustmentList *FeeComponentList `json:"ItemFeeAdjustmentList,omitempty"`

	// ItemFeeList A list of fee component information.
	ItemFeeList *FeeComponentList `json:"ItemFeeList,omitempty"`

	// ItemTaxWithheldList A list of information about taxes withheld.
	ItemTaxWithheldList *TaxWithheldComponentList `json:"ItemTaxWithheldList,omitempty"`

	// OrderAdjustmentItemId An Amazon-defined order adjustment identifier defined for refunds, guarantee claims, and chargeback events.
	OrderAdjustmentItemId *string `json:"OrderAdjustmentItemId,omitempty"`

	// OrderItemId An Amazon-defined order item identifier.
	OrderItemId *string `json:"OrderItemId,omitempty"`

	// PromotionAdjustmentList A list of promotions.
	PromotionAdjustmentList *PromotionList `json:"PromotionAdjustmentList,omitempty"`

	// PromotionList A list of promotions.
	PromotionList *PromotionList `json:"PromotionList,omitempty"`

	// QuantityShipped The number of items shipped.
	QuantityShipped *int32 `json:"QuantityShipped,omitempty"`

	// SellerSKU The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API.
	SellerSKU *string `json:"SellerSKU,omitempty"`
}

// ShipmentItemList A list of shipment items.
type ShipmentItemList = []ShipmentItem

// ShipmentSettleEventList A list of `ShipmentEvent` items.
type ShipmentSettleEventList = []ShipmentEvent

// SolutionProviderCreditEvent A credit given to a solution provider.
type SolutionProviderCreditEvent struct {
	// MarketplaceCountryCode The two-letter country code of the country associated with the marketplace where the order was placed.
	MarketplaceCountryCode *string `json:"MarketplaceCountryCode,omitempty"`

	// MarketplaceId The identifier of the marketplace where the order was placed.
	MarketplaceId *string `json:"MarketplaceId,omitempty"`

	// ProviderId The Amazon-defined identifier of the solution provider.
	ProviderId *string `json:"ProviderId,omitempty"`

	// ProviderStoreName The store name where the payment event occurred.
	ProviderStoreName *string `json:"ProviderStoreName,omitempty"`

	// ProviderTransactionType The transaction type.
	ProviderTransactionType *string `json:"ProviderTransactionType,omitempty"`

	// SellerId The Amazon-defined identifier of the seller.
	SellerId *string `json:"SellerId,omitempty"`

	// SellerOrderId A seller-defined identifier for an order.
	SellerOrderId *string `json:"SellerOrderId,omitempty"`

	// SellerStoreName The store name where the payment event occurred.
	SellerStoreName *string `json:"SellerStoreName,omitempty"`

	// TransactionAmount A currency type and amount.
	TransactionAmount *Currency `json:"TransactionAmount,omitempty"`

	// TransactionCreationDate date-time format string
	TransactionCreationDate *Date `json:"TransactionCreationDate,omitempty"`
}

// SolutionProviderCreditEventList A list of information about solution provider credits.
type SolutionProviderCreditEventList = []SolutionProviderCreditEvent

// TDSReimbursementEvent An event related to a Tax-Deducted-at-Source (TDS) reimbursement.
type TDSReimbursementEvent struct {
	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// ReimbursedAmount A currency type and amount.
	ReimbursedAmount *Currency `json:"ReimbursedAmount,omitempty"`

	// TDSOrderId The Tax-Deducted-at-Source (TDS) identifier.
	TDSOrderId *string `json:"TDSOrderId,omitempty"`
}

// TDSReimbursementEventList A list of `TDSReimbursementEvent` items.
type TDSReimbursementEventList = []TDSReimbursementEvent

// TaxWithheldComponent Information about the taxes withheld.
type TaxWithheldComponent struct {
	// TaxCollectionModel The tax collection model applied to the item.
	//
	// Possible values:
	//
	// * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
	//
	// * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
	TaxCollectionModel *string `json:"TaxCollectionModel,omitempty"`

	// TaxesWithheld A list of charge information on the seller's account.
	TaxesWithheld *ChargeComponentList `json:"TaxesWithheld,omitempty"`
}

// TaxWithheldComponentList A list of information about taxes withheld.
type TaxWithheldComponentList = []TaxWithheldComponent

// TaxWithholdingEvent A TaxWithholding event on seller's account.
type TaxWithholdingEvent struct {
	// BaseAmount A currency type and amount.
	BaseAmount *Currency `json:"BaseAmount,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// TaxWithholdingPeriod Period which taxwithholding on seller's account is calculated.
	TaxWithholdingPeriod *TaxWithholdingPeriod `json:"TaxWithholdingPeriod,omitempty"`

	// WithheldAmount A currency type and amount.
	WithheldAmount *Currency `json:"WithheldAmount,omitempty"`
}

// TaxWithholdingEventList A list of `TaxWithholding` events.
type TaxWithholdingEventList = []TaxWithholdingEvent

// TaxWithholdingPeriod Period which taxwithholding on seller's account is calculated.
type TaxWithholdingPeriod struct {
	// EndDate date-time format string
	EndDate *Date `json:"EndDate,omitempty"`

	// StartDate date-time format string
	StartDate *Date `json:"StartDate,omitempty"`
}

// TrialShipmentEvent An event related to a trial shipment.
type TrialShipmentEvent struct {
	// AmazonOrderId An Amazon-defined identifier for an order.
	AmazonOrderId *string `json:"AmazonOrderId,omitempty"`

	// FeeList A list of fee component information.
	FeeList *FeeComponentList `json:"FeeList,omitempty"`

	// FinancialEventGroupId The identifier of the financial event group.
	FinancialEventGroupId *string `json:"FinancialEventGroupId,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// SKU The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API.
	SKU *string `json:"SKU,omitempty"`
}

// TrialShipmentEventList A list of information about trial shipment financial events.
type TrialShipmentEventList = []TrialShipmentEvent

// ValueAddedServiceChargeEvent An event related to a value added service charge.
type ValueAddedServiceChargeEvent struct {
	// Description A short description of the service charge event.
	Description *string `json:"Description,omitempty"`

	// PostedDate date-time format string
	PostedDate *Date `json:"PostedDate,omitempty"`

	// TransactionAmount A currency type and amount.
	TransactionAmount *Currency `json:"TransactionAmount,omitempty"`

	// TransactionType Indicates the type of transaction.
	//
	// Example: 'Other Support Service fees'
	TransactionType *string `json:"TransactionType,omitempty"`
}

// ValueAddedServiceChargeEventList A list of `ValueAddedServiceCharge` events.
type ValueAddedServiceChargeEventList = []ValueAddedServiceChargeEvent

// ListFinancialEventGroupsParams defines parameters for ListFinancialEventGroups.
type ListFinancialEventGroupsParams struct {
	// MaxResultsPerPage The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'.
	MaxResultsPerPage *int32 `form:"MaxResultsPerPage,omitempty" json:"MaxResultsPerPage,omitempty"`

	// FinancialEventGroupStartedBefore A date used for selecting financial event groups that opened before (but not at) a specified date and time, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned.
	FinancialEventGroupStartedBefore *time.Time `form:"FinancialEventGroupStartedBefore,omitempty" json:"FinancialEventGroupStartedBefore,omitempty"`

	// FinancialEventGroupStartedAfter A date used for selecting financial event groups that opened after (or at) a specified date and time, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format. The date-time must be no later than two minutes before the request was submitted.
	FinancialEventGroupStartedAfter *time.Time `form:"FinancialEventGroupStartedAfter,omitempty" json:"FinancialEventGroupStartedAfter,omitempty"`

	// NextToken A string token returned in the response of your previous request.
	NextToken *string `form:"NextToken,omitempty" json:"NextToken,omitempty"`
}

// ListFinancialEventsByGroupIdParams defines parameters for ListFinancialEventsByGroupId.
type ListFinancialEventsByGroupIdParams struct {
	// MaxResultsPerPage The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'.
	MaxResultsPerPage *int32 `form:"MaxResultsPerPage,omitempty" json:"MaxResultsPerPage,omitempty"`

	// PostedAfter A date used for selecting financial events posted after (or at) a specified time. The date-time **must** be more than two minutes before the time of the request, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.
	PostedAfter *time.Time `form:"PostedAfter,omitempty" json:"PostedAfter,omitempty"`

	// PostedBefore A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than `PostedAfter` and no later than two minutes before the request was submitted, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. If `PostedAfter` and `PostedBefore` are more than 180 days apart, no financial events are returned. You must specify the `PostedAfter` parameter if you specify the `PostedBefore` parameter. Default: Now minus two minutes.
	PostedBefore *time.Time `form:"PostedBefore,omitempty" json:"PostedBefore,omitempty"`

	// NextToken A string token returned in the response of your previous request.
	NextToken *string `form:"NextToken,omitempty" json:"NextToken,omitempty"`
}

// ListFinancialEventsParams defines parameters for ListFinancialEvents.
type ListFinancialEventsParams struct {
	// MaxResultsPerPage The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'.
	MaxResultsPerPage *int32 `form:"MaxResultsPerPage,omitempty" json:"MaxResultsPerPage,omitempty"`

	// PostedAfter A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.
	PostedAfter *time.Time `form:"PostedAfter,omitempty" json:"PostedAfter,omitempty"`

	// PostedBefore A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes.
	PostedBefore *time.Time `form:"PostedBefore,omitempty" json:"PostedBefore,omitempty"`

	// NextToken A string token returned in the response of your previous request.
	NextToken *string `form:"NextToken,omitempty" json:"NextToken,omitempty"`
}

// ListFinancialEventsByOrderIdParams defines parameters for ListFinancialEventsByOrderId.
type ListFinancialEventsByOrderIdParams struct {
	// MaxResultsPerPage The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'.
	MaxResultsPerPage *int32 `form:"MaxResultsPerPage,omitempty" json:"MaxResultsPerPage,omitempty"`

	// NextToken A string token returned in the response of your previous request.
	NextToken *string `form:"NextToken,omitempty" json:"NextToken,omitempty"`
}

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListFinancialEventGroups request
	ListFinancialEventGroups(ctx context.Context, params *ListFinancialEventGroupsParams) (*http.Response, error)

	// ListFinancialEventsByGroupId request
	ListFinancialEventsByGroupId(ctx context.Context, eventGroupId string, params *ListFinancialEventsByGroupIdParams) (*http.Response, error)

	// ListFinancialEvents request
	ListFinancialEvents(ctx context.Context, params *ListFinancialEventsParams) (*http.Response, error)

	// ListFinancialEventsByOrderId request
	ListFinancialEventsByOrderId(ctx context.Context, orderId string, params *ListFinancialEventsByOrderIdParams) (*http.Response, error)
}

func (c *Client) ListFinancialEventGroups(ctx context.Context, params *ListFinancialEventGroupsParams) (*http.Response, error) {
	req, err := NewListFinancialEventGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListFinancialEventsByGroupId(ctx context.Context, eventGroupId string, params *ListFinancialEventsByGroupIdParams) (*http.Response, error) {
	req, err := NewListFinancialEventsByGroupIdRequest(c.Server, eventGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListFinancialEvents(ctx context.Context, params *ListFinancialEventsParams) (*http.Response, error) {
	req, err := NewListFinancialEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListFinancialEventsByOrderId(ctx context.Context, orderId string, params *ListFinancialEventsByOrderIdParams) (*http.Response, error) {
	req, err := NewListFinancialEventsByOrderIdRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewListFinancialEventGroupsRequest generates requests for ListFinancialEventGroups
func NewListFinancialEventGroupsRequest(server string, params *ListFinancialEventGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/finances/v0/financialEventGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaxResultsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MaxResultsPerPage", runtime.ParamLocationQuery, *params.MaxResultsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.FinancialEventGroupStartedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FinancialEventGroupStartedBefore", runtime.ParamLocationQuery, *params.FinancialEventGroupStartedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.FinancialEventGroupStartedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FinancialEventGroupStartedAfter", runtime.ParamLocationQuery, *params.FinancialEventGroupStartedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFinancialEventsByGroupIdRequest generates requests for ListFinancialEventsByGroupId
func NewListFinancialEventsByGroupIdRequest(server string, eventGroupId string, params *ListFinancialEventsByGroupIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventGroupId", runtime.ParamLocationPath, eventGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/finances/v0/financialEventGroups/%s/financialEvents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaxResultsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MaxResultsPerPage", runtime.ParamLocationQuery, *params.MaxResultsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.PostedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PostedAfter", runtime.ParamLocationQuery, *params.PostedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.PostedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PostedBefore", runtime.ParamLocationQuery, *params.PostedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFinancialEventsRequest generates requests for ListFinancialEvents
func NewListFinancialEventsRequest(server string, params *ListFinancialEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/finances/v0/financialEvents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaxResultsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MaxResultsPerPage", runtime.ParamLocationQuery, *params.MaxResultsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.PostedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PostedAfter", runtime.ParamLocationQuery, *params.PostedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.PostedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PostedBefore", runtime.ParamLocationQuery, *params.PostedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFinancialEventsByOrderIdRequest generates requests for ListFinancialEventsByOrderId
func NewListFinancialEventsByOrderIdRequest(server string, orderId string, params *ListFinancialEventsByOrderIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/finances/v0/orders/%s/financialEvents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaxResultsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MaxResultsPerPage", runtime.ParamLocationQuery, *params.MaxResultsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListFinancialEventGroupsWithResponse request
	ListFinancialEventGroupsWithResponse(ctx context.Context, params *ListFinancialEventGroupsParams) (*ListFinancialEventGroupsResp, error)

	// ListFinancialEventsByGroupIdWithResponse request
	ListFinancialEventsByGroupIdWithResponse(ctx context.Context, eventGroupId string, params *ListFinancialEventsByGroupIdParams) (*ListFinancialEventsByGroupIdResp, error)

	// ListFinancialEventsWithResponse request
	ListFinancialEventsWithResponse(ctx context.Context, params *ListFinancialEventsParams) (*ListFinancialEventsResp, error)

	// ListFinancialEventsByOrderIdWithResponse request
	ListFinancialEventsByOrderIdWithResponse(ctx context.Context, orderId string, params *ListFinancialEventsByOrderIdParams) (*ListFinancialEventsByOrderIdResp, error)
}

type ListFinancialEventGroupsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListFinancialEventGroupsResponse
	JSON400      *ListFinancialEventGroupsResponse
	JSON403      *ListFinancialEventGroupsResponse
	JSON404      *ListFinancialEventGroupsResponse
	JSON429      *ListFinancialEventGroupsResponse
	JSON500      *ListFinancialEventGroupsResponse
	JSON503      *ListFinancialEventGroupsResponse
}

// Status returns HTTPResponse.Status
func (r ListFinancialEventGroupsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFinancialEventGroupsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFinancialEventsByGroupIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListFinancialEventsResponse
	JSON400      *ListFinancialEventsResponse
	JSON403      *ListFinancialEventsResponse
	JSON404      *ListFinancialEventsResponse
	JSON429      *ListFinancialEventsResponse
	JSON500      *ListFinancialEventsResponse
	JSON503      *ListFinancialEventsResponse
}

// Status returns HTTPResponse.Status
func (r ListFinancialEventsByGroupIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFinancialEventsByGroupIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFinancialEventsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListFinancialEventsResponse
	JSON400      *ListFinancialEventsResponse
	JSON403      *ListFinancialEventsResponse
	JSON404      *ListFinancialEventsResponse
	JSON429      *ListFinancialEventsResponse
	JSON500      *ListFinancialEventsResponse
	JSON503      *ListFinancialEventsResponse
}

// Status returns HTTPResponse.Status
func (r ListFinancialEventsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFinancialEventsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFinancialEventsByOrderIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListFinancialEventsResponse
	JSON400      *ListFinancialEventsResponse
	JSON403      *ListFinancialEventsResponse
	JSON404      *ListFinancialEventsResponse
	JSON429      *ListFinancialEventsResponse
	JSON500      *ListFinancialEventsResponse
	JSON503      *ListFinancialEventsResponse
}

// Status returns HTTPResponse.Status
func (r ListFinancialEventsByOrderIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFinancialEventsByOrderIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListFinancialEventGroupsWithResponse request returning *ListFinancialEventGroupsResp
func (c *ClientWithResponses) ListFinancialEventGroupsWithResponse(ctx context.Context, params *ListFinancialEventGroupsParams) (*ListFinancialEventGroupsResp, error) {
	rsp, err := c.ListFinancialEventGroups(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListFinancialEventGroupsResp(rsp)
}

// ListFinancialEventsByGroupIdWithResponse request returning *ListFinancialEventsByGroupIdResp
func (c *ClientWithResponses) ListFinancialEventsByGroupIdWithResponse(ctx context.Context, eventGroupId string, params *ListFinancialEventsByGroupIdParams) (*ListFinancialEventsByGroupIdResp, error) {
	rsp, err := c.ListFinancialEventsByGroupId(ctx, eventGroupId, params)
	if err != nil {
		return nil, err
	}
	return ParseListFinancialEventsByGroupIdResp(rsp)
}

// ListFinancialEventsWithResponse request returning *ListFinancialEventsResp
func (c *ClientWithResponses) ListFinancialEventsWithResponse(ctx context.Context, params *ListFinancialEventsParams) (*ListFinancialEventsResp, error) {
	rsp, err := c.ListFinancialEvents(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListFinancialEventsResp(rsp)
}

// ListFinancialEventsByOrderIdWithResponse request returning *ListFinancialEventsByOrderIdResp
func (c *ClientWithResponses) ListFinancialEventsByOrderIdWithResponse(ctx context.Context, orderId string, params *ListFinancialEventsByOrderIdParams) (*ListFinancialEventsByOrderIdResp, error) {
	rsp, err := c.ListFinancialEventsByOrderId(ctx, orderId, params)
	if err != nil {
		return nil, err
	}
	return ParseListFinancialEventsByOrderIdResp(rsp)
}

// ParseListFinancialEventGroupsResp parses an HTTP response from a ListFinancialEventGroupsWithResponse call
func ParseListFinancialEventGroupsResp(rsp *http.Response) (*ListFinancialEventGroupsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFinancialEventGroupsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFinancialEventGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ListFinancialEventGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ListFinancialEventGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ListFinancialEventGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ListFinancialEventGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ListFinancialEventGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ListFinancialEventGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListFinancialEventsByGroupIdResp parses an HTTP response from a ListFinancialEventsByGroupIdWithResponse call
func ParseListFinancialEventsByGroupIdResp(rsp *http.Response) (*ListFinancialEventsByGroupIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFinancialEventsByGroupIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListFinancialEventsResp parses an HTTP response from a ListFinancialEventsWithResponse call
func ParseListFinancialEventsResp(rsp *http.Response) (*ListFinancialEventsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFinancialEventsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListFinancialEventsByOrderIdResp parses an HTTP response from a ListFinancialEventsByOrderIdWithResponse call
func ParseListFinancialEventsByOrderIdResp(rsp *http.Response) (*ListFinancialEventsByOrderIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFinancialEventsByOrderIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ListFinancialEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
