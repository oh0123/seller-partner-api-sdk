// Package shippingv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.3 DO NOT EDIT.
package shippingv1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for ContainerContainerType.
const (
	PACKAGE ContainerContainerType = "PACKAGE"
)

// Defines values for DimensionsUnit.
const (
	CM DimensionsUnit = "CM"
	IN DimensionsUnit = "IN"
)

// Defines values for LabelSpecificationLabelFormat.
const (
	PNG LabelSpecificationLabelFormat = "PNG"
)

// Defines values for LabelSpecificationLabelStockSize.
const (
	N4x6 LabelSpecificationLabelStockSize = "4x6"
)

// Defines values for ServiceType.
const (
	AmazonShippingGround   ServiceType = "Amazon Shipping Ground"
	AmazonShippingPremium  ServiceType = "Amazon Shipping Premium"
	AmazonShippingStandard ServiceType = "Amazon Shipping Standard"
)

// Defines values for WeightUnit.
const (
	G  WeightUnit = "g"
	Kg WeightUnit = "kg"
	Lb WeightUnit = "lb"
	Oz WeightUnit = "oz"
)

// AcceptedRate The specific rate purchased for the shipment, or null if unpurchased.
type AcceptedRate struct {
	// BilledWeight The weight.
	BilledWeight *Weight `json:"billedWeight,omitempty"`

	// Promise The promised delivery time and pickup time.
	Promise *ShippingPromiseSet `json:"promise,omitempty"`

	// ServiceType The type of shipping service that will be used for the service offering.
	ServiceType *ServiceType `json:"serviceType,omitempty"`

	// TotalCharge The total value of all items in the container.
	TotalCharge *Currency `json:"totalCharge,omitempty"`
}

// Account The account related data.
type Account struct {
	// AccountId This is the Amazon Shipping account id generated during the Amazon Shipping onboarding process.
	AccountId AccountId `json:"accountId"`
}

// AccountId This is the Amazon Shipping account id generated during the Amazon Shipping onboarding process.
type AccountId = string

// Address The address.
type Address struct {
	// AddressLine1 First line of that address.
	AddressLine1 string `json:"addressLine1"`

	// AddressLine2 Additional address information, if required.
	AddressLine2 *string `json:"addressLine2,omitempty"`

	// AddressLine3 Additional address information, if required.
	AddressLine3 *string `json:"addressLine3,omitempty"`

	// City The city where the person, business or institution is located.
	City City `json:"city"`

	// CopyEmails The email cc addresses of the contact associated with the address.
	CopyEmails *[]string `json:"copyEmails,omitempty"`

	// CountryCode The two digit country code. In ISO 3166-1 alpha-2 format.
	CountryCode CountryCode `json:"countryCode"`

	// Email The email address of the contact associated with the address.
	Email *string `json:"email,omitempty"`

	// Name The name of the person, business or institution at that address.
	Name string `json:"name"`

	// PhoneNumber The phone number of the person, business or institution located at that address.
	PhoneNumber *string `json:"phoneNumber,omitempty"`

	// PostalCode The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
	PostalCode PostalCode `json:"postalCode"`

	// StateOrRegion The state or region where the person, business or institution is located.
	StateOrRegion StateOrRegion `json:"stateOrRegion"`
}

// CancelShipmentResponse The response schema for the cancelShipment operation.
type CancelShipmentResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// City The city where the person, business or institution is located.
type City = string

// ClientReferenceId Client reference id.
type ClientReferenceId = string

// Container Container in the shipment.
type Container struct {
	// ContainerReferenceId An identifier for the container. This must be unique within all the containers in the same shipment.
	ContainerReferenceId ContainerReferenceId `json:"containerReferenceId"`

	// ContainerType The type of physical container being used. (always 'PACKAGE')
	ContainerType *ContainerContainerType `json:"containerType,omitempty"`

	// Dimensions A set of measurements for a three-dimensional object.
	Dimensions Dimensions `json:"dimensions"`

	// Items A list of the items in the container.
	Items []ContainerItem `json:"items"`

	// Value The total value of all items in the container.
	Value Currency `json:"value"`

	// Weight The weight.
	Weight Weight `json:"weight"`
}

// ContainerContainerType The type of physical container being used. (always 'PACKAGE')
type ContainerContainerType string

// ContainerItem Item in the container.
type ContainerItem struct {
	// Quantity The quantity of the items of this type in the container.
	Quantity float32 `json:"quantity"`

	// Title A descriptive title of the item.
	Title string `json:"title"`

	// UnitPrice The total value of all items in the container.
	UnitPrice Currency `json:"unitPrice"`

	// UnitWeight The weight.
	UnitWeight Weight `json:"unitWeight"`
}

// ContainerList A list of container.
type ContainerList = []Container

// ContainerReferenceId An identifier for the container. This must be unique within all the containers in the same shipment.
type ContainerReferenceId = string

// ContainerSpecification Container specification for checking the service rate.
type ContainerSpecification struct {
	// Dimensions A set of measurements for a three-dimensional object.
	Dimensions Dimensions `json:"dimensions"`

	// Weight The weight.
	Weight Weight `json:"weight"`
}

// ContainerSpecificationList A list of container specifications.
type ContainerSpecificationList = []ContainerSpecification

// CountryCode The two digit country code. In ISO 3166-1 alpha-2 format.
type CountryCode = string

// CreateShipmentRequest The request schema for the createShipment operation.
type CreateShipmentRequest struct {
	// ClientReferenceId Client reference id.
	ClientReferenceId ClientReferenceId `json:"clientReferenceId"`

	// Containers A list of container.
	Containers ContainerList `json:"containers"`

	// ShipFrom The address.
	ShipFrom Address `json:"shipFrom"`

	// ShipTo The address.
	ShipTo Address `json:"shipTo"`
}

// CreateShipmentResponse The response schema for the createShipment operation.
type CreateShipmentResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The payload schema for the createShipment operation.
	Payload *CreateShipmentResult `json:"payload,omitempty"`
}

// CreateShipmentResult The payload schema for the createShipment operation.
type CreateShipmentResult struct {
	// EligibleRates A list of all the available rates that can be used to send the shipment.
	EligibleRates RateList `json:"eligibleRates"`

	// ShipmentId The unique shipment identifier.
	ShipmentId ShipmentId `json:"shipmentId"`
}

// Currency The total value of all items in the container.
type Currency struct {
	// Unit A 3-character currency code.
	Unit string `json:"unit"`

	// Value The amount of currency.
	Value float32 `json:"value"`
}

// Dimensions A set of measurements for a three-dimensional object.
type Dimensions struct {
	// Height The height of the container.
	Height float32 `json:"height"`

	// Length The length of the container.
	Length float32 `json:"length"`

	// Unit The unit of these measurements.
	Unit DimensionsUnit `json:"unit"`

	// Width The width of the container.
	Width float32 `json:"width"`
}

// DimensionsUnit The unit of these measurements.
type DimensionsUnit string

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occured.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition in a human-readable form.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList = []Error

// Event An event of a shipment
type Event struct {
	// EventCode The event code of a shipment, such as Departed, Received, and ReadyForReceive.
	EventCode EventCode `json:"eventCode"`

	// EventTime The date and time of an event for a shipment.
	EventTime time.Time `json:"eventTime"`

	// Location The location where the person, business or institution is located.
	Location *Location `json:"location,omitempty"`
}

// EventCode The event code of a shipment, such as Departed, Received, and ReadyForReceive.
type EventCode = string

// EventList A list of events of a shipment.
type EventList = []Event

// GetAccountResponse The response schema for the getAccount operation.
type GetAccountResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The account related data.
	Payload *Account `json:"payload,omitempty"`
}

// GetRatesRequest The payload schema for the getRates operation.
type GetRatesRequest struct {
	// ContainerSpecifications A list of container specifications.
	ContainerSpecifications ContainerSpecificationList `json:"containerSpecifications"`

	// ServiceTypes A list of service types that can be used to send the shipment.
	ServiceTypes ServiceTypeList `json:"serviceTypes"`

	// ShipDate The start date and time. This defaults to the current date and time.
	ShipDate *time.Time `json:"shipDate,omitempty"`

	// ShipFrom The address.
	ShipFrom Address `json:"shipFrom"`

	// ShipTo The address.
	ShipTo Address `json:"shipTo"`
}

// GetRatesResponse The response schema for the getRates operation.
type GetRatesResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The payload schema for the getRates operation.
	Payload *GetRatesResult `json:"payload,omitempty"`
}

// GetRatesResult The payload schema for the getRates operation.
type GetRatesResult struct {
	// ServiceRates A list of service rates.
	ServiceRates ServiceRateList `json:"serviceRates"`
}

// GetShipmentResponse The response schema for the getShipment operation.
type GetShipmentResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The shipment related data.
	Payload *Shipment `json:"payload,omitempty"`
}

// GetTrackingInformationResponse The response schema for the getTrackingInformation operation.
type GetTrackingInformationResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The payload schema for the getTrackingInformation operation.
	Payload *TrackingInformation `json:"payload,omitempty"`
}

// Label The label details of the container.
type Label struct {
	// LabelSpecification The label specification info.
	LabelSpecification *LabelSpecification `json:"labelSpecification,omitempty"`

	// LabelStream Contains binary image data encoded as a base-64 string.
	LabelStream *LabelStream `json:"labelStream,omitempty"`
}

// LabelResult Label details including label stream, format, size.
type LabelResult struct {
	// ContainerReferenceId An identifier for the container. This must be unique within all the containers in the same shipment.
	ContainerReferenceId *ContainerReferenceId `json:"containerReferenceId,omitempty"`

	// Label The label details of the container.
	Label *Label `json:"label,omitempty"`

	// TrackingId The tracking identifier assigned to the container.
	TrackingId *string `json:"trackingId,omitempty"`
}

// LabelResultList A list of label results
type LabelResultList = []LabelResult

// LabelSpecification The label specification info.
type LabelSpecification struct {
	// LabelFormat The format of the label. Enum of PNG only for now.
	LabelFormat LabelSpecificationLabelFormat `json:"labelFormat"`

	// LabelStockSize The label stock size specification in length and height. Enum of 4x6 only for now.
	LabelStockSize LabelSpecificationLabelStockSize `json:"labelStockSize"`
}

// LabelSpecificationLabelFormat The format of the label. Enum of PNG only for now.
type LabelSpecificationLabelFormat string

// LabelSpecificationLabelStockSize The label stock size specification in length and height. Enum of 4x6 only for now.
type LabelSpecificationLabelStockSize string

// LabelStream Contains binary image data encoded as a base-64 string.
type LabelStream = string

// Location The location where the person, business or institution is located.
type Location struct {
	// City The city where the person, business or institution is located.
	City *City `json:"city,omitempty"`

	// CountryCode The two digit country code. In ISO 3166-1 alpha-2 format.
	CountryCode *CountryCode `json:"countryCode,omitempty"`

	// PostalCode The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
	PostalCode *PostalCode `json:"postalCode,omitempty"`

	// StateOrRegion The state or region where the person, business or institution is located.
	StateOrRegion *StateOrRegion `json:"stateOrRegion,omitempty"`
}

// Party The account related with the shipment.
type Party struct {
	// AccountId This is the Amazon Shipping account id generated during the Amazon Shipping onboarding process.
	AccountId *AccountId `json:"accountId,omitempty"`
}

// PostalCode The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
type PostalCode = string

// PromisedDeliveryDate The promised delivery date and time of a shipment.
type PromisedDeliveryDate = time.Time

// PurchaseLabelsRequest The request schema for the purchaseLabels operation.
type PurchaseLabelsRequest struct {
	// LabelSpecification The label specification info.
	LabelSpecification LabelSpecification `json:"labelSpecification"`

	// RateId An identifier for the rating.
	RateId RateId `json:"rateId"`
}

// PurchaseLabelsResponse The response schema for the purchaseLabels operation.
type PurchaseLabelsResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The payload schema for the purchaseLabels operation.
	Payload *PurchaseLabelsResult `json:"payload,omitempty"`
}

// PurchaseLabelsResult The payload schema for the purchaseLabels operation.
type PurchaseLabelsResult struct {
	// AcceptedRate The specific rate purchased for the shipment, or null if unpurchased.
	AcceptedRate AcceptedRate `json:"acceptedRate"`

	// ClientReferenceId Client reference id.
	ClientReferenceId *ClientReferenceId `json:"clientReferenceId,omitempty"`

	// LabelResults A list of label results
	LabelResults LabelResultList `json:"labelResults"`

	// ShipmentId The unique shipment identifier.
	ShipmentId ShipmentId `json:"shipmentId"`
}

// PurchaseShipmentRequest The payload schema for the purchaseShipment operation.
type PurchaseShipmentRequest struct {
	// ClientReferenceId Client reference id.
	ClientReferenceId ClientReferenceId `json:"clientReferenceId"`

	// Containers A list of container.
	Containers ContainerList `json:"containers"`

	// LabelSpecification The label specification info.
	LabelSpecification LabelSpecification `json:"labelSpecification"`

	// ServiceType The type of shipping service that will be used for the service offering.
	ServiceType ServiceType `json:"serviceType"`

	// ShipDate The start date and time. This defaults to the current date and time.
	ShipDate *time.Time `json:"shipDate,omitempty"`

	// ShipFrom The address.
	ShipFrom Address `json:"shipFrom"`

	// ShipTo The address.
	ShipTo Address `json:"shipTo"`
}

// PurchaseShipmentResponse The response schema for the purchaseShipment operation.
type PurchaseShipmentResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The payload schema for the purchaseShipment operation.
	Payload *PurchaseShipmentResult `json:"payload,omitempty"`
}

// PurchaseShipmentResult The payload schema for the purchaseShipment operation.
type PurchaseShipmentResult struct {
	// LabelResults A list of label results
	LabelResults LabelResultList `json:"labelResults"`

	// ServiceRate The specific rate for a shipping service, or null if no service available.
	ServiceRate ServiceRate `json:"serviceRate"`

	// ShipmentId The unique shipment identifier.
	ShipmentId ShipmentId `json:"shipmentId"`
}

// Rate The available rate that can be used to send the shipment
type Rate struct {
	// BilledWeight The weight.
	BilledWeight *Weight `json:"billedWeight,omitempty"`

	// ExpirationTime The time after which the offering will expire.
	ExpirationTime *time.Time `json:"expirationTime,omitempty"`

	// Promise The promised delivery time and pickup time.
	Promise *ShippingPromiseSet `json:"promise,omitempty"`

	// RateId An identifier for the rate.
	RateId *string `json:"rateId,omitempty"`

	// ServiceType The type of shipping service that will be used for the service offering.
	ServiceType *ServiceType `json:"serviceType,omitempty"`

	// TotalCharge The total value of all items in the container.
	TotalCharge *Currency `json:"totalCharge,omitempty"`
}

// RateId An identifier for the rating.
type RateId = string

// RateList A list of all the available rates that can be used to send the shipment.
type RateList = []Rate

// RetrieveShippingLabelRequest The request schema for the retrieveShippingLabel operation.
type RetrieveShippingLabelRequest struct {
	// LabelSpecification The label specification info.
	LabelSpecification LabelSpecification `json:"labelSpecification"`
}

// RetrieveShippingLabelResponse The response schema for the retrieveShippingLabel operation.
type RetrieveShippingLabelResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The payload schema for the retrieveShippingLabel operation.
	Payload *RetrieveShippingLabelResult `json:"payload,omitempty"`
}

// RetrieveShippingLabelResult The payload schema for the retrieveShippingLabel operation.
type RetrieveShippingLabelResult struct {
	// LabelSpecification The label specification info.
	LabelSpecification LabelSpecification `json:"labelSpecification"`

	// LabelStream Contains binary image data encoded as a base-64 string.
	LabelStream LabelStream `json:"labelStream"`
}

// ServiceRate The specific rate for a shipping service, or null if no service available.
type ServiceRate struct {
	// BillableWeight The weight.
	BillableWeight Weight `json:"billableWeight"`

	// Promise The promised delivery time and pickup time.
	Promise ShippingPromiseSet `json:"promise"`

	// ServiceType The type of shipping service that will be used for the service offering.
	ServiceType ServiceType `json:"serviceType"`

	// TotalCharge The total value of all items in the container.
	TotalCharge Currency `json:"totalCharge"`
}

// ServiceRateList A list of service rates.
type ServiceRateList = []ServiceRate

// ServiceType The type of shipping service that will be used for the service offering.
type ServiceType string

// ServiceTypeList A list of service types that can be used to send the shipment.
type ServiceTypeList = []ServiceType

// Shipment The shipment related data.
type Shipment struct {
	// AcceptedRate The specific rate purchased for the shipment, or null if unpurchased.
	AcceptedRate *AcceptedRate `json:"acceptedRate,omitempty"`

	// ClientReferenceId Client reference id.
	ClientReferenceId ClientReferenceId `json:"clientReferenceId"`

	// Containers A list of container.
	Containers ContainerList `json:"containers"`

	// ShipFrom The address.
	ShipFrom Address `json:"shipFrom"`

	// ShipTo The address.
	ShipTo Address `json:"shipTo"`

	// ShipmentId The unique shipment identifier.
	ShipmentId ShipmentId `json:"shipmentId"`

	// Shipper The account related with the shipment.
	Shipper *Party `json:"shipper,omitempty"`
}

// ShipmentId The unique shipment identifier.
type ShipmentId = string

// ShippingPromiseSet The promised delivery time and pickup time.
type ShippingPromiseSet struct {
	// DeliveryWindow The time range.
	DeliveryWindow *TimeRange `json:"deliveryWindow,omitempty"`

	// ReceiveWindow The time range.
	ReceiveWindow *TimeRange `json:"receiveWindow,omitempty"`
}

// StateOrRegion The state or region where the person, business or institution is located.
type StateOrRegion = string

// TimeRange The time range.
type TimeRange struct {
	// End The end date and time. This must come after the value of start. This defaults to the next business day from the start.
	End *time.Time `json:"end,omitempty"`

	// Start The start date and time. This defaults to the current date and time.
	Start *time.Time `json:"start,omitempty"`
}

// TrackingId The tracking id generated to each shipment. It contains a series of letters or digits or both.
type TrackingId = string

// TrackingInformation The payload schema for the getTrackingInformation operation.
type TrackingInformation struct {
	// EventHistory A list of events of a shipment.
	EventHistory EventList `json:"eventHistory"`

	// PromisedDeliveryDate The promised delivery date and time of a shipment.
	PromisedDeliveryDate PromisedDeliveryDate `json:"promisedDeliveryDate"`

	// Summary The tracking summary.
	Summary TrackingSummary `json:"summary"`

	// TrackingId The tracking id generated to each shipment. It contains a series of letters or digits or both.
	TrackingId TrackingId `json:"trackingId"`
}

// TrackingSummary The tracking summary.
type TrackingSummary struct {
	// Status The derived status based on the events in the eventHistory.
	Status *string `json:"status,omitempty"`
}

// Weight The weight.
type Weight struct {
	// Unit The unit of measurement.
	Unit WeightUnit `json:"unit"`

	// Value The measurement value.
	Value float32 `json:"value"`
}

// WeightUnit The unit of measurement.
type WeightUnit string

// PurchaseShipmentJSONRequestBody defines body for PurchaseShipment for application/json ContentType.
type PurchaseShipmentJSONRequestBody = PurchaseShipmentRequest

// GetRatesJSONRequestBody defines body for GetRates for application/json ContentType.
type GetRatesJSONRequestBody = GetRatesRequest

// CreateShipmentJSONRequestBody defines body for CreateShipment for application/json ContentType.
type CreateShipmentJSONRequestBody = CreateShipmentRequest

// RetrieveShippingLabelJSONRequestBody defines body for RetrieveShippingLabel for application/json ContentType.
type RetrieveShippingLabelJSONRequestBody = RetrieveShippingLabelRequest

// PurchaseLabelsJSONRequestBody defines body for PurchaseLabels for application/json ContentType.
type PurchaseLabelsJSONRequestBody = PurchaseLabelsRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccount request
	GetAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PurchaseShipmentWithBody request with any body
	PurchaseShipmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PurchaseShipment(ctx context.Context, body PurchaseShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRatesWithBody request with any body
	GetRatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetRates(ctx context.Context, body GetRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShipmentWithBody request with any body
	CreateShipmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateShipment(ctx context.Context, body CreateShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShipment request
	GetShipment(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelShipment request
	CancelShipment(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveShippingLabelWithBody request with any body
	RetrieveShippingLabelWithBody(ctx context.Context, shipmentId string, trackingId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RetrieveShippingLabel(ctx context.Context, shipmentId string, trackingId string, body RetrieveShippingLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PurchaseLabelsWithBody request with any body
	PurchaseLabelsWithBody(ctx context.Context, shipmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PurchaseLabels(ctx context.Context, shipmentId string, body PurchaseLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrackingInformation request
	GetTrackingInformation(ctx context.Context, trackingId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseShipmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseShipmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseShipment(ctx context.Context, body PurchaseShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseShipmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRatesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRates(ctx context.Context, body GetRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRatesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShipmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShipmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShipment(ctx context.Context, body CreateShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShipmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShipment(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShipmentRequest(c.Server, shipmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelShipment(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelShipmentRequest(c.Server, shipmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveShippingLabelWithBody(ctx context.Context, shipmentId string, trackingId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveShippingLabelRequestWithBody(c.Server, shipmentId, trackingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveShippingLabel(ctx context.Context, shipmentId string, trackingId string, body RetrieveShippingLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveShippingLabelRequest(c.Server, shipmentId, trackingId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseLabelsWithBody(ctx context.Context, shipmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseLabelsRequestWithBody(c.Server, shipmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseLabels(ctx context.Context, shipmentId string, body PurchaseLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseLabelsRequest(c.Server, shipmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrackingInformation(ctx context.Context, trackingId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrackingInformationRequest(c.Server, trackingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAccountRequest generates requests for GetAccount
func NewGetAccountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v1/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPurchaseShipmentRequest calls the generic PurchaseShipment builder with application/json body
func NewPurchaseShipmentRequest(server string, body PurchaseShipmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPurchaseShipmentRequestWithBody(server, "application/json", bodyReader)
}

// NewPurchaseShipmentRequestWithBody generates requests for PurchaseShipment with any type of body
func NewPurchaseShipmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v1/purchaseShipment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRatesRequest calls the generic GetRates builder with application/json body
func NewGetRatesRequest(server string, body GetRatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRatesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetRatesRequestWithBody generates requests for GetRates with any type of body
func NewGetRatesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v1/rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateShipmentRequest calls the generic CreateShipment builder with application/json body
func NewCreateShipmentRequest(server string, body CreateShipmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateShipmentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateShipmentRequestWithBody generates requests for CreateShipment with any type of body
func NewCreateShipmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v1/shipments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShipmentRequest generates requests for GetShipment
func NewGetShipmentRequest(server string, shipmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v1/shipments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelShipmentRequest generates requests for CancelShipment
func NewCancelShipmentRequest(server string, shipmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v1/shipments/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveShippingLabelRequest calls the generic RetrieveShippingLabel builder with application/json body
func NewRetrieveShippingLabelRequest(server string, shipmentId string, trackingId string, body RetrieveShippingLabelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRetrieveShippingLabelRequestWithBody(server, shipmentId, trackingId, "application/json", bodyReader)
}

// NewRetrieveShippingLabelRequestWithBody generates requests for RetrieveShippingLabel with any type of body
func NewRetrieveShippingLabelRequestWithBody(server string, shipmentId string, trackingId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "trackingId", runtime.ParamLocationPath, trackingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v1/shipments/%s/containers/%s/label", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPurchaseLabelsRequest calls the generic PurchaseLabels builder with application/json body
func NewPurchaseLabelsRequest(server string, shipmentId string, body PurchaseLabelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPurchaseLabelsRequestWithBody(server, shipmentId, "application/json", bodyReader)
}

// NewPurchaseLabelsRequestWithBody generates requests for PurchaseLabels with any type of body
func NewPurchaseLabelsRequestWithBody(server string, shipmentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v1/shipments/%s/purchaseLabels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTrackingInformationRequest generates requests for GetTrackingInformation
func NewGetTrackingInformationRequest(server string, trackingId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trackingId", runtime.ParamLocationPath, trackingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v1/tracking/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccountWithResponse request
	GetAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountResp, error)

	// PurchaseShipmentWithBodyWithResponse request with any body
	PurchaseShipmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseShipmentResp, error)

	PurchaseShipmentWithResponse(ctx context.Context, body PurchaseShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseShipmentResp, error)

	// GetRatesWithBodyWithResponse request with any body
	GetRatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRatesResp, error)

	GetRatesWithResponse(ctx context.Context, body GetRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRatesResp, error)

	// CreateShipmentWithBodyWithResponse request with any body
	CreateShipmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShipmentResp, error)

	CreateShipmentWithResponse(ctx context.Context, body CreateShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateShipmentResp, error)

	// GetShipmentWithResponse request
	GetShipmentWithResponse(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*GetShipmentResp, error)

	// CancelShipmentWithResponse request
	CancelShipmentWithResponse(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*CancelShipmentResp, error)

	// RetrieveShippingLabelWithBodyWithResponse request with any body
	RetrieveShippingLabelWithBodyWithResponse(ctx context.Context, shipmentId string, trackingId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetrieveShippingLabelResp, error)

	RetrieveShippingLabelWithResponse(ctx context.Context, shipmentId string, trackingId string, body RetrieveShippingLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*RetrieveShippingLabelResp, error)

	// PurchaseLabelsWithBodyWithResponse request with any body
	PurchaseLabelsWithBodyWithResponse(ctx context.Context, shipmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseLabelsResp, error)

	PurchaseLabelsWithResponse(ctx context.Context, shipmentId string, body PurchaseLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseLabelsResp, error)

	// GetTrackingInformationWithResponse request
	GetTrackingInformationWithResponse(ctx context.Context, trackingId string, reqEditors ...RequestEditorFn) (*GetTrackingInformationResp, error)
}

type GetAccountResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAccountResponse
	JSON400      *GetAccountResponse
	JSON401      *GetAccountResponse
	JSON403      *GetAccountResponse
	JSON404      *GetAccountResponse
	JSON429      *GetAccountResponse
	JSON500      *GetAccountResponse
	JSON503      *GetAccountResponse
}

// Status returns HTTPResponse.Status
func (r GetAccountResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PurchaseShipmentResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PurchaseShipmentResponse
	JSON400      *PurchaseShipmentResponse
	JSON401      *PurchaseShipmentResponse
	JSON403      *PurchaseShipmentResponse
	JSON404      *PurchaseShipmentResponse
	JSON429      *PurchaseShipmentResponse
	JSON500      *PurchaseShipmentResponse
	JSON503      *PurchaseShipmentResponse
}

// Status returns HTTPResponse.Status
func (r PurchaseShipmentResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PurchaseShipmentResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRatesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRatesResponse
	JSON400      *GetRatesResponse
	JSON401      *GetRatesResponse
	JSON403      *GetRatesResponse
	JSON404      *GetRatesResponse
	JSON429      *GetRatesResponse
	JSON500      *GetRatesResponse
	JSON503      *GetRatesResponse
}

// Status returns HTTPResponse.Status
func (r GetRatesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRatesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShipmentResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateShipmentResponse
	JSON400      *CreateShipmentResponse
	JSON401      *CreateShipmentResponse
	JSON403      *CreateShipmentResponse
	JSON404      *CreateShipmentResponse
	JSON429      *CreateShipmentResponse
	JSON500      *CreateShipmentResponse
	JSON503      *CreateShipmentResponse
}

// Status returns HTTPResponse.Status
func (r CreateShipmentResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShipmentResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShipmentResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetShipmentResponse
	JSON400      *GetShipmentResponse
	JSON401      *GetShipmentResponse
	JSON403      *GetShipmentResponse
	JSON404      *GetShipmentResponse
	JSON429      *GetShipmentResponse
	JSON500      *GetShipmentResponse
	JSON503      *GetShipmentResponse
}

// Status returns HTTPResponse.Status
func (r GetShipmentResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipmentResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelShipmentResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelShipmentResponse
	JSON400      *CancelShipmentResponse
	JSON401      *CancelShipmentResponse
	JSON403      *CancelShipmentResponse
	JSON404      *CancelShipmentResponse
	JSON429      *CancelShipmentResponse
	JSON500      *CancelShipmentResponse
	JSON503      *CancelShipmentResponse
}

// Status returns HTTPResponse.Status
func (r CancelShipmentResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelShipmentResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveShippingLabelResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RetrieveShippingLabelResponse
	JSON400      *RetrieveShippingLabelResponse
	JSON401      *RetrieveShippingLabelResponse
	JSON403      *RetrieveShippingLabelResponse
	JSON404      *RetrieveShippingLabelResponse
	JSON429      *RetrieveShippingLabelResponse
	JSON500      *RetrieveShippingLabelResponse
	JSON503      *RetrieveShippingLabelResponse
}

// Status returns HTTPResponse.Status
func (r RetrieveShippingLabelResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveShippingLabelResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PurchaseLabelsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PurchaseLabelsResponse
	JSON400      *PurchaseLabelsResponse
	JSON401      *PurchaseLabelsResponse
	JSON403      *PurchaseLabelsResponse
	JSON404      *PurchaseLabelsResponse
	JSON429      *PurchaseLabelsResponse
	JSON500      *PurchaseLabelsResponse
	JSON503      *PurchaseLabelsResponse
}

// Status returns HTTPResponse.Status
func (r PurchaseLabelsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PurchaseLabelsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrackingInformationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTrackingInformationResponse
	JSON400      *GetTrackingInformationResponse
	JSON401      *GetTrackingInformationResponse
	JSON403      *GetTrackingInformationResponse
	JSON404      *GetTrackingInformationResponse
	JSON429      *GetTrackingInformationResponse
	JSON500      *GetTrackingInformationResponse
	JSON503      *GetTrackingInformationResponse
}

// Status returns HTTPResponse.Status
func (r GetTrackingInformationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrackingInformationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccountWithResponse request returning *GetAccountResp
func (c *ClientWithResponses) GetAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountResp, error) {
	rsp, err := c.GetAccount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountResp(rsp)
}

// PurchaseShipmentWithBodyWithResponse request with arbitrary body returning *PurchaseShipmentResp
func (c *ClientWithResponses) PurchaseShipmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseShipmentResp, error) {
	rsp, err := c.PurchaseShipmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseShipmentResp(rsp)
}

func (c *ClientWithResponses) PurchaseShipmentWithResponse(ctx context.Context, body PurchaseShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseShipmentResp, error) {
	rsp, err := c.PurchaseShipment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseShipmentResp(rsp)
}

// GetRatesWithBodyWithResponse request with arbitrary body returning *GetRatesResp
func (c *ClientWithResponses) GetRatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRatesResp, error) {
	rsp, err := c.GetRatesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRatesResp(rsp)
}

func (c *ClientWithResponses) GetRatesWithResponse(ctx context.Context, body GetRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRatesResp, error) {
	rsp, err := c.GetRates(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRatesResp(rsp)
}

// CreateShipmentWithBodyWithResponse request with arbitrary body returning *CreateShipmentResp
func (c *ClientWithResponses) CreateShipmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShipmentResp, error) {
	rsp, err := c.CreateShipmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipmentResp(rsp)
}

func (c *ClientWithResponses) CreateShipmentWithResponse(ctx context.Context, body CreateShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateShipmentResp, error) {
	rsp, err := c.CreateShipment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipmentResp(rsp)
}

// GetShipmentWithResponse request returning *GetShipmentResp
func (c *ClientWithResponses) GetShipmentWithResponse(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*GetShipmentResp, error) {
	rsp, err := c.GetShipment(ctx, shipmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShipmentResp(rsp)
}

// CancelShipmentWithResponse request returning *CancelShipmentResp
func (c *ClientWithResponses) CancelShipmentWithResponse(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*CancelShipmentResp, error) {
	rsp, err := c.CancelShipment(ctx, shipmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelShipmentResp(rsp)
}

// RetrieveShippingLabelWithBodyWithResponse request with arbitrary body returning *RetrieveShippingLabelResp
func (c *ClientWithResponses) RetrieveShippingLabelWithBodyWithResponse(ctx context.Context, shipmentId string, trackingId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetrieveShippingLabelResp, error) {
	rsp, err := c.RetrieveShippingLabelWithBody(ctx, shipmentId, trackingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveShippingLabelResp(rsp)
}

func (c *ClientWithResponses) RetrieveShippingLabelWithResponse(ctx context.Context, shipmentId string, trackingId string, body RetrieveShippingLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*RetrieveShippingLabelResp, error) {
	rsp, err := c.RetrieveShippingLabel(ctx, shipmentId, trackingId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveShippingLabelResp(rsp)
}

// PurchaseLabelsWithBodyWithResponse request with arbitrary body returning *PurchaseLabelsResp
func (c *ClientWithResponses) PurchaseLabelsWithBodyWithResponse(ctx context.Context, shipmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseLabelsResp, error) {
	rsp, err := c.PurchaseLabelsWithBody(ctx, shipmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseLabelsResp(rsp)
}

func (c *ClientWithResponses) PurchaseLabelsWithResponse(ctx context.Context, shipmentId string, body PurchaseLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseLabelsResp, error) {
	rsp, err := c.PurchaseLabels(ctx, shipmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseLabelsResp(rsp)
}

// GetTrackingInformationWithResponse request returning *GetTrackingInformationResp
func (c *ClientWithResponses) GetTrackingInformationWithResponse(ctx context.Context, trackingId string, reqEditors ...RequestEditorFn) (*GetTrackingInformationResp, error) {
	rsp, err := c.GetTrackingInformation(ctx, trackingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrackingInformationResp(rsp)
}

// ParseGetAccountResp parses an HTTP response from a GetAccountWithResponse call
func ParseGetAccountResp(rsp *http.Response) (*GetAccountResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePurchaseShipmentResp parses an HTTP response from a PurchaseShipmentWithResponse call
func ParsePurchaseShipmentResp(rsp *http.Response) (*PurchaseShipmentResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PurchaseShipmentResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PurchaseShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest PurchaseShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest PurchaseShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PurchaseShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest PurchaseShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest PurchaseShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest PurchaseShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest PurchaseShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetRatesResp parses an HTTP response from a GetRatesWithResponse call
func ParseGetRatesResp(rsp *http.Response) (*GetRatesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRatesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetRatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetRatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetRatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetRatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetRatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetRatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetRatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateShipmentResp parses an HTTP response from a CreateShipmentWithResponse call
func ParseCreateShipmentResp(rsp *http.Response) (*CreateShipmentResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShipmentResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetShipmentResp parses an HTTP response from a GetShipmentWithResponse call
func ParseGetShipmentResp(rsp *http.Response) (*GetShipmentResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShipmentResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCancelShipmentResp parses an HTTP response from a CancelShipmentWithResponse call
func ParseCancelShipmentResp(rsp *http.Response) (*CancelShipmentResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelShipmentResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRetrieveShippingLabelResp parses an HTTP response from a RetrieveShippingLabelWithResponse call
func ParseRetrieveShippingLabelResp(rsp *http.Response) (*RetrieveShippingLabelResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveShippingLabelResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrieveShippingLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RetrieveShippingLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RetrieveShippingLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest RetrieveShippingLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RetrieveShippingLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RetrieveShippingLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RetrieveShippingLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest RetrieveShippingLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePurchaseLabelsResp parses an HTTP response from a PurchaseLabelsWithResponse call
func ParsePurchaseLabelsResp(rsp *http.Response) (*PurchaseLabelsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PurchaseLabelsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PurchaseLabelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest PurchaseLabelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest PurchaseLabelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PurchaseLabelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest PurchaseLabelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest PurchaseLabelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest PurchaseLabelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest PurchaseLabelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetTrackingInformationResp parses an HTTP response from a GetTrackingInformationWithResponse call
func ParseGetTrackingInformationResp(rsp *http.Response) (*GetTrackingInformationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrackingInformationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTrackingInformationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetTrackingInformationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetTrackingInformationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetTrackingInformationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetTrackingInformationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetTrackingInformationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetTrackingInformationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetTrackingInformationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
