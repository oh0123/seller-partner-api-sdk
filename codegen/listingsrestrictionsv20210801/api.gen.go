// Package listingsrestrictionsv20210801 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package listingsrestrictionsv20210801

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for LinkVerb.
const (
	GET LinkVerb = "GET"
)

// Defines values for ReasonReasonCode.
const (
	APPROVALREQUIRED ReasonReasonCode = "APPROVAL_REQUIRED"
	ASINNOTFOUND     ReasonReasonCode = "ASIN_NOT_FOUND"
	NOTELIGIBLE      ReasonReasonCode = "NOT_ELIGIBLE"
)

// Defines values for RestrictionConditionType.
const (
	RestrictionConditionTypeClubClub               RestrictionConditionType = "club_club"
	RestrictionConditionTypeCollectibleAcceptable  RestrictionConditionType = "collectible_acceptable"
	RestrictionConditionTypeCollectibleGood        RestrictionConditionType = "collectible_good"
	RestrictionConditionTypeCollectibleLikeNew     RestrictionConditionType = "collectible_like_new"
	RestrictionConditionTypeCollectibleVeryGood    RestrictionConditionType = "collectible_very_good"
	RestrictionConditionTypeNewNew                 RestrictionConditionType = "new_new"
	RestrictionConditionTypeNewOem                 RestrictionConditionType = "new_oem"
	RestrictionConditionTypeNewOpenBox             RestrictionConditionType = "new_open_box"
	RestrictionConditionTypeRefurbishedRefurbished RestrictionConditionType = "refurbished_refurbished"
	RestrictionConditionTypeUsedAcceptable         RestrictionConditionType = "used_acceptable"
	RestrictionConditionTypeUsedGood               RestrictionConditionType = "used_good"
	RestrictionConditionTypeUsedLikeNew            RestrictionConditionType = "used_like_new"
	RestrictionConditionTypeUsedVeryGood           RestrictionConditionType = "used_very_good"
)

// Defines values for GetListingsRestrictionsParamsConditionType.
const (
	GetListingsRestrictionsParamsConditionTypeClubClub               GetListingsRestrictionsParamsConditionType = "club_club"
	GetListingsRestrictionsParamsConditionTypeCollectibleAcceptable  GetListingsRestrictionsParamsConditionType = "collectible_acceptable"
	GetListingsRestrictionsParamsConditionTypeCollectibleGood        GetListingsRestrictionsParamsConditionType = "collectible_good"
	GetListingsRestrictionsParamsConditionTypeCollectibleLikeNew     GetListingsRestrictionsParamsConditionType = "collectible_like_new"
	GetListingsRestrictionsParamsConditionTypeCollectibleVeryGood    GetListingsRestrictionsParamsConditionType = "collectible_very_good"
	GetListingsRestrictionsParamsConditionTypeNewNew                 GetListingsRestrictionsParamsConditionType = "new_new"
	GetListingsRestrictionsParamsConditionTypeNewOem                 GetListingsRestrictionsParamsConditionType = "new_oem"
	GetListingsRestrictionsParamsConditionTypeNewOpenBox             GetListingsRestrictionsParamsConditionType = "new_open_box"
	GetListingsRestrictionsParamsConditionTypeRefurbishedRefurbished GetListingsRestrictionsParamsConditionType = "refurbished_refurbished"
	GetListingsRestrictionsParamsConditionTypeUsedAcceptable         GetListingsRestrictionsParamsConditionType = "used_acceptable"
	GetListingsRestrictionsParamsConditionTypeUsedGood               GetListingsRestrictionsParamsConditionType = "used_good"
	GetListingsRestrictionsParamsConditionTypeUsedLikeNew            GetListingsRestrictionsParamsConditionType = "used_like_new"
	GetListingsRestrictionsParamsConditionTypeUsedVeryGood           GetListingsRestrictionsParamsConditionType = "used_very_good"
)

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList = []Error

// Link A link to resources related to a listing restriction.
type Link struct {
	// Resource The URI of the related resource.
	Resource string `json:"resource"`

	// Title The title of the related resource.
	Title *string `json:"title,omitempty"`

	// Type The media type of the related resource.
	Type *string `json:"type,omitempty"`

	// Verb The HTTP verb used to interact with the related resource.
	Verb LinkVerb `json:"verb"`
}

// LinkVerb The HTTP verb used to interact with the related resource.
type LinkVerb string

// Reason A reason for the restriction, including path forward links that may allow Selling Partners to remove the restriction, if available.
type Reason struct {
	// Links A list of path forward links that may allow Selling Partners to remove the restriction.
	Links *[]Link `json:"links,omitempty"`

	// Message A message describing the reason for the restriction.
	Message string `json:"message"`

	// ReasonCode A code indicating why the listing is restricted.
	ReasonCode *ReasonReasonCode `json:"reasonCode,omitempty"`
}

// ReasonReasonCode A code indicating why the listing is restricted.
type ReasonReasonCode string

// Restriction A listing restriction, optionally qualified by a condition, with a list of reasons for the restriction.
type Restriction struct {
	// ConditionType The condition that applies to the restriction.
	ConditionType *RestrictionConditionType `json:"conditionType,omitempty"`

	// MarketplaceId A marketplace identifier. Identifies the Amazon marketplace where the restriction is enforced.
	MarketplaceId string `json:"marketplaceId"`

	// Reasons A list of reasons for the restriction.
	Reasons *[]Reason `json:"reasons,omitempty"`
}

// RestrictionConditionType The condition that applies to the restriction.
type RestrictionConditionType string

// RestrictionList A list of restrictions for the specified Amazon catalog item.
type RestrictionList struct {
	Restrictions []Restriction `json:"restrictions"`
}

// GetListingsRestrictionsParams defines parameters for GetListingsRestrictions.
type GetListingsRestrictionsParams struct {
	// Asin The Amazon Standard Identification Number (ASIN) of the item.
	Asin string `form:"asin" json:"asin"`

	// ConditionType The condition used to filter restrictions.
	ConditionType *GetListingsRestrictionsParamsConditionType `form:"conditionType,omitempty" json:"conditionType,omitempty"`

	// SellerId A selling partner identifier, such as a merchant account.
	SellerId string `form:"sellerId" json:"sellerId"`

	// MarketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`

	// ReasonLocale A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: "en_US", "fr_CA", "fr_FR". Localized messages default to "en_US" when a localization is not available in the specified locale.
	ReasonLocale *string `form:"reasonLocale,omitempty" json:"reasonLocale,omitempty"`
}

// GetListingsRestrictionsParamsConditionType defines parameters for GetListingsRestrictions.
type GetListingsRestrictionsParamsConditionType string

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetListingsRestrictions request
	GetListingsRestrictions(ctx context.Context, params *GetListingsRestrictionsParams) (*http.Response, error)
}

func (c *Client) GetListingsRestrictions(ctx context.Context, params *GetListingsRestrictionsParams) (*http.Response, error) {
	req, err := NewGetListingsRestrictionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetListingsRestrictionsRequest generates requests for GetListingsRestrictions
func NewGetListingsRestrictionsRequest(server string, params *GetListingsRestrictionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/listings/2021-08-01/restrictions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asin", runtime.ParamLocationQuery, params.Asin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if params.ConditionType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "conditionType", runtime.ParamLocationQuery, *params.ConditionType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sellerId", runtime.ParamLocationQuery, params.SellerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if params.ReasonLocale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reasonLocale", runtime.ParamLocationQuery, *params.ReasonLocale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetListingsRestrictionsWithResponse request
	GetListingsRestrictionsWithResponse(ctx context.Context, params *GetListingsRestrictionsParams) (*GetListingsRestrictionsResp, error)
}

type GetListingsRestrictionsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RestrictionList
	JSON400      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r GetListingsRestrictionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListingsRestrictionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetListingsRestrictionsWithResponse request returning *GetListingsRestrictionsResp
func (c *ClientWithResponses) GetListingsRestrictionsWithResponse(ctx context.Context, params *GetListingsRestrictionsParams) (*GetListingsRestrictionsResp, error) {
	rsp, err := c.GetListingsRestrictions(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetListingsRestrictionsResp(rsp)
}

// ParseGetListingsRestrictionsResp parses an HTTP response from a GetListingsRestrictionsWithResponse call
func ParseGetListingsRestrictionsResp(rsp *http.Response) (*GetListingsRestrictionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListingsRestrictionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RestrictionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
