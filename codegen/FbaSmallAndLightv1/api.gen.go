// Package fbaSmallAndLightv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package fbaSmallAndLightv1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for FeeLineItemFeeType.
const (
	Commission                FeeLineItemFeeType = "Commission"
	FBAPerOrderFulfillmentFee FeeLineItemFeeType = "FBAPerOrderFulfillmentFee"
	FBAPerUnitFulfillmentFee  FeeLineItemFeeType = "FBAPerUnitFulfillmentFee"
	FBAWeightBasedFee         FeeLineItemFeeType = "FBAWeightBasedFee"
)

// Defines values for SmallAndLightEligibilityStatus.
const (
	ELIGIBLE    SmallAndLightEligibilityStatus = "ELIGIBLE"
	NOTELIGIBLE SmallAndLightEligibilityStatus = "NOT_ELIGIBLE"
)

// Defines values for SmallAndLightEnrollmentStatus.
const (
	ENROLLED    SmallAndLightEnrollmentStatus = "ENROLLED"
	NOTENROLLED SmallAndLightEnrollmentStatus = "NOT_ENROLLED"
)

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional information that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition in a human-readable form.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList struct {
	Errors *[]Error `json:"errors,omitempty"`
}

// FeeLineItem Fee details for a specific fee.
type FeeLineItem struct {
	FeeCharge MoneyType `json:"feeCharge"`

	// FeeType The type of fee charged to the seller.
	FeeType FeeLineItemFeeType `json:"feeType"`
}

// FeeLineItemFeeType The type of fee charged to the seller.
type FeeLineItemFeeType string

// FeePreview The fee estimate for a specific item.
type FeePreview struct {
	// Asin The Amazon Standard Identification Number (ASIN) value used to identify the item.
	Asin *string `json:"asin,omitempty"`

	// Errors One or more unexpected errors occurred during the getSmallAndLightFeePreview operation.
	Errors *[]Error `json:"errors,omitempty"`

	// FeeBreakdown A list of the Small and Light fees for the item.
	FeeBreakdown *[]FeeLineItem `json:"feeBreakdown,omitempty"`
	Price        *MoneyType     `json:"price,omitempty"`
	TotalFees    *MoneyType     `json:"totalFees,omitempty"`
}

// Item An item to be sold.
type Item struct {
	// Asin The Amazon Standard Identification Number (ASIN) value used to identify the item.
	Asin  string    `json:"asin"`
	Price MoneyType `json:"price"`
}

// MarketplaceId A marketplace identifier.
type MarketplaceId = string

// MoneyType defines model for MoneyType.
type MoneyType struct {
	// Amount The monetary value.
	Amount *float32 `json:"amount,omitempty"`

	// CurrencyCode The currency code in ISO 4217 format.
	CurrencyCode *string `json:"currencyCode,omitempty"`
}

// SellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
type SellerSKU = string

// SmallAndLightEligibility The Small and Light eligibility status of the item indicated by the specified seller SKU.
type SmallAndLightEligibility struct {
	// MarketplaceId A marketplace identifier.
	MarketplaceId MarketplaceId `json:"marketplaceId"`

	// SellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
	SellerSKU SellerSKU `json:"sellerSKU"`

	// Status The Small and Light eligibility status of the item.
	Status SmallAndLightEligibilityStatus `json:"status"`
}

// SmallAndLightEligibilityStatus The Small and Light eligibility status of the item.
type SmallAndLightEligibilityStatus string

// SmallAndLightEnrollment The Small and Light enrollment status of the item indicated by the specified seller SKU.
type SmallAndLightEnrollment struct {
	// MarketplaceId A marketplace identifier.
	MarketplaceId MarketplaceId `json:"marketplaceId"`

	// SellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
	SellerSKU SellerSKU `json:"sellerSKU"`

	// Status The Small and Light enrollment status of the item.
	Status SmallAndLightEnrollmentStatus `json:"status"`
}

// SmallAndLightEnrollmentStatus The Small and Light enrollment status of the item.
type SmallAndLightEnrollmentStatus string

// SmallAndLightFeePreviewRequest Request schema for submitting items for which to retrieve fee estimates.
type SmallAndLightFeePreviewRequest struct {
	// Items A list of items for which to retrieve fee estimates (limit: 25).
	Items []Item `json:"items"`

	// MarketplaceId A marketplace identifier.
	MarketplaceId MarketplaceId `json:"marketplaceId"`
}

// SmallAndLightFeePreviews defines model for SmallAndLightFeePreviews.
type SmallAndLightFeePreviews struct {
	// Data A list of fee estimates for the requested items. The order of the fee estimates will follow the same order as the items in the request, with duplicates removed.
	Data *[]FeePreview `json:"data,omitempty"`
}

// GetSmallAndLightEligibilityBySellerSKUParams defines parameters for GetSmallAndLightEligibilityBySellerSKU.
type GetSmallAndLightEligibilityBySellerSKUParams struct {
	// MarketplaceIds The marketplace for which the eligibility status is retrieved. NOTE: Accepts a single marketplace only.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// DeleteSmallAndLightEnrollmentBySellerSKUParams defines parameters for DeleteSmallAndLightEnrollmentBySellerSKU.
type DeleteSmallAndLightEnrollmentBySellerSKUParams struct {
	// MarketplaceIds The marketplace in which to remove the item from the Small and Light program. Note: Accepts a single marketplace only.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// GetSmallAndLightEnrollmentBySellerSKUParams defines parameters for GetSmallAndLightEnrollmentBySellerSKU.
type GetSmallAndLightEnrollmentBySellerSKUParams struct {
	// MarketplaceIds The marketplace for which the enrollment status is retrieved. Note: Accepts a single marketplace only.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// PutSmallAndLightEnrollmentBySellerSKUParams defines parameters for PutSmallAndLightEnrollmentBySellerSKU.
type PutSmallAndLightEnrollmentBySellerSKUParams struct {
	// MarketplaceIds The marketplace in which to enroll the item. Note: Accepts a single marketplace only.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// GetSmallAndLightFeePreviewJSONRequestBody defines body for GetSmallAndLightFeePreview for application/json ContentType.
type GetSmallAndLightFeePreviewJSONRequestBody = SmallAndLightFeePreviewRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSmallAndLightEligibilityBySellerSKU request
	GetSmallAndLightEligibilityBySellerSKU(ctx context.Context, sellerSKU string, params *GetSmallAndLightEligibilityBySellerSKUParams) (*http.Response, error)

	// DeleteSmallAndLightEnrollmentBySellerSKU request
	DeleteSmallAndLightEnrollmentBySellerSKU(ctx context.Context, sellerSKU string, params *DeleteSmallAndLightEnrollmentBySellerSKUParams) (*http.Response, error)

	// GetSmallAndLightEnrollmentBySellerSKU request
	GetSmallAndLightEnrollmentBySellerSKU(ctx context.Context, sellerSKU string, params *GetSmallAndLightEnrollmentBySellerSKUParams) (*http.Response, error)

	// PutSmallAndLightEnrollmentBySellerSKU request
	PutSmallAndLightEnrollmentBySellerSKU(ctx context.Context, sellerSKU string, params *PutSmallAndLightEnrollmentBySellerSKUParams) (*http.Response, error)

	// GetSmallAndLightFeePreviewWithBody request with any body
	GetSmallAndLightFeePreviewWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	GetSmallAndLightFeePreview(ctx context.Context, body GetSmallAndLightFeePreviewJSONRequestBody) (*http.Response, error)
}

func (c *Client) GetSmallAndLightEligibilityBySellerSKU(ctx context.Context, sellerSKU string, params *GetSmallAndLightEligibilityBySellerSKUParams) (*http.Response, error) {
	req, err := NewGetSmallAndLightEligibilityBySellerSKURequest(c.Server, sellerSKU, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSmallAndLightEnrollmentBySellerSKU(ctx context.Context, sellerSKU string, params *DeleteSmallAndLightEnrollmentBySellerSKUParams) (*http.Response, error) {
	req, err := NewDeleteSmallAndLightEnrollmentBySellerSKURequest(c.Server, sellerSKU, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetSmallAndLightEnrollmentBySellerSKU(ctx context.Context, sellerSKU string, params *GetSmallAndLightEnrollmentBySellerSKUParams) (*http.Response, error) {
	req, err := NewGetSmallAndLightEnrollmentBySellerSKURequest(c.Server, sellerSKU, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PutSmallAndLightEnrollmentBySellerSKU(ctx context.Context, sellerSKU string, params *PutSmallAndLightEnrollmentBySellerSKUParams) (*http.Response, error) {
	req, err := NewPutSmallAndLightEnrollmentBySellerSKURequest(c.Server, sellerSKU, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetSmallAndLightFeePreviewWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetSmallAndLightFeePreviewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetSmallAndLightFeePreview(ctx context.Context, body GetSmallAndLightFeePreviewJSONRequestBody) (*http.Response, error) {
	req, err := NewGetSmallAndLightFeePreviewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetSmallAndLightEligibilityBySellerSKURequest generates requests for GetSmallAndLightEligibilityBySellerSKU
func NewGetSmallAndLightEligibilityBySellerSKURequest(server string, sellerSKU string, params *GetSmallAndLightEligibilityBySellerSKUParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sellerSKU", runtime.ParamLocationPath, sellerSKU)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/smallAndLight/v1/eligibilities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSmallAndLightEnrollmentBySellerSKURequest generates requests for DeleteSmallAndLightEnrollmentBySellerSKU
func NewDeleteSmallAndLightEnrollmentBySellerSKURequest(server string, sellerSKU string, params *DeleteSmallAndLightEnrollmentBySellerSKUParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sellerSKU", runtime.ParamLocationPath, sellerSKU)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/smallAndLight/v1/enrollments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmallAndLightEnrollmentBySellerSKURequest generates requests for GetSmallAndLightEnrollmentBySellerSKU
func NewGetSmallAndLightEnrollmentBySellerSKURequest(server string, sellerSKU string, params *GetSmallAndLightEnrollmentBySellerSKUParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sellerSKU", runtime.ParamLocationPath, sellerSKU)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/smallAndLight/v1/enrollments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSmallAndLightEnrollmentBySellerSKURequest generates requests for PutSmallAndLightEnrollmentBySellerSKU
func NewPutSmallAndLightEnrollmentBySellerSKURequest(server string, sellerSKU string, params *PutSmallAndLightEnrollmentBySellerSKUParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sellerSKU", runtime.ParamLocationPath, sellerSKU)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/smallAndLight/v1/enrollments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmallAndLightFeePreviewRequest calls the generic GetSmallAndLightFeePreview builder with application/json body
func NewGetSmallAndLightFeePreviewRequest(server string, body GetSmallAndLightFeePreviewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSmallAndLightFeePreviewRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSmallAndLightFeePreviewRequestWithBody generates requests for GetSmallAndLightFeePreview with any type of body
func NewGetSmallAndLightFeePreviewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/smallAndLight/v1/feePreviews")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSmallAndLightEligibilityBySellerSKUWithResponse request
	GetSmallAndLightEligibilityBySellerSKUWithResponse(ctx context.Context, sellerSKU string, params *GetSmallAndLightEligibilityBySellerSKUParams) (*GetSmallAndLightEligibilityBySellerSKUResp, error)

	// DeleteSmallAndLightEnrollmentBySellerSKUWithResponse request
	DeleteSmallAndLightEnrollmentBySellerSKUWithResponse(ctx context.Context, sellerSKU string, params *DeleteSmallAndLightEnrollmentBySellerSKUParams) (*DeleteSmallAndLightEnrollmentBySellerSKUResp, error)

	// GetSmallAndLightEnrollmentBySellerSKUWithResponse request
	GetSmallAndLightEnrollmentBySellerSKUWithResponse(ctx context.Context, sellerSKU string, params *GetSmallAndLightEnrollmentBySellerSKUParams) (*GetSmallAndLightEnrollmentBySellerSKUResp, error)

	// PutSmallAndLightEnrollmentBySellerSKUWithResponse request
	PutSmallAndLightEnrollmentBySellerSKUWithResponse(ctx context.Context, sellerSKU string, params *PutSmallAndLightEnrollmentBySellerSKUParams) (*PutSmallAndLightEnrollmentBySellerSKUResp, error)

	// GetSmallAndLightFeePreviewWithBodyWithResponse request with any body
	GetSmallAndLightFeePreviewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GetSmallAndLightFeePreviewResp, error)

	GetSmallAndLightFeePreviewWithResponse(ctx context.Context, body GetSmallAndLightFeePreviewJSONRequestBody) (*GetSmallAndLightFeePreviewResp, error)
}

type GetSmallAndLightEligibilityBySellerSKUResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmallAndLightEligibility
	JSON400      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r GetSmallAndLightEligibilityBySellerSKUResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmallAndLightEligibilityBySellerSKUResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSmallAndLightEnrollmentBySellerSKUResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r DeleteSmallAndLightEnrollmentBySellerSKUResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSmallAndLightEnrollmentBySellerSKUResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmallAndLightEnrollmentBySellerSKUResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmallAndLightEnrollment
	JSON400      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r GetSmallAndLightEnrollmentBySellerSKUResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmallAndLightEnrollmentBySellerSKUResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSmallAndLightEnrollmentBySellerSKUResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmallAndLightEnrollment
	JSON400      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r PutSmallAndLightEnrollmentBySellerSKUResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSmallAndLightEnrollmentBySellerSKUResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmallAndLightFeePreviewResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmallAndLightFeePreviews
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r GetSmallAndLightFeePreviewResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmallAndLightFeePreviewResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSmallAndLightEligibilityBySellerSKUWithResponse request returning *GetSmallAndLightEligibilityBySellerSKUResp
func (c *ClientWithResponses) GetSmallAndLightEligibilityBySellerSKUWithResponse(ctx context.Context, sellerSKU string, params *GetSmallAndLightEligibilityBySellerSKUParams) (*GetSmallAndLightEligibilityBySellerSKUResp, error) {
	rsp, err := c.GetSmallAndLightEligibilityBySellerSKU(ctx, sellerSKU, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSmallAndLightEligibilityBySellerSKUResp(rsp)
}

// DeleteSmallAndLightEnrollmentBySellerSKUWithResponse request returning *DeleteSmallAndLightEnrollmentBySellerSKUResp
func (c *ClientWithResponses) DeleteSmallAndLightEnrollmentBySellerSKUWithResponse(ctx context.Context, sellerSKU string, params *DeleteSmallAndLightEnrollmentBySellerSKUParams) (*DeleteSmallAndLightEnrollmentBySellerSKUResp, error) {
	rsp, err := c.DeleteSmallAndLightEnrollmentBySellerSKU(ctx, sellerSKU, params)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSmallAndLightEnrollmentBySellerSKUResp(rsp)
}

// GetSmallAndLightEnrollmentBySellerSKUWithResponse request returning *GetSmallAndLightEnrollmentBySellerSKUResp
func (c *ClientWithResponses) GetSmallAndLightEnrollmentBySellerSKUWithResponse(ctx context.Context, sellerSKU string, params *GetSmallAndLightEnrollmentBySellerSKUParams) (*GetSmallAndLightEnrollmentBySellerSKUResp, error) {
	rsp, err := c.GetSmallAndLightEnrollmentBySellerSKU(ctx, sellerSKU, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSmallAndLightEnrollmentBySellerSKUResp(rsp)
}

// PutSmallAndLightEnrollmentBySellerSKUWithResponse request returning *PutSmallAndLightEnrollmentBySellerSKUResp
func (c *ClientWithResponses) PutSmallAndLightEnrollmentBySellerSKUWithResponse(ctx context.Context, sellerSKU string, params *PutSmallAndLightEnrollmentBySellerSKUParams) (*PutSmallAndLightEnrollmentBySellerSKUResp, error) {
	rsp, err := c.PutSmallAndLightEnrollmentBySellerSKU(ctx, sellerSKU, params)
	if err != nil {
		return nil, err
	}
	return ParsePutSmallAndLightEnrollmentBySellerSKUResp(rsp)
}

// GetSmallAndLightFeePreviewWithBodyWithResponse request with arbitrary body returning *GetSmallAndLightFeePreviewResp
func (c *ClientWithResponses) GetSmallAndLightFeePreviewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GetSmallAndLightFeePreviewResp, error) {
	rsp, err := c.GetSmallAndLightFeePreviewWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetSmallAndLightFeePreviewResp(rsp)
}

func (c *ClientWithResponses) GetSmallAndLightFeePreviewWithResponse(ctx context.Context, body GetSmallAndLightFeePreviewJSONRequestBody) (*GetSmallAndLightFeePreviewResp, error) {
	rsp, err := c.GetSmallAndLightFeePreview(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseGetSmallAndLightFeePreviewResp(rsp)
}

// ParseGetSmallAndLightEligibilityBySellerSKUResp parses an HTTP response from a GetSmallAndLightEligibilityBySellerSKUWithResponse call
func ParseGetSmallAndLightEligibilityBySellerSKUResp(rsp *http.Response) (*GetSmallAndLightEligibilityBySellerSKUResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmallAndLightEligibilityBySellerSKUResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmallAndLightEligibility
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteSmallAndLightEnrollmentBySellerSKUResp parses an HTTP response from a DeleteSmallAndLightEnrollmentBySellerSKUWithResponse call
func ParseDeleteSmallAndLightEnrollmentBySellerSKUResp(rsp *http.Response) (*DeleteSmallAndLightEnrollmentBySellerSKUResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSmallAndLightEnrollmentBySellerSKUResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetSmallAndLightEnrollmentBySellerSKUResp parses an HTTP response from a GetSmallAndLightEnrollmentBySellerSKUWithResponse call
func ParseGetSmallAndLightEnrollmentBySellerSKUResp(rsp *http.Response) (*GetSmallAndLightEnrollmentBySellerSKUResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmallAndLightEnrollmentBySellerSKUResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmallAndLightEnrollment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutSmallAndLightEnrollmentBySellerSKUResp parses an HTTP response from a PutSmallAndLightEnrollmentBySellerSKUWithResponse call
func ParsePutSmallAndLightEnrollmentBySellerSKUResp(rsp *http.Response) (*PutSmallAndLightEnrollmentBySellerSKUResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSmallAndLightEnrollmentBySellerSKUResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmallAndLightEnrollment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetSmallAndLightFeePreviewResp parses an HTTP response from a GetSmallAndLightFeePreviewWithResponse call
func ParseGetSmallAndLightFeePreviewResp(rsp *http.Response) (*GetSmallAndLightFeePreviewResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmallAndLightFeePreviewResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmallAndLightFeePreviews
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
