// Package messagingv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package messagingv1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
	"time"

	"github.com/bytedance/sonic"
	"github.com/oapi-codegen/runtime"
)

// Attachment Represents a file uploaded to a destination that was created by the [createUploadDestinationForResource](doc:uploads-api-reference#post-uploads2020-11-01uploaddestinationsresource) operation of the Selling Partner API for Uploads.
type Attachment struct {
	// FileName The name of the file, including the extension. This is the file name that will appear in the message. This does not need to match the file name of the file that you uploaded.
	FileName string `json:"fileName"`

	// UploadDestinationId The identifier of the upload destination. Get this value by calling the [createUploadDestinationForResource](doc:uploads-api-reference#post-uploads2020-11-01uploaddestinationsresource) operation of the Uploads API.
	UploadDestinationId string `json:"uploadDestinationId"`
}

// CreateAmazonMotorsRequest The request schema for the createAmazonMotors operation.
type CreateAmazonMotorsRequest struct {
	// Attachments Attachments to include in the message to the buyer. If any text is included in the attachment, the text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation.
	Attachments *[]Attachment `json:"attachments,omitempty"`
}

// CreateAmazonMotorsResponse The response schema for the createAmazonMotors operation.
type CreateAmazonMotorsResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// CreateConfirmCustomizationDetailsRequest The request schema for the confirmCustomizationDetails operation.
type CreateConfirmCustomizationDetailsRequest struct {
	// Attachments Attachments to include in the message to the buyer.
	Attachments *[]Attachment `json:"attachments,omitempty"`

	// Text The text to be sent to the buyer. Only links related to customization details are allowed. Do not include HTML or email addresses. The text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation.
	Text *string `json:"text,omitempty"`
}

// CreateConfirmCustomizationDetailsResponse The response schema for the confirmCustomizationDetails operation.
type CreateConfirmCustomizationDetailsResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// CreateConfirmDeliveryDetailsRequest The request schema for the createConfirmDeliveryDetails operation.
type CreateConfirmDeliveryDetailsRequest struct {
	// Text The text to be sent to the buyer. Only links related to order delivery are allowed. Do not include HTML or email addresses. The text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation.
	Text *string `json:"text,omitempty"`
}

// CreateConfirmDeliveryDetailsResponse The response schema for the createConfirmDeliveryDetails operation.
type CreateConfirmDeliveryDetailsResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// CreateConfirmOrderDetailsRequest The request schema for the createConfirmOrderDetails operation.
type CreateConfirmOrderDetailsRequest struct {
	// Text The text to be sent to the buyer. Only links related to order completion are allowed. Do not include HTML or email addresses. The text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation.
	Text *string `json:"text,omitempty"`
}

// CreateConfirmOrderDetailsResponse The response schema for the createConfirmOrderDetails operation.
type CreateConfirmOrderDetailsResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// CreateConfirmServiceDetailsRequest The request schema for the createConfirmServiceDetails operation.
type CreateConfirmServiceDetailsRequest struct {
	// Text The text to be sent to the buyer. Only links related to Home Service calls are allowed. Do not include HTML or email addresses. The text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation.
	Text *string `json:"text,omitempty"`
}

// CreateConfirmServiceDetailsResponse The response schema for the createConfirmServiceDetails operation.
type CreateConfirmServiceDetailsResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// CreateDigitalAccessKeyRequest The request schema for the createDigitalAccessKey operation.
type CreateDigitalAccessKeyRequest struct {
	// Attachments Attachments to include in the message to the buyer.
	Attachments *[]Attachment `json:"attachments,omitempty"`

	// Text The text to be sent to the buyer. Only links related to the digital access key are allowed. Do not include HTML or email addresses. The text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation.
	Text *string `json:"text,omitempty"`
}

// CreateDigitalAccessKeyResponse The response schema for the createDigitalAccessKey operation.
type CreateDigitalAccessKeyResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// CreateLegalDisclosureRequest The request schema for the createLegalDisclosure operation.
type CreateLegalDisclosureRequest struct {
	// Attachments Attachments to include in the message to the buyer. If any text is included in the attachment, the text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation.
	Attachments *[]Attachment `json:"attachments,omitempty"`
}

// CreateLegalDisclosureResponse The response schema for the createLegalDisclosure operation.
type CreateLegalDisclosureResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// CreateNegativeFeedbackRemovalResponse The response schema for the createNegativeFeedbackRemoval operation.
type CreateNegativeFeedbackRemovalResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// CreateUnexpectedProblemRequest The request schema for the createUnexpectedProblem operation.
type CreateUnexpectedProblemRequest struct {
	// Text The text to be sent to the buyer. Only links related to unexpected problem calls are allowed. Do not include HTML or email addresses. The text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation.
	Text *string `json:"text,omitempty"`
}

// CreateUnexpectedProblemResponse The response schema for the createUnexpectedProblem operation.
type CreateUnexpectedProblemResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// CreateWarrantyRequest The request schema for the createWarranty operation.
type CreateWarrantyRequest struct {
	// Attachments Attachments to include in the message to the buyer. If any text is included in the attachment, the text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation.
	Attachments *[]Attachment `json:"attachments,omitempty"`

	// CoverageEndDate The end date of the warranty coverage to include in the message to the buyer.
	CoverageEndDate *time.Time `json:"coverageEndDate,omitempty"`

	// CoverageStartDate The start date of the warranty coverage to include in the message to the buyer.
	CoverageStartDate *time.Time `json:"coverageStartDate,omitempty"`
}

// CreateWarrantyResponse The response schema for the createWarranty operation.
type CreateWarrantyResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList = []Error

// GetAttributesResponse The response schema for the GetAttributes operation.
type GetAttributesResponse struct {
	// Buyer The list of attributes related to the buyer.
	Buyer *struct {
		// Locale The buyer's language of preference, indicated with a locale-specific language tag. Examples: "en-US", "zh-CN", and "en-GB".
		Locale *string `json:"locale,omitempty"`
	} `json:"buyer,omitempty"`

	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// GetMessagingActionResponse Describes a messaging action that can be taken for an order. Provides a JSON Hypertext Application Language (HAL) link to the JSON schema document that describes the expected input.
type GetMessagingActionResponse struct {
	Embedded *struct {
		Schema *GetSchemaResponse `json:"schema,omitempty"`
	} `json:"_embedded,omitempty"`
	Links *struct {
		// Schema A Link object.
		Schema LinkObject `json:"schema"`

		// Self A Link object.
		Self LinkObject `json:"self"`
	} `json:"_links,omitempty"`

	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload A simple object containing the name of the template.
	Payload *MessagingAction `json:"payload,omitempty"`
}

// GetMessagingActionsForOrderResponse The response schema for the getMessagingActionsForOrder operation.
type GetMessagingActionsForOrderResponse struct {
	Embedded *struct {
		Actions []GetMessagingActionResponse `json:"actions"`
	} `json:"_embedded,omitempty"`
	Links *struct {
		// Actions Eligible actions for the specified amazonOrderId.
		Actions []LinkObject `json:"actions"`

		// Self A Link object.
		Self LinkObject `json:"self"`
	} `json:"_links,omitempty"`

	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// GetSchemaResponse defines model for GetSchemaResponse.
type GetSchemaResponse struct {
	Links *struct {
		// Self A Link object.
		Self LinkObject `json:"self"`
	} `json:"_links,omitempty"`

	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload A JSON schema document describing the expected payload of the action. This object can be validated against <a href=http://json-schema.org/draft-04/schema>http://json-schema.org/draft-04/schema</a>.
	Payload *Schema `json:"payload,omitempty"`
}

// InvoiceRequest The request schema for the sendInvoice operation.
type InvoiceRequest struct {
	// Attachments Attachments to include in the message to the buyer.
	Attachments *[]Attachment `json:"attachments,omitempty"`
}

// InvoiceResponse The response schema for the sendInvoice operation.
type InvoiceResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// LinkObject A Link object.
type LinkObject struct {
	// Href A URI for this object.
	Href string `json:"href"`

	// Name An identifier for this object.
	Name *string `json:"name,omitempty"`
}

// MessagingAction A simple object containing the name of the template.
type MessagingAction struct {
	Name string `json:"name"`
}

// Schema A JSON schema document describing the expected payload of the action. This object can be validated against <a href=http://json-schema.org/draft-04/schema>http://json-schema.org/draft-04/schema</a>.
type Schema map[string]interface{}

// GetMessagingActionsForOrderParams defines parameters for GetMessagingActionsForOrder.
type GetMessagingActionsForOrderParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// GetAttributesParams defines parameters for GetAttributes.
type GetAttributesParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// CreateAmazonMotorsParams defines parameters for CreateAmazonMotors.
type CreateAmazonMotorsParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// ConfirmCustomizationDetailsParams defines parameters for ConfirmCustomizationDetails.
type ConfirmCustomizationDetailsParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// CreateConfirmDeliveryDetailsParams defines parameters for CreateConfirmDeliveryDetails.
type CreateConfirmDeliveryDetailsParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// CreateConfirmOrderDetailsParams defines parameters for CreateConfirmOrderDetails.
type CreateConfirmOrderDetailsParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// CreateConfirmServiceDetailsParams defines parameters for CreateConfirmServiceDetails.
type CreateConfirmServiceDetailsParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// CreateDigitalAccessKeyParams defines parameters for CreateDigitalAccessKey.
type CreateDigitalAccessKeyParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// SendInvoiceParams defines parameters for SendInvoice.
type SendInvoiceParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// CreateLegalDisclosureParams defines parameters for CreateLegalDisclosure.
type CreateLegalDisclosureParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// CreateNegativeFeedbackRemovalParams defines parameters for CreateNegativeFeedbackRemoval.
type CreateNegativeFeedbackRemovalParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// CreateUnexpectedProblemParams defines parameters for CreateUnexpectedProblem.
type CreateUnexpectedProblemParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// CreateWarrantyParams defines parameters for CreateWarranty.
type CreateWarrantyParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// CreateAmazonMotorsJSONRequestBody defines body for CreateAmazonMotors for application/json ContentType.
type CreateAmazonMotorsJSONRequestBody = CreateAmazonMotorsRequest

// ConfirmCustomizationDetailsJSONRequestBody defines body for ConfirmCustomizationDetails for application/json ContentType.
type ConfirmCustomizationDetailsJSONRequestBody = CreateConfirmCustomizationDetailsRequest

// CreateConfirmDeliveryDetailsJSONRequestBody defines body for CreateConfirmDeliveryDetails for application/json ContentType.
type CreateConfirmDeliveryDetailsJSONRequestBody = CreateConfirmDeliveryDetailsRequest

// CreateConfirmOrderDetailsJSONRequestBody defines body for CreateConfirmOrderDetails for application/json ContentType.
type CreateConfirmOrderDetailsJSONRequestBody = CreateConfirmOrderDetailsRequest

// CreateConfirmServiceDetailsJSONRequestBody defines body for CreateConfirmServiceDetails for application/json ContentType.
type CreateConfirmServiceDetailsJSONRequestBody = CreateConfirmServiceDetailsRequest

// CreateDigitalAccessKeyJSONRequestBody defines body for CreateDigitalAccessKey for application/json ContentType.
type CreateDigitalAccessKeyJSONRequestBody = CreateDigitalAccessKeyRequest

// SendInvoiceJSONRequestBody defines body for SendInvoice for application/json ContentType.
type SendInvoiceJSONRequestBody = InvoiceRequest

// CreateLegalDisclosureJSONRequestBody defines body for CreateLegalDisclosure for application/json ContentType.
type CreateLegalDisclosureJSONRequestBody = CreateLegalDisclosureRequest

// CreateUnexpectedProblemJSONRequestBody defines body for CreateUnexpectedProblem for application/json ContentType.
type CreateUnexpectedProblemJSONRequestBody = CreateUnexpectedProblemRequest

// CreateWarrantyJSONRequestBody defines body for CreateWarranty for application/json ContentType.
type CreateWarrantyJSONRequestBody = CreateWarrantyRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetMessagingActionsForOrder request
	GetMessagingActionsForOrder(ctx context.Context, amazonOrderId string, params *GetMessagingActionsForOrderParams) (*http.Response, error)

	// GetAttributes request
	GetAttributes(ctx context.Context, amazonOrderId string, params *GetAttributesParams) (*http.Response, error)

	// CreateAmazonMotorsWithBody request with any body
	CreateAmazonMotorsWithBody(ctx context.Context, amazonOrderId string, params *CreateAmazonMotorsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateAmazonMotors(ctx context.Context, amazonOrderId string, params *CreateAmazonMotorsParams, body CreateAmazonMotorsJSONRequestBody) (*http.Response, error)

	// ConfirmCustomizationDetailsWithBody request with any body
	ConfirmCustomizationDetailsWithBody(ctx context.Context, amazonOrderId string, params *ConfirmCustomizationDetailsParams, contentType string, body io.Reader) (*http.Response, error)

	ConfirmCustomizationDetails(ctx context.Context, amazonOrderId string, params *ConfirmCustomizationDetailsParams, body ConfirmCustomizationDetailsJSONRequestBody) (*http.Response, error)

	// CreateConfirmDeliveryDetailsWithBody request with any body
	CreateConfirmDeliveryDetailsWithBody(ctx context.Context, amazonOrderId string, params *CreateConfirmDeliveryDetailsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateConfirmDeliveryDetails(ctx context.Context, amazonOrderId string, params *CreateConfirmDeliveryDetailsParams, body CreateConfirmDeliveryDetailsJSONRequestBody) (*http.Response, error)

	// CreateConfirmOrderDetailsWithBody request with any body
	CreateConfirmOrderDetailsWithBody(ctx context.Context, amazonOrderId string, params *CreateConfirmOrderDetailsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateConfirmOrderDetails(ctx context.Context, amazonOrderId string, params *CreateConfirmOrderDetailsParams, body CreateConfirmOrderDetailsJSONRequestBody) (*http.Response, error)

	// CreateConfirmServiceDetailsWithBody request with any body
	CreateConfirmServiceDetailsWithBody(ctx context.Context, amazonOrderId string, params *CreateConfirmServiceDetailsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateConfirmServiceDetails(ctx context.Context, amazonOrderId string, params *CreateConfirmServiceDetailsParams, body CreateConfirmServiceDetailsJSONRequestBody) (*http.Response, error)

	// CreateDigitalAccessKeyWithBody request with any body
	CreateDigitalAccessKeyWithBody(ctx context.Context, amazonOrderId string, params *CreateDigitalAccessKeyParams, contentType string, body io.Reader) (*http.Response, error)

	CreateDigitalAccessKey(ctx context.Context, amazonOrderId string, params *CreateDigitalAccessKeyParams, body CreateDigitalAccessKeyJSONRequestBody) (*http.Response, error)

	// SendInvoiceWithBody request with any body
	SendInvoiceWithBody(ctx context.Context, amazonOrderId string, params *SendInvoiceParams, contentType string, body io.Reader) (*http.Response, error)

	SendInvoice(ctx context.Context, amazonOrderId string, params *SendInvoiceParams, body SendInvoiceJSONRequestBody) (*http.Response, error)

	// CreateLegalDisclosureWithBody request with any body
	CreateLegalDisclosureWithBody(ctx context.Context, amazonOrderId string, params *CreateLegalDisclosureParams, contentType string, body io.Reader) (*http.Response, error)

	CreateLegalDisclosure(ctx context.Context, amazonOrderId string, params *CreateLegalDisclosureParams, body CreateLegalDisclosureJSONRequestBody) (*http.Response, error)

	// CreateNegativeFeedbackRemoval request
	CreateNegativeFeedbackRemoval(ctx context.Context, amazonOrderId string, params *CreateNegativeFeedbackRemovalParams) (*http.Response, error)

	// CreateUnexpectedProblemWithBody request with any body
	CreateUnexpectedProblemWithBody(ctx context.Context, amazonOrderId string, params *CreateUnexpectedProblemParams, contentType string, body io.Reader) (*http.Response, error)

	CreateUnexpectedProblem(ctx context.Context, amazonOrderId string, params *CreateUnexpectedProblemParams, body CreateUnexpectedProblemJSONRequestBody) (*http.Response, error)

	// CreateWarrantyWithBody request with any body
	CreateWarrantyWithBody(ctx context.Context, amazonOrderId string, params *CreateWarrantyParams, contentType string, body io.Reader) (*http.Response, error)

	CreateWarranty(ctx context.Context, amazonOrderId string, params *CreateWarrantyParams, body CreateWarrantyJSONRequestBody) (*http.Response, error)
}

func (c *Client) GetMessagingActionsForOrder(ctx context.Context, amazonOrderId string, params *GetMessagingActionsForOrderParams) (*http.Response, error) {
	req, err := NewGetMessagingActionsForOrderRequest(c.Server, amazonOrderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetAttributes(ctx context.Context, amazonOrderId string, params *GetAttributesParams) (*http.Response, error) {
	req, err := NewGetAttributesRequest(c.Server, amazonOrderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateAmazonMotorsWithBody(ctx context.Context, amazonOrderId string, params *CreateAmazonMotorsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateAmazonMotorsRequestWithBody(c.Server, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateAmazonMotors(ctx context.Context, amazonOrderId string, params *CreateAmazonMotorsParams, body CreateAmazonMotorsJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateAmazonMotorsRequest(c.Server, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ConfirmCustomizationDetailsWithBody(ctx context.Context, amazonOrderId string, params *ConfirmCustomizationDetailsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewConfirmCustomizationDetailsRequestWithBody(c.Server, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ConfirmCustomizationDetails(ctx context.Context, amazonOrderId string, params *ConfirmCustomizationDetailsParams, body ConfirmCustomizationDetailsJSONRequestBody) (*http.Response, error) {
	req, err := NewConfirmCustomizationDetailsRequest(c.Server, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateConfirmDeliveryDetailsWithBody(ctx context.Context, amazonOrderId string, params *CreateConfirmDeliveryDetailsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateConfirmDeliveryDetailsRequestWithBody(c.Server, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateConfirmDeliveryDetails(ctx context.Context, amazonOrderId string, params *CreateConfirmDeliveryDetailsParams, body CreateConfirmDeliveryDetailsJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateConfirmDeliveryDetailsRequest(c.Server, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateConfirmOrderDetailsWithBody(ctx context.Context, amazonOrderId string, params *CreateConfirmOrderDetailsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateConfirmOrderDetailsRequestWithBody(c.Server, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateConfirmOrderDetails(ctx context.Context, amazonOrderId string, params *CreateConfirmOrderDetailsParams, body CreateConfirmOrderDetailsJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateConfirmOrderDetailsRequest(c.Server, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateConfirmServiceDetailsWithBody(ctx context.Context, amazonOrderId string, params *CreateConfirmServiceDetailsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateConfirmServiceDetailsRequestWithBody(c.Server, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateConfirmServiceDetails(ctx context.Context, amazonOrderId string, params *CreateConfirmServiceDetailsParams, body CreateConfirmServiceDetailsJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateConfirmServiceDetailsRequest(c.Server, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDigitalAccessKeyWithBody(ctx context.Context, amazonOrderId string, params *CreateDigitalAccessKeyParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateDigitalAccessKeyRequestWithBody(c.Server, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDigitalAccessKey(ctx context.Context, amazonOrderId string, params *CreateDigitalAccessKeyParams, body CreateDigitalAccessKeyJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDigitalAccessKeyRequest(c.Server, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SendInvoiceWithBody(ctx context.Context, amazonOrderId string, params *SendInvoiceParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSendInvoiceRequestWithBody(c.Server, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SendInvoice(ctx context.Context, amazonOrderId string, params *SendInvoiceParams, body SendInvoiceJSONRequestBody) (*http.Response, error) {
	req, err := NewSendInvoiceRequest(c.Server, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateLegalDisclosureWithBody(ctx context.Context, amazonOrderId string, params *CreateLegalDisclosureParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateLegalDisclosureRequestWithBody(c.Server, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateLegalDisclosure(ctx context.Context, amazonOrderId string, params *CreateLegalDisclosureParams, body CreateLegalDisclosureJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateLegalDisclosureRequest(c.Server, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateNegativeFeedbackRemoval(ctx context.Context, amazonOrderId string, params *CreateNegativeFeedbackRemovalParams) (*http.Response, error) {
	req, err := NewCreateNegativeFeedbackRemovalRequest(c.Server, amazonOrderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateUnexpectedProblemWithBody(ctx context.Context, amazonOrderId string, params *CreateUnexpectedProblemParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateUnexpectedProblemRequestWithBody(c.Server, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateUnexpectedProblem(ctx context.Context, amazonOrderId string, params *CreateUnexpectedProblemParams, body CreateUnexpectedProblemJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateUnexpectedProblemRequest(c.Server, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateWarrantyWithBody(ctx context.Context, amazonOrderId string, params *CreateWarrantyParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateWarrantyRequestWithBody(c.Server, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateWarranty(ctx context.Context, amazonOrderId string, params *CreateWarrantyParams, body CreateWarrantyJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateWarrantyRequest(c.Server, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetMessagingActionsForOrderRequest generates requests for GetMessagingActionsForOrder
func NewGetMessagingActionsForOrderRequest(server string, amazonOrderId string, params *GetMessagingActionsForOrderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "amazonOrderId", runtime.ParamLocationPath, amazonOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messaging/v1/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAttributesRequest generates requests for GetAttributes
func NewGetAttributesRequest(server string, amazonOrderId string, params *GetAttributesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "amazonOrderId", runtime.ParamLocationPath, amazonOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messaging/v1/orders/%s/attributes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAmazonMotorsRequest calls the generic CreateAmazonMotors builder with application/json body
func NewCreateAmazonMotorsRequest(server string, amazonOrderId string, params *CreateAmazonMotorsParams, body CreateAmazonMotorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAmazonMotorsRequestWithBody(server, amazonOrderId, params, "application/json", bodyReader)
}

// NewCreateAmazonMotorsRequestWithBody generates requests for CreateAmazonMotors with any type of body
func NewCreateAmazonMotorsRequestWithBody(server string, amazonOrderId string, params *CreateAmazonMotorsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "amazonOrderId", runtime.ParamLocationPath, amazonOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messaging/v1/orders/%s/messages/amazonMotors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConfirmCustomizationDetailsRequest calls the generic ConfirmCustomizationDetails builder with application/json body
func NewConfirmCustomizationDetailsRequest(server string, amazonOrderId string, params *ConfirmCustomizationDetailsParams, body ConfirmCustomizationDetailsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfirmCustomizationDetailsRequestWithBody(server, amazonOrderId, params, "application/json", bodyReader)
}

// NewConfirmCustomizationDetailsRequestWithBody generates requests for ConfirmCustomizationDetails with any type of body
func NewConfirmCustomizationDetailsRequestWithBody(server string, amazonOrderId string, params *ConfirmCustomizationDetailsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "amazonOrderId", runtime.ParamLocationPath, amazonOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messaging/v1/orders/%s/messages/confirmCustomizationDetails", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateConfirmDeliveryDetailsRequest calls the generic CreateConfirmDeliveryDetails builder with application/json body
func NewCreateConfirmDeliveryDetailsRequest(server string, amazonOrderId string, params *CreateConfirmDeliveryDetailsParams, body CreateConfirmDeliveryDetailsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConfirmDeliveryDetailsRequestWithBody(server, amazonOrderId, params, "application/json", bodyReader)
}

// NewCreateConfirmDeliveryDetailsRequestWithBody generates requests for CreateConfirmDeliveryDetails with any type of body
func NewCreateConfirmDeliveryDetailsRequestWithBody(server string, amazonOrderId string, params *CreateConfirmDeliveryDetailsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "amazonOrderId", runtime.ParamLocationPath, amazonOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messaging/v1/orders/%s/messages/confirmDeliveryDetails", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateConfirmOrderDetailsRequest calls the generic CreateConfirmOrderDetails builder with application/json body
func NewCreateConfirmOrderDetailsRequest(server string, amazonOrderId string, params *CreateConfirmOrderDetailsParams, body CreateConfirmOrderDetailsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConfirmOrderDetailsRequestWithBody(server, amazonOrderId, params, "application/json", bodyReader)
}

// NewCreateConfirmOrderDetailsRequestWithBody generates requests for CreateConfirmOrderDetails with any type of body
func NewCreateConfirmOrderDetailsRequestWithBody(server string, amazonOrderId string, params *CreateConfirmOrderDetailsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "amazonOrderId", runtime.ParamLocationPath, amazonOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messaging/v1/orders/%s/messages/confirmOrderDetails", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateConfirmServiceDetailsRequest calls the generic CreateConfirmServiceDetails builder with application/json body
func NewCreateConfirmServiceDetailsRequest(server string, amazonOrderId string, params *CreateConfirmServiceDetailsParams, body CreateConfirmServiceDetailsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConfirmServiceDetailsRequestWithBody(server, amazonOrderId, params, "application/json", bodyReader)
}

// NewCreateConfirmServiceDetailsRequestWithBody generates requests for CreateConfirmServiceDetails with any type of body
func NewCreateConfirmServiceDetailsRequestWithBody(server string, amazonOrderId string, params *CreateConfirmServiceDetailsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "amazonOrderId", runtime.ParamLocationPath, amazonOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messaging/v1/orders/%s/messages/confirmServiceDetails", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDigitalAccessKeyRequest calls the generic CreateDigitalAccessKey builder with application/json body
func NewCreateDigitalAccessKeyRequest(server string, amazonOrderId string, params *CreateDigitalAccessKeyParams, body CreateDigitalAccessKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDigitalAccessKeyRequestWithBody(server, amazonOrderId, params, "application/json", bodyReader)
}

// NewCreateDigitalAccessKeyRequestWithBody generates requests for CreateDigitalAccessKey with any type of body
func NewCreateDigitalAccessKeyRequestWithBody(server string, amazonOrderId string, params *CreateDigitalAccessKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "amazonOrderId", runtime.ParamLocationPath, amazonOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messaging/v1/orders/%s/messages/digitalAccessKey", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendInvoiceRequest calls the generic SendInvoice builder with application/json body
func NewSendInvoiceRequest(server string, amazonOrderId string, params *SendInvoiceParams, body SendInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendInvoiceRequestWithBody(server, amazonOrderId, params, "application/json", bodyReader)
}

// NewSendInvoiceRequestWithBody generates requests for SendInvoice with any type of body
func NewSendInvoiceRequestWithBody(server string, amazonOrderId string, params *SendInvoiceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "amazonOrderId", runtime.ParamLocationPath, amazonOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messaging/v1/orders/%s/messages/invoice", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateLegalDisclosureRequest calls the generic CreateLegalDisclosure builder with application/json body
func NewCreateLegalDisclosureRequest(server string, amazonOrderId string, params *CreateLegalDisclosureParams, body CreateLegalDisclosureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLegalDisclosureRequestWithBody(server, amazonOrderId, params, "application/json", bodyReader)
}

// NewCreateLegalDisclosureRequestWithBody generates requests for CreateLegalDisclosure with any type of body
func NewCreateLegalDisclosureRequestWithBody(server string, amazonOrderId string, params *CreateLegalDisclosureParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "amazonOrderId", runtime.ParamLocationPath, amazonOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messaging/v1/orders/%s/messages/legalDisclosure", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateNegativeFeedbackRemovalRequest generates requests for CreateNegativeFeedbackRemoval
func NewCreateNegativeFeedbackRemovalRequest(server string, amazonOrderId string, params *CreateNegativeFeedbackRemovalParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "amazonOrderId", runtime.ParamLocationPath, amazonOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messaging/v1/orders/%s/messages/negativeFeedbackRemoval", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUnexpectedProblemRequest calls the generic CreateUnexpectedProblem builder with application/json body
func NewCreateUnexpectedProblemRequest(server string, amazonOrderId string, params *CreateUnexpectedProblemParams, body CreateUnexpectedProblemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUnexpectedProblemRequestWithBody(server, amazonOrderId, params, "application/json", bodyReader)
}

// NewCreateUnexpectedProblemRequestWithBody generates requests for CreateUnexpectedProblem with any type of body
func NewCreateUnexpectedProblemRequestWithBody(server string, amazonOrderId string, params *CreateUnexpectedProblemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "amazonOrderId", runtime.ParamLocationPath, amazonOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messaging/v1/orders/%s/messages/unexpectedProblem", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateWarrantyRequest calls the generic CreateWarranty builder with application/json body
func NewCreateWarrantyRequest(server string, amazonOrderId string, params *CreateWarrantyParams, body CreateWarrantyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWarrantyRequestWithBody(server, amazonOrderId, params, "application/json", bodyReader)
}

// NewCreateWarrantyRequestWithBody generates requests for CreateWarranty with any type of body
func NewCreateWarrantyRequestWithBody(server string, amazonOrderId string, params *CreateWarrantyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "amazonOrderId", runtime.ParamLocationPath, amazonOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messaging/v1/orders/%s/messages/warranty", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetMessagingActionsForOrderWithResponse request
	GetMessagingActionsForOrderWithResponse(ctx context.Context, amazonOrderId string, params *GetMessagingActionsForOrderParams) (*GetMessagingActionsForOrderResp, error)

	// GetAttributesWithResponse request
	GetAttributesWithResponse(ctx context.Context, amazonOrderId string, params *GetAttributesParams) (*GetAttributesResp, error)

	// CreateAmazonMotorsWithBodyWithResponse request with any body
	CreateAmazonMotorsWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateAmazonMotorsParams, contentType string, body io.Reader) (*CreateAmazonMotorsResp, error)

	CreateAmazonMotorsWithResponse(ctx context.Context, amazonOrderId string, params *CreateAmazonMotorsParams, body CreateAmazonMotorsJSONRequestBody) (*CreateAmazonMotorsResp, error)

	// ConfirmCustomizationDetailsWithBodyWithResponse request with any body
	ConfirmCustomizationDetailsWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *ConfirmCustomizationDetailsParams, contentType string, body io.Reader) (*ConfirmCustomizationDetailsResp, error)

	ConfirmCustomizationDetailsWithResponse(ctx context.Context, amazonOrderId string, params *ConfirmCustomizationDetailsParams, body ConfirmCustomizationDetailsJSONRequestBody) (*ConfirmCustomizationDetailsResp, error)

	// CreateConfirmDeliveryDetailsWithBodyWithResponse request with any body
	CreateConfirmDeliveryDetailsWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateConfirmDeliveryDetailsParams, contentType string, body io.Reader) (*CreateConfirmDeliveryDetailsResp, error)

	CreateConfirmDeliveryDetailsWithResponse(ctx context.Context, amazonOrderId string, params *CreateConfirmDeliveryDetailsParams, body CreateConfirmDeliveryDetailsJSONRequestBody) (*CreateConfirmDeliveryDetailsResp, error)

	// CreateConfirmOrderDetailsWithBodyWithResponse request with any body
	CreateConfirmOrderDetailsWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateConfirmOrderDetailsParams, contentType string, body io.Reader) (*CreateConfirmOrderDetailsResp, error)

	CreateConfirmOrderDetailsWithResponse(ctx context.Context, amazonOrderId string, params *CreateConfirmOrderDetailsParams, body CreateConfirmOrderDetailsJSONRequestBody) (*CreateConfirmOrderDetailsResp, error)

	// CreateConfirmServiceDetailsWithBodyWithResponse request with any body
	CreateConfirmServiceDetailsWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateConfirmServiceDetailsParams, contentType string, body io.Reader) (*CreateConfirmServiceDetailsResp, error)

	CreateConfirmServiceDetailsWithResponse(ctx context.Context, amazonOrderId string, params *CreateConfirmServiceDetailsParams, body CreateConfirmServiceDetailsJSONRequestBody) (*CreateConfirmServiceDetailsResp, error)

	// CreateDigitalAccessKeyWithBodyWithResponse request with any body
	CreateDigitalAccessKeyWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateDigitalAccessKeyParams, contentType string, body io.Reader) (*CreateDigitalAccessKeyResp, error)

	CreateDigitalAccessKeyWithResponse(ctx context.Context, amazonOrderId string, params *CreateDigitalAccessKeyParams, body CreateDigitalAccessKeyJSONRequestBody) (*CreateDigitalAccessKeyResp, error)

	// SendInvoiceWithBodyWithResponse request with any body
	SendInvoiceWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *SendInvoiceParams, contentType string, body io.Reader) (*SendInvoiceResp, error)

	SendInvoiceWithResponse(ctx context.Context, amazonOrderId string, params *SendInvoiceParams, body SendInvoiceJSONRequestBody) (*SendInvoiceResp, error)

	// CreateLegalDisclosureWithBodyWithResponse request with any body
	CreateLegalDisclosureWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateLegalDisclosureParams, contentType string, body io.Reader) (*CreateLegalDisclosureResp, error)

	CreateLegalDisclosureWithResponse(ctx context.Context, amazonOrderId string, params *CreateLegalDisclosureParams, body CreateLegalDisclosureJSONRequestBody) (*CreateLegalDisclosureResp, error)

	// CreateNegativeFeedbackRemovalWithResponse request
	CreateNegativeFeedbackRemovalWithResponse(ctx context.Context, amazonOrderId string, params *CreateNegativeFeedbackRemovalParams) (*CreateNegativeFeedbackRemovalResp, error)

	// CreateUnexpectedProblemWithBodyWithResponse request with any body
	CreateUnexpectedProblemWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateUnexpectedProblemParams, contentType string, body io.Reader) (*CreateUnexpectedProblemResp, error)

	CreateUnexpectedProblemWithResponse(ctx context.Context, amazonOrderId string, params *CreateUnexpectedProblemParams, body CreateUnexpectedProblemJSONRequestBody) (*CreateUnexpectedProblemResp, error)

	// CreateWarrantyWithBodyWithResponse request with any body
	CreateWarrantyWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateWarrantyParams, contentType string, body io.Reader) (*CreateWarrantyResp, error)

	CreateWarrantyWithResponse(ctx context.Context, amazonOrderId string, params *CreateWarrantyParams, body CreateWarrantyJSONRequestBody) (*CreateWarrantyResp, error)
}

type GetMessagingActionsForOrderResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMessagingActionsForOrderResponse
	JSON400      *GetMessagingActionsForOrderResponse
	JSON403      *GetMessagingActionsForOrderResponse
	JSON404      *GetMessagingActionsForOrderResponse
	JSON413      *GetMessagingActionsForOrderResponse
	JSON415      *GetMessagingActionsForOrderResponse
	JSON429      *GetMessagingActionsForOrderResponse
	JSON500      *GetMessagingActionsForOrderResponse
	JSON503      *GetMessagingActionsForOrderResponse
}

// Status returns HTTPResponse.Status
func (r GetMessagingActionsForOrderResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessagingActionsForOrderResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttributesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAttributesResponse
	JSON400      *GetAttributesResponse
	JSON403      *GetAttributesResponse
	JSON404      *GetAttributesResponse
	JSON413      *GetAttributesResponse
	JSON415      *GetAttributesResponse
	JSON429      *GetAttributesResponse
	JSON500      *GetAttributesResponse
	JSON503      *GetAttributesResponse
}

// Status returns HTTPResponse.Status
func (r GetAttributesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttributesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAmazonMotorsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateAmazonMotorsResponse
	JSON400      *CreateAmazonMotorsResponse
	JSON403      *CreateAmazonMotorsResponse
	JSON404      *CreateAmazonMotorsResponse
	JSON413      *CreateAmazonMotorsResponse
	JSON415      *CreateAmazonMotorsResponse
	JSON429      *CreateAmazonMotorsResponse
	JSON500      *CreateAmazonMotorsResponse
	JSON503      *CreateAmazonMotorsResponse
}

// Status returns HTTPResponse.Status
func (r CreateAmazonMotorsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAmazonMotorsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfirmCustomizationDetailsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateConfirmCustomizationDetailsResponse
	JSON400      *CreateConfirmCustomizationDetailsResponse
	JSON403      *CreateConfirmCustomizationDetailsResponse
	JSON404      *CreateConfirmCustomizationDetailsResponse
	JSON413      *CreateConfirmCustomizationDetailsResponse
	JSON415      *CreateConfirmCustomizationDetailsResponse
	JSON429      *CreateConfirmCustomizationDetailsResponse
	JSON500      *CreateConfirmCustomizationDetailsResponse
	JSON503      *CreateConfirmCustomizationDetailsResponse
}

// Status returns HTTPResponse.Status
func (r ConfirmCustomizationDetailsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfirmCustomizationDetailsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConfirmDeliveryDetailsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateConfirmDeliveryDetailsResponse
	JSON400      *CreateConfirmDeliveryDetailsResponse
	JSON403      *CreateConfirmDeliveryDetailsResponse
	JSON404      *CreateConfirmDeliveryDetailsResponse
	JSON413      *CreateConfirmDeliveryDetailsResponse
	JSON415      *CreateConfirmDeliveryDetailsResponse
	JSON429      *CreateConfirmDeliveryDetailsResponse
	JSON500      *CreateConfirmDeliveryDetailsResponse
	JSON503      *CreateConfirmDeliveryDetailsResponse
}

// Status returns HTTPResponse.Status
func (r CreateConfirmDeliveryDetailsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConfirmDeliveryDetailsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConfirmOrderDetailsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateConfirmOrderDetailsResponse
	JSON400      *CreateConfirmOrderDetailsResponse
	JSON403      *CreateConfirmOrderDetailsResponse
	JSON404      *CreateConfirmOrderDetailsResponse
	JSON413      *CreateConfirmOrderDetailsResponse
	JSON415      *CreateConfirmOrderDetailsResponse
	JSON429      *CreateConfirmOrderDetailsResponse
	JSON500      *CreateConfirmOrderDetailsResponse
	JSON503      *CreateConfirmOrderDetailsResponse
}

// Status returns HTTPResponse.Status
func (r CreateConfirmOrderDetailsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConfirmOrderDetailsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConfirmServiceDetailsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateConfirmServiceDetailsResponse
	JSON400      *CreateConfirmServiceDetailsResponse
	JSON403      *CreateConfirmServiceDetailsResponse
	JSON404      *CreateConfirmServiceDetailsResponse
	JSON413      *CreateConfirmServiceDetailsResponse
	JSON415      *CreateConfirmServiceDetailsResponse
	JSON429      *CreateConfirmServiceDetailsResponse
	JSON500      *CreateConfirmServiceDetailsResponse
	JSON503      *CreateConfirmServiceDetailsResponse
}

// Status returns HTTPResponse.Status
func (r CreateConfirmServiceDetailsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConfirmServiceDetailsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDigitalAccessKeyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateDigitalAccessKeyResponse
	JSON400      *CreateDigitalAccessKeyResponse
	JSON403      *CreateDigitalAccessKeyResponse
	JSON404      *CreateDigitalAccessKeyResponse
	JSON413      *CreateDigitalAccessKeyResponse
	JSON415      *CreateDigitalAccessKeyResponse
	JSON429      *CreateDigitalAccessKeyResponse
	JSON500      *CreateDigitalAccessKeyResponse
	JSON503      *CreateDigitalAccessKeyResponse
}

// Status returns HTTPResponse.Status
func (r CreateDigitalAccessKeyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDigitalAccessKeyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendInvoiceResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InvoiceResponse
	JSON400      *InvoiceResponse
	JSON403      *InvoiceResponse
	JSON404      *InvoiceResponse
	JSON413      *InvoiceResponse
	JSON415      *InvoiceResponse
	JSON429      *InvoiceResponse
	JSON500      *InvoiceResponse
	JSON503      *InvoiceResponse
}

// Status returns HTTPResponse.Status
func (r SendInvoiceResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendInvoiceResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLegalDisclosureResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateLegalDisclosureResponse
	JSON400      *CreateLegalDisclosureResponse
	JSON403      *CreateLegalDisclosureResponse
	JSON404      *CreateLegalDisclosureResponse
	JSON413      *CreateLegalDisclosureResponse
	JSON415      *CreateLegalDisclosureResponse
	JSON429      *CreateLegalDisclosureResponse
	JSON500      *CreateLegalDisclosureResponse
	JSON503      *CreateLegalDisclosureResponse
}

// Status returns HTTPResponse.Status
func (r CreateLegalDisclosureResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLegalDisclosureResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNegativeFeedbackRemovalResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateNegativeFeedbackRemovalResponse
	JSON400      *CreateNegativeFeedbackRemovalResponse
	JSON403      *CreateNegativeFeedbackRemovalResponse
	JSON404      *CreateNegativeFeedbackRemovalResponse
	JSON413      *CreateNegativeFeedbackRemovalResponse
	JSON415      *CreateNegativeFeedbackRemovalResponse
	JSON429      *CreateNegativeFeedbackRemovalResponse
	JSON500      *CreateNegativeFeedbackRemovalResponse
	JSON503      *CreateNegativeFeedbackRemovalResponse
}

// Status returns HTTPResponse.Status
func (r CreateNegativeFeedbackRemovalResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNegativeFeedbackRemovalResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUnexpectedProblemResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateUnexpectedProblemResponse
	JSON400      *CreateUnexpectedProblemResponse
	JSON403      *CreateUnexpectedProblemResponse
	JSON404      *CreateUnexpectedProblemResponse
	JSON413      *CreateUnexpectedProblemResponse
	JSON415      *CreateUnexpectedProblemResponse
	JSON429      *CreateUnexpectedProblemResponse
	JSON500      *CreateUnexpectedProblemResponse
	JSON503      *CreateUnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r CreateUnexpectedProblemResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUnexpectedProblemResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWarrantyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateWarrantyResponse
	JSON400      *CreateWarrantyResponse
	JSON403      *CreateWarrantyResponse
	JSON404      *CreateWarrantyResponse
	JSON413      *CreateWarrantyResponse
	JSON415      *CreateWarrantyResponse
	JSON429      *CreateWarrantyResponse
	JSON500      *CreateWarrantyResponse
	JSON503      *CreateWarrantyResponse
}

// Status returns HTTPResponse.Status
func (r CreateWarrantyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWarrantyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetMessagingActionsForOrderWithResponse request returning *GetMessagingActionsForOrderResp
func (c *ClientWithResponses) GetMessagingActionsForOrderWithResponse(ctx context.Context, amazonOrderId string, params *GetMessagingActionsForOrderParams) (*GetMessagingActionsForOrderResp, error) {
	rsp, err := c.GetMessagingActionsForOrder(ctx, amazonOrderId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetMessagingActionsForOrderResp(rsp)
}

// GetAttributesWithResponse request returning *GetAttributesResp
func (c *ClientWithResponses) GetAttributesWithResponse(ctx context.Context, amazonOrderId string, params *GetAttributesParams) (*GetAttributesResp, error) {
	rsp, err := c.GetAttributes(ctx, amazonOrderId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAttributesResp(rsp)
}

// CreateAmazonMotorsWithBodyWithResponse request with arbitrary body returning *CreateAmazonMotorsResp
func (c *ClientWithResponses) CreateAmazonMotorsWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateAmazonMotorsParams, contentType string, body io.Reader) (*CreateAmazonMotorsResp, error) {
	rsp, err := c.CreateAmazonMotorsWithBody(ctx, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAmazonMotorsResp(rsp)
}

func (c *ClientWithResponses) CreateAmazonMotorsWithResponse(ctx context.Context, amazonOrderId string, params *CreateAmazonMotorsParams, body CreateAmazonMotorsJSONRequestBody) (*CreateAmazonMotorsResp, error) {
	rsp, err := c.CreateAmazonMotors(ctx, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAmazonMotorsResp(rsp)
}

// ConfirmCustomizationDetailsWithBodyWithResponse request with arbitrary body returning *ConfirmCustomizationDetailsResp
func (c *ClientWithResponses) ConfirmCustomizationDetailsWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *ConfirmCustomizationDetailsParams, contentType string, body io.Reader) (*ConfirmCustomizationDetailsResp, error) {
	rsp, err := c.ConfirmCustomizationDetailsWithBody(ctx, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseConfirmCustomizationDetailsResp(rsp)
}

func (c *ClientWithResponses) ConfirmCustomizationDetailsWithResponse(ctx context.Context, amazonOrderId string, params *ConfirmCustomizationDetailsParams, body ConfirmCustomizationDetailsJSONRequestBody) (*ConfirmCustomizationDetailsResp, error) {
	rsp, err := c.ConfirmCustomizationDetails(ctx, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseConfirmCustomizationDetailsResp(rsp)
}

// CreateConfirmDeliveryDetailsWithBodyWithResponse request with arbitrary body returning *CreateConfirmDeliveryDetailsResp
func (c *ClientWithResponses) CreateConfirmDeliveryDetailsWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateConfirmDeliveryDetailsParams, contentType string, body io.Reader) (*CreateConfirmDeliveryDetailsResp, error) {
	rsp, err := c.CreateConfirmDeliveryDetailsWithBody(ctx, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateConfirmDeliveryDetailsResp(rsp)
}

func (c *ClientWithResponses) CreateConfirmDeliveryDetailsWithResponse(ctx context.Context, amazonOrderId string, params *CreateConfirmDeliveryDetailsParams, body CreateConfirmDeliveryDetailsJSONRequestBody) (*CreateConfirmDeliveryDetailsResp, error) {
	rsp, err := c.CreateConfirmDeliveryDetails(ctx, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateConfirmDeliveryDetailsResp(rsp)
}

// CreateConfirmOrderDetailsWithBodyWithResponse request with arbitrary body returning *CreateConfirmOrderDetailsResp
func (c *ClientWithResponses) CreateConfirmOrderDetailsWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateConfirmOrderDetailsParams, contentType string, body io.Reader) (*CreateConfirmOrderDetailsResp, error) {
	rsp, err := c.CreateConfirmOrderDetailsWithBody(ctx, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateConfirmOrderDetailsResp(rsp)
}

func (c *ClientWithResponses) CreateConfirmOrderDetailsWithResponse(ctx context.Context, amazonOrderId string, params *CreateConfirmOrderDetailsParams, body CreateConfirmOrderDetailsJSONRequestBody) (*CreateConfirmOrderDetailsResp, error) {
	rsp, err := c.CreateConfirmOrderDetails(ctx, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateConfirmOrderDetailsResp(rsp)
}

// CreateConfirmServiceDetailsWithBodyWithResponse request with arbitrary body returning *CreateConfirmServiceDetailsResp
func (c *ClientWithResponses) CreateConfirmServiceDetailsWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateConfirmServiceDetailsParams, contentType string, body io.Reader) (*CreateConfirmServiceDetailsResp, error) {
	rsp, err := c.CreateConfirmServiceDetailsWithBody(ctx, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateConfirmServiceDetailsResp(rsp)
}

func (c *ClientWithResponses) CreateConfirmServiceDetailsWithResponse(ctx context.Context, amazonOrderId string, params *CreateConfirmServiceDetailsParams, body CreateConfirmServiceDetailsJSONRequestBody) (*CreateConfirmServiceDetailsResp, error) {
	rsp, err := c.CreateConfirmServiceDetails(ctx, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateConfirmServiceDetailsResp(rsp)
}

// CreateDigitalAccessKeyWithBodyWithResponse request with arbitrary body returning *CreateDigitalAccessKeyResp
func (c *ClientWithResponses) CreateDigitalAccessKeyWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateDigitalAccessKeyParams, contentType string, body io.Reader) (*CreateDigitalAccessKeyResp, error) {
	rsp, err := c.CreateDigitalAccessKeyWithBody(ctx, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDigitalAccessKeyResp(rsp)
}

func (c *ClientWithResponses) CreateDigitalAccessKeyWithResponse(ctx context.Context, amazonOrderId string, params *CreateDigitalAccessKeyParams, body CreateDigitalAccessKeyJSONRequestBody) (*CreateDigitalAccessKeyResp, error) {
	rsp, err := c.CreateDigitalAccessKey(ctx, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDigitalAccessKeyResp(rsp)
}

// SendInvoiceWithBodyWithResponse request with arbitrary body returning *SendInvoiceResp
func (c *ClientWithResponses) SendInvoiceWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *SendInvoiceParams, contentType string, body io.Reader) (*SendInvoiceResp, error) {
	rsp, err := c.SendInvoiceWithBody(ctx, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSendInvoiceResp(rsp)
}

func (c *ClientWithResponses) SendInvoiceWithResponse(ctx context.Context, amazonOrderId string, params *SendInvoiceParams, body SendInvoiceJSONRequestBody) (*SendInvoiceResp, error) {
	rsp, err := c.SendInvoice(ctx, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSendInvoiceResp(rsp)
}

// CreateLegalDisclosureWithBodyWithResponse request with arbitrary body returning *CreateLegalDisclosureResp
func (c *ClientWithResponses) CreateLegalDisclosureWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateLegalDisclosureParams, contentType string, body io.Reader) (*CreateLegalDisclosureResp, error) {
	rsp, err := c.CreateLegalDisclosureWithBody(ctx, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateLegalDisclosureResp(rsp)
}

func (c *ClientWithResponses) CreateLegalDisclosureWithResponse(ctx context.Context, amazonOrderId string, params *CreateLegalDisclosureParams, body CreateLegalDisclosureJSONRequestBody) (*CreateLegalDisclosureResp, error) {
	rsp, err := c.CreateLegalDisclosure(ctx, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateLegalDisclosureResp(rsp)
}

// CreateNegativeFeedbackRemovalWithResponse request returning *CreateNegativeFeedbackRemovalResp
func (c *ClientWithResponses) CreateNegativeFeedbackRemovalWithResponse(ctx context.Context, amazonOrderId string, params *CreateNegativeFeedbackRemovalParams) (*CreateNegativeFeedbackRemovalResp, error) {
	rsp, err := c.CreateNegativeFeedbackRemoval(ctx, amazonOrderId, params)
	if err != nil {
		return nil, err
	}
	return ParseCreateNegativeFeedbackRemovalResp(rsp)
}

// CreateUnexpectedProblemWithBodyWithResponse request with arbitrary body returning *CreateUnexpectedProblemResp
func (c *ClientWithResponses) CreateUnexpectedProblemWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateUnexpectedProblemParams, contentType string, body io.Reader) (*CreateUnexpectedProblemResp, error) {
	rsp, err := c.CreateUnexpectedProblemWithBody(ctx, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateUnexpectedProblemResp(rsp)
}

func (c *ClientWithResponses) CreateUnexpectedProblemWithResponse(ctx context.Context, amazonOrderId string, params *CreateUnexpectedProblemParams, body CreateUnexpectedProblemJSONRequestBody) (*CreateUnexpectedProblemResp, error) {
	rsp, err := c.CreateUnexpectedProblem(ctx, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateUnexpectedProblemResp(rsp)
}

// CreateWarrantyWithBodyWithResponse request with arbitrary body returning *CreateWarrantyResp
func (c *ClientWithResponses) CreateWarrantyWithBodyWithResponse(ctx context.Context, amazonOrderId string, params *CreateWarrantyParams, contentType string, body io.Reader) (*CreateWarrantyResp, error) {
	rsp, err := c.CreateWarrantyWithBody(ctx, amazonOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateWarrantyResp(rsp)
}

func (c *ClientWithResponses) CreateWarrantyWithResponse(ctx context.Context, amazonOrderId string, params *CreateWarrantyParams, body CreateWarrantyJSONRequestBody) (*CreateWarrantyResp, error) {
	rsp, err := c.CreateWarranty(ctx, amazonOrderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateWarrantyResp(rsp)
}

// ParseGetMessagingActionsForOrderResp parses an HTTP response from a GetMessagingActionsForOrderWithResponse call
func ParseGetMessagingActionsForOrderResp(rsp *http.Response) (*GetMessagingActionsForOrderResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessagingActionsForOrderResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMessagingActionsForOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetMessagingActionsForOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetMessagingActionsForOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetMessagingActionsForOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest GetMessagingActionsForOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetMessagingActionsForOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetMessagingActionsForOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetMessagingActionsForOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetMessagingActionsForOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetAttributesResp parses an HTTP response from a GetAttributesWithResponse call
func ParseGetAttributesResp(rsp *http.Response) (*GetAttributesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttributesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAttributesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetAttributesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetAttributesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetAttributesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest GetAttributesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetAttributesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetAttributesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetAttributesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetAttributesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateAmazonMotorsResp parses an HTTP response from a CreateAmazonMotorsWithResponse call
func ParseCreateAmazonMotorsResp(rsp *http.Response) (*CreateAmazonMotorsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAmazonMotorsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateAmazonMotorsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateAmazonMotorsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateAmazonMotorsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateAmazonMotorsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateAmazonMotorsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateAmazonMotorsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateAmazonMotorsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateAmazonMotorsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateAmazonMotorsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseConfirmCustomizationDetailsResp parses an HTTP response from a ConfirmCustomizationDetailsWithResponse call
func ParseConfirmCustomizationDetailsResp(rsp *http.Response) (*ConfirmCustomizationDetailsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfirmCustomizationDetailsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateConfirmCustomizationDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateConfirmCustomizationDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateConfirmCustomizationDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateConfirmCustomizationDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateConfirmCustomizationDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateConfirmCustomizationDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateConfirmCustomizationDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateConfirmCustomizationDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateConfirmCustomizationDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateConfirmDeliveryDetailsResp parses an HTTP response from a CreateConfirmDeliveryDetailsWithResponse call
func ParseCreateConfirmDeliveryDetailsResp(rsp *http.Response) (*CreateConfirmDeliveryDetailsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConfirmDeliveryDetailsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateConfirmDeliveryDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateConfirmDeliveryDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateConfirmDeliveryDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateConfirmDeliveryDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateConfirmDeliveryDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateConfirmDeliveryDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateConfirmDeliveryDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateConfirmDeliveryDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateConfirmDeliveryDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateConfirmOrderDetailsResp parses an HTTP response from a CreateConfirmOrderDetailsWithResponse call
func ParseCreateConfirmOrderDetailsResp(rsp *http.Response) (*CreateConfirmOrderDetailsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConfirmOrderDetailsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateConfirmOrderDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateConfirmOrderDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateConfirmOrderDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateConfirmOrderDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateConfirmOrderDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateConfirmOrderDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateConfirmOrderDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateConfirmOrderDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateConfirmOrderDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateConfirmServiceDetailsResp parses an HTTP response from a CreateConfirmServiceDetailsWithResponse call
func ParseCreateConfirmServiceDetailsResp(rsp *http.Response) (*CreateConfirmServiceDetailsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConfirmServiceDetailsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateConfirmServiceDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateConfirmServiceDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateConfirmServiceDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateConfirmServiceDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateConfirmServiceDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateConfirmServiceDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateConfirmServiceDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateConfirmServiceDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateConfirmServiceDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateDigitalAccessKeyResp parses an HTTP response from a CreateDigitalAccessKeyWithResponse call
func ParseCreateDigitalAccessKeyResp(rsp *http.Response) (*CreateDigitalAccessKeyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDigitalAccessKeyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateDigitalAccessKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateDigitalAccessKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateDigitalAccessKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateDigitalAccessKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateDigitalAccessKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateDigitalAccessKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateDigitalAccessKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateDigitalAccessKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateDigitalAccessKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseSendInvoiceResp parses an HTTP response from a SendInvoiceWithResponse call
func ParseSendInvoiceResp(rsp *http.Response) (*SendInvoiceResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendInvoiceResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest InvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest InvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest InvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest InvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest InvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest InvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateLegalDisclosureResp parses an HTTP response from a CreateLegalDisclosureWithResponse call
func ParseCreateLegalDisclosureResp(rsp *http.Response) (*CreateLegalDisclosureResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLegalDisclosureResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateLegalDisclosureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateLegalDisclosureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateLegalDisclosureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateLegalDisclosureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateLegalDisclosureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateLegalDisclosureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateLegalDisclosureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateLegalDisclosureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateLegalDisclosureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateNegativeFeedbackRemovalResp parses an HTTP response from a CreateNegativeFeedbackRemovalWithResponse call
func ParseCreateNegativeFeedbackRemovalResp(rsp *http.Response) (*CreateNegativeFeedbackRemovalResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNegativeFeedbackRemovalResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateNegativeFeedbackRemovalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateNegativeFeedbackRemovalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateNegativeFeedbackRemovalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateNegativeFeedbackRemovalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateNegativeFeedbackRemovalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateNegativeFeedbackRemovalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateNegativeFeedbackRemovalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateNegativeFeedbackRemovalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateNegativeFeedbackRemovalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateUnexpectedProblemResp parses an HTTP response from a CreateUnexpectedProblemWithResponse call
func ParseCreateUnexpectedProblemResp(rsp *http.Response) (*CreateUnexpectedProblemResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUnexpectedProblemResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateUnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateUnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateUnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateUnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateUnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateUnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateUnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateUnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateUnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateWarrantyResp parses an HTTP response from a CreateWarrantyWithResponse call
func ParseCreateWarrantyResp(rsp *http.Response) (*CreateWarrantyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWarrantyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateWarrantyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateWarrantyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateWarrantyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateWarrantyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateWarrantyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateWarrantyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateWarrantyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateWarrantyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateWarrantyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
