// Package sellersv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sellersv1

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
)

// Defines values for AccountBusinessType.
const (
	AccountBusinessTypeCHARITY              AccountBusinessType = "CHARITY"
	AccountBusinessTypeCRAFTSMAN            AccountBusinessType = "CRAFTSMAN"
	AccountBusinessTypeINDIVIDUAL           AccountBusinessType = "INDIVIDUAL"
	AccountBusinessTypeNATURALPERSONCOMPANY AccountBusinessType = "NATURAL_PERSON_COMPANY"
	AccountBusinessTypePRIVATELIMITED       AccountBusinessType = "PRIVATE_LIMITED"
	AccountBusinessTypePUBLICLISTED         AccountBusinessType = "PUBLIC_LISTED"
	AccountBusinessTypeSOLEPROPRIETORSHIP   AccountBusinessType = "SOLE_PROPRIETORSHIP"
	AccountBusinessTypeSTATEOWNED           AccountBusinessType = "STATE_OWNED"
)

// Defines values for MarketplaceLevelAttributesListingStatus.
const (
	ACTIVE   MarketplaceLevelAttributesListingStatus = "ACTIVE"
	INACTIVE MarketplaceLevelAttributesListingStatus = "INACTIVE"
)

// Defines values for MarketplaceLevelAttributesSellingPlan.
const (
	MarketplaceLevelAttributesSellingPlanINDIVIDUAL   MarketplaceLevelAttributesSellingPlan = "INDIVIDUAL"
	MarketplaceLevelAttributesSellingPlanPROFESSIONAL MarketplaceLevelAttributesSellingPlan = "PROFESSIONAL"
)

// Account The response schema for the `getAccount` operation.
type Account struct {
	// Business Information about the seller's business. Certain fields may be omitted depending on the seller's `businessType`.
	Business *Business `json:"business,omitempty"`

	// BusinessType The type of business registered for the seller account.
	BusinessType AccountBusinessType `json:"businessType"`

	// MarketplaceLevelAttributes A list of details of the marketplaces where the seller account is active.
	MarketplaceLevelAttributes []MarketplaceLevelAttributes `json:"marketplaceLevelAttributes"`

	// PrimaryContact Information about the seller's primary contact.
	PrimaryContact *PrimaryContact `json:"primaryContact,omitempty"`
}

// AccountBusinessType The type of business registered for the seller account.
type AccountBusinessType string

// Address Represents an address
type Address struct {
	// AddressLine1 Street address information.
	AddressLine1 string `json:"addressLine1"`

	// AddressLine2 Additional street address information.
	AddressLine2 *string `json:"addressLine2,omitempty"`

	// City The city.
	City *string `json:"city,omitempty"`

	// CountryCode The country code in two-character ISO 3166-1 alpha-2 format.
	CountryCode string `json:"countryCode"`

	// PostalCode The postal code.
	PostalCode *string `json:"postalCode,omitempty"`

	// StateOrProvinceCode The state or province code.
	StateOrProvinceCode *string `json:"stateOrProvinceCode,omitempty"`
}

// Business Information about the seller's business. Certain fields may be omitted depending on the seller's `businessType`.
type Business struct {
	// CompanyRegistrationNumber The seller's company registration number, if applicable. This field will be absent for individual sellers and sole proprietorships.
	CompanyRegistrationNumber *string `json:"companyRegistrationNumber,omitempty"`

	// CompanyTaxIdentificationNumber The seller's company tax identification number, if applicable. This field will be present for certain business types only, such as sole proprietorships.
	CompanyTaxIdentificationNumber *string `json:"companyTaxIdentificationNumber,omitempty"`

	// Name The registered business name.
	Name string `json:"name"`

	// NonLatinName The non-Latin script version of the registered business name, if applicable.
	NonLatinName *string `json:"nonLatinName,omitempty"`

	// RegisteredBusinessAddress Represents an address
	RegisteredBusinessAddress Address `json:"registeredBusinessAddress"`
}

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional details that can help you understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition in a human-readable form.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList = []Error

// GetAccountResponse The response schema for the `getAccount` operation.
type GetAccountResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The response schema for the `getAccount` operation.
	Payload *Account `json:"payload,omitempty"`
}

// GetMarketplaceParticipationsResponse The response schema for the `getMarketplaceParticipations` operation.
type GetMarketplaceParticipationsResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload List of marketplace participations.
	Payload *MarketplaceParticipationList `json:"payload,omitempty"`
}

// Marketplace Information about an Amazon marketplace where a seller can list items and customers can view and purchase items.
type Marketplace struct {
	// CountryCode The ISO 3166-1 alpha-2 format country code of the marketplace.
	CountryCode string `json:"countryCode"`

	// DefaultCurrencyCode The ISO 4217 format currency code of the marketplace.
	DefaultCurrencyCode string `json:"defaultCurrencyCode"`

	// DefaultLanguageCode The ISO 639-1 format language code of the marketplace.
	DefaultLanguageCode string `json:"defaultLanguageCode"`

	// DomainName The domain name of the marketplace.
	DomainName string `json:"domainName"`

	// Id The encrypted marketplace value.
	Id string `json:"id"`

	// Name The marketplace name.
	Name string `json:"name"`
}

// MarketplaceLevelAttributes Attributes that define the seller's presence and status within a specific marketplace. These attributes include the marketplace details, store name, listing status, and the selling plan the seller is subscribed to.
type MarketplaceLevelAttributes struct {
	// ListingStatus The current status of the seller's listings.
	ListingStatus MarketplaceLevelAttributesListingStatus `json:"listingStatus"`

	// Marketplace Information about an Amazon marketplace where a seller can list items and customers can view and purchase items.
	Marketplace Marketplace `json:"marketplace"`

	// SellingPlan The selling plan details.
	SellingPlan MarketplaceLevelAttributesSellingPlan `json:"sellingPlan"`

	// StoreName The name of the seller's store as displayed in the marketplace.
	StoreName string `json:"storeName"`
}

// MarketplaceLevelAttributesListingStatus The current status of the seller's listings.
type MarketplaceLevelAttributesListingStatus string

// MarketplaceLevelAttributesSellingPlan The selling plan details.
type MarketplaceLevelAttributesSellingPlan string

// MarketplaceParticipation defines model for MarketplaceParticipation.
type MarketplaceParticipation struct {
	// Marketplace Information about an Amazon marketplace where a seller can list items and customers can view and purchase items.
	Marketplace Marketplace `json:"marketplace"`

	// Participation Information that is specific to a seller in a marketplace.
	Participation Participation `json:"participation"`
}

// MarketplaceParticipationList List of marketplace participations.
type MarketplaceParticipationList = []MarketplaceParticipation

// Participation Information that is specific to a seller in a marketplace.
type Participation struct {
	// HasSuspendedListings Specifies if the seller has suspended listings. `true` if the seller Listing Status is set to Inactive, otherwise `false`.
	HasSuspendedListings bool `json:"hasSuspendedListings"`

	// IsParticipating If `true`, the seller participates in the marketplace. Otherwise `false`.
	IsParticipating bool `json:"isParticipating"`
}

// PrimaryContact Information about the seller's primary contact.
type PrimaryContact struct {
	// Address Represents an address
	Address Address `json:"address"`

	// Name The full name of the seller's primary contact.
	Name string `json:"name"`

	// NonLatinName The non-Latin script version of the primary contact's name, if applicable.
	NonLatinName *string `json:"nonLatinName,omitempty"`
}

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccount request
	GetAccount(ctx context.Context) (*http.Response, error)

	// GetMarketplaceParticipations request
	GetMarketplaceParticipations(ctx context.Context) (*http.Response, error)
}

func (c *Client) GetAccount(ctx context.Context) (*http.Response, error) {
	req, err := NewGetAccountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetMarketplaceParticipations(ctx context.Context) (*http.Response, error) {
	req, err := NewGetMarketplaceParticipationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetAccountRequest generates requests for GetAccount
func NewGetAccountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sellers/v1/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMarketplaceParticipationsRequest generates requests for GetMarketplaceParticipations
func NewGetMarketplaceParticipationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sellers/v1/marketplaceParticipations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccountWithResponse request
	GetAccountWithResponse(ctx context.Context) (*GetAccountResp, error)

	// GetMarketplaceParticipationsWithResponse request
	GetMarketplaceParticipationsWithResponse(ctx context.Context) (*GetMarketplaceParticipationsResp, error)
}

type GetAccountResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAccountResponse
	JSON400      *GetAccountResponse
	JSON403      *GetAccountResponse
	JSON404      *GetAccountResponse
	JSON413      *GetAccountResponse
	JSON415      *GetAccountResponse
	JSON429      *GetAccountResponse
	JSON500      *GetAccountResponse
	JSON503      *GetAccountResponse
}

// Status returns HTTPResponse.Status
func (r GetAccountResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketplaceParticipationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMarketplaceParticipationsResponse
	JSON400      *GetMarketplaceParticipationsResponse
	JSON403      *GetMarketplaceParticipationsResponse
	JSON404      *GetMarketplaceParticipationsResponse
	JSON413      *GetMarketplaceParticipationsResponse
	JSON415      *GetMarketplaceParticipationsResponse
	JSON429      *GetMarketplaceParticipationsResponse
	JSON500      *GetMarketplaceParticipationsResponse
	JSON503      *GetMarketplaceParticipationsResponse
}

// Status returns HTTPResponse.Status
func (r GetMarketplaceParticipationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketplaceParticipationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccountWithResponse request returning *GetAccountResp
func (c *ClientWithResponses) GetAccountWithResponse(ctx context.Context) (*GetAccountResp, error) {
	rsp, err := c.GetAccount(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountResp(rsp)
}

// GetMarketplaceParticipationsWithResponse request returning *GetMarketplaceParticipationsResp
func (c *ClientWithResponses) GetMarketplaceParticipationsWithResponse(ctx context.Context) (*GetMarketplaceParticipationsResp, error) {
	rsp, err := c.GetMarketplaceParticipations(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketplaceParticipationsResp(rsp)
}

// ParseGetAccountResp parses an HTTP response from a GetAccountWithResponse call
func ParseGetAccountResp(rsp *http.Response) (*GetAccountResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetMarketplaceParticipationsResp parses an HTTP response from a GetMarketplaceParticipationsWithResponse call
func ParseGetMarketplaceParticipationsResp(rsp *http.Response) (*GetMarketplaceParticipationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketplaceParticipationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMarketplaceParticipationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetMarketplaceParticipationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetMarketplaceParticipationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetMarketplaceParticipationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest GetMarketplaceParticipationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetMarketplaceParticipationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetMarketplaceParticipationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetMarketplaceParticipationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetMarketplaceParticipationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
