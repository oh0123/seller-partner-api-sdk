// Package vendorinvoicesv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package vendorinvoicesv1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
	"time"

	"github.com/bytedance/sonic"
)

// Defines values for AdditionalDetailsType.
const (
	CartonCount AdditionalDetailsType = "CartonCount"
	OCR         AdditionalDetailsType = "OCR"
	SUR         AdditionalDetailsType = "SUR"
)

// Defines values for AllowanceDetailsType.
const (
	Defective             AllowanceDetailsType = "Defective"
	Discount              AllowanceDetailsType = "Discount"
	DiscountIncentive     AllowanceDetailsType = "DiscountIncentive"
	Promotional           AllowanceDetailsType = "Promotional"
	Special               AllowanceDetailsType = "Special"
	UnsaleableMerchandise AllowanceDetailsType = "UnsaleableMerchandise"
)

// Defines values for ChargeDetailsType.
const (
	CollectionAndRecyclingService  ChargeDetailsType = "CollectionAndRecyclingService"
	Duty                           ChargeDetailsType = "Duty"
	EnvironmentalProtectionService ChargeDetailsType = "EnvironmentalProtectionService"
	Freight                        ChargeDetailsType = "Freight"
	InsuranceFee                   ChargeDetailsType = "InsuranceFee"
	InsurancePlacementCost         ChargeDetailsType = "InsurancePlacementCost"
	Packing                        ChargeDetailsType = "Packing"
	Service                        ChargeDetailsType = "Service"
	SmallOrder                     ChargeDetailsType = "SmallOrder"
	SpecialHandlingService         ChargeDetailsType = "SpecialHandlingService"
	TaxCollectedAtSource           ChargeDetailsType = "TaxCollectedAtSource"
)

// Defines values for InvoiceInvoiceType.
const (
	InvoiceInvoiceTypeCreditNote InvoiceInvoiceType = "CreditNote"
	InvoiceInvoiceTypeInvoice    InvoiceInvoiceType = "Invoice"
)

// Defines values for ItemQuantityUnitOfMeasure.
const (
	Cases  ItemQuantityUnitOfMeasure = "Cases"
	Eaches ItemQuantityUnitOfMeasure = "Eaches"
)

// Defines values for PaymentTermsType.
const (
	Basic                          PaymentTermsType = "Basic"
	EndOfMonth                     PaymentTermsType = "EndOfMonth"
	FixedDate                      PaymentTermsType = "FixedDate"
	LetterofCredit                 PaymentTermsType = "LetterofCredit"
	PaymentDueUponReceiptOfInvoice PaymentTermsType = "PaymentDueUponReceiptOfInvoice"
	Proximo                        PaymentTermsType = "Proximo"
)

// Defines values for TaxDetailsTaxType.
const (
	TaxDetailsTaxTypeCESS            TaxDetailsTaxType = "CESS"
	TaxDetailsTaxTypeCGST            TaxDetailsTaxType = "CGST"
	TaxDetailsTaxTypeConsumption     TaxDetailsTaxType = "Consumption"
	TaxDetailsTaxTypeDomesticVAT     TaxDetailsTaxType = "DomesticVAT"
	TaxDetailsTaxTypeGST             TaxDetailsTaxType = "GST"
	TaxDetailsTaxTypeIGST            TaxDetailsTaxType = "IGST"
	TaxDetailsTaxTypeMutuallyDefined TaxDetailsTaxType = "MutuallyDefined"
	TaxDetailsTaxTypeMwSt            TaxDetailsTaxType = "MwSt."
	TaxDetailsTaxTypePST             TaxDetailsTaxType = "PST"
	TaxDetailsTaxTypeSGST            TaxDetailsTaxType = "SGST"
	TaxDetailsTaxTypeST              TaxDetailsTaxType = "ST"
	TaxDetailsTaxTypeTVA             TaxDetailsTaxType = "TVA"
	TaxDetailsTaxTypeUTGST           TaxDetailsTaxType = "UTGST"
	TaxDetailsTaxTypeVAT             TaxDetailsTaxType = "VAT"
)

// Defines values for TaxRegistrationDetailsTaxRegistrationType.
const (
	TaxRegistrationDetailsTaxRegistrationTypeGST TaxRegistrationDetailsTaxRegistrationType = "GST"
	TaxRegistrationDetailsTaxRegistrationTypeVAT TaxRegistrationDetailsTaxRegistrationType = "VAT"
)

// AdditionalDetails Additional information provided by the selling party for tax-related or any other purpose.
type AdditionalDetails struct {
	// Detail The detail of the additional information provided by the selling party.
	Detail string `json:"detail"`

	// LanguageCode The language code of the additional information detail.
	LanguageCode *string `json:"languageCode,omitempty"`

	// Type The type of the additional information provided by the selling party.
	Type AdditionalDetailsType `json:"type"`
}

// AdditionalDetailsType The type of the additional information provided by the selling party.
type AdditionalDetailsType string

// Address A physical address.
type Address struct {
	// AddressLine1 First line of street address.
	AddressLine1 string `json:"addressLine1"`

	// AddressLine2 Additional address information, if required.
	AddressLine2 *string `json:"addressLine2,omitempty"`

	// AddressLine3 Additional address information, if required.
	AddressLine3 *string `json:"addressLine3,omitempty"`

	// City The city where the person, business or institution is located.
	City *string `json:"city,omitempty"`

	// CountryCode The two digit country code. In ISO 3166-1 alpha-2 format.
	CountryCode string `json:"countryCode"`

	// County The county where person, business or institution is located.
	County *string `json:"county,omitempty"`

	// District The district where person, business or institution is located.
	District *string `json:"district,omitempty"`

	// Name The name of the person, business or institution at that address.
	Name string `json:"name"`

	// Phone The phone number of the person, business or institution located at that address.
	Phone *string `json:"phone,omitempty"`

	// PostalOrZipCode The postal or zip code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
	PostalOrZipCode *string `json:"postalOrZipCode,omitempty"`

	// StateOrRegion The state or region where person, business or institution is located.
	StateOrRegion *string `json:"stateOrRegion,omitempty"`
}

// AllowanceDetails Monetary and tax details of the allowance.
type AllowanceDetails struct {
	// AllowanceAmount An amount of money, including units in the form of currency.
	AllowanceAmount Money `json:"allowanceAmount"`

	// Description Description of the allowance.
	Description *string `json:"description,omitempty"`

	// TaxDetails Tax amount details applied on this allowance.
	TaxDetails *[]TaxDetails `json:"taxDetails,omitempty"`

	// Type Type of the allowance applied.
	Type AllowanceDetailsType `json:"type"`
}

// AllowanceDetailsType Type of the allowance applied.
type AllowanceDetailsType string

// ChargeDetails Monetary and tax details of the charge.
type ChargeDetails struct {
	// ChargeAmount An amount of money, including units in the form of currency.
	ChargeAmount Money `json:"chargeAmount"`

	// Description Description of the charge.
	Description *string `json:"description,omitempty"`

	// TaxDetails Tax amount details applied on this charge.
	TaxDetails *[]TaxDetails `json:"taxDetails,omitempty"`

	// Type Type of the charge applied.
	Type ChargeDetailsType `json:"type"`
}

// ChargeDetailsType Type of the charge applied.
type ChargeDetailsType string

// CreditNoteDetails References required in order to process a credit note. This information is required only if InvoiceType is CreditNote.
type CreditNoteDetails struct {
	// ConsignorsReferenceNumber Identifies the consignor reference number (VRET number), if generated by Amazon.
	ConsignorsReferenceNumber *string `json:"consignorsReferenceNumber,omitempty"`

	// CoopReferenceNumber Identifies the COOP reference used for COOP agreement. Failure to provide the COOP reference number or the Debit Note number may lead to a rejection of the Credit Note.
	CoopReferenceNumber *string `json:"coopReferenceNumber,omitempty"`

	// DebitNoteNumber Debit Note Number as generated by Amazon. Recommended for Returns and COOP Credit Notes.
	DebitNoteNumber *string `json:"debitNoteNumber,omitempty"`

	// GoodsReturnDate Defines a date and time according to ISO8601.
	GoodsReturnDate *DateTime `json:"goodsReturnDate,omitempty"`

	// ReferenceInvoiceNumber Original Invoice Number when sending a credit note relating to an existing invoice. One Invoice only to be processed per Credit Note. This is mandatory for AP Credit Notes.
	ReferenceInvoiceNumber *string `json:"referenceInvoiceNumber,omitempty"`

	// ReturnsReferenceNumber Identifies the Returns Notice Number. Mandatory for all Returns Credit Notes.
	ReturnsReferenceNumber *string `json:"returnsReferenceNumber,omitempty"`

	// RmaId Identifies the Returned Merchandise Authorization ID, if generated.
	RmaId *string `json:"rmaId,omitempty"`
}

// DateTime Defines a date and time according to ISO8601.
type DateTime = time.Time

// Decimal A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
type Decimal = string

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList = []Error

// Invoice defines model for Invoice.
type Invoice struct {
	// AdditionalDetails Additional details provided by the selling party, for tax related or other purposes.
	AdditionalDetails *[]AdditionalDetails `json:"additionalDetails,omitempty"`

	// AllowanceDetails Total allowance amount details for all line items.
	AllowanceDetails *[]AllowanceDetails  `json:"allowanceDetails,omitempty"`
	BillToParty      *PartyIdentification `json:"billToParty,omitempty"`

	// ChargeDetails Total charge amount details for all line items.
	ChargeDetails *[]ChargeDetails `json:"chargeDetails,omitempty"`

	// Date Defines a date and time according to ISO8601.
	Date DateTime `json:"date"`

	// Id Unique number relating to the charges defined in this document. This will be invoice number if the document type is Invoice or CreditNote number if the document type is Credit Note. Failure to provide this reference will result in a rejection.
	Id string `json:"id"`

	// InvoiceTotal An amount of money, including units in the form of currency.
	InvoiceTotal Money `json:"invoiceTotal"`

	// InvoiceType Identifies the type of invoice.
	InvoiceType InvoiceInvoiceType `json:"invoiceType"`

	// Items The list of invoice items.
	Items *[]InvoiceItem `json:"items,omitempty"`

	// PaymentTerms Terms of the payment for the invoice. The basis of the payment terms is the invoice date.
	PaymentTerms *PaymentTerms `json:"paymentTerms,omitempty"`

	// ReferenceNumber An additional unique reference number used for regulatory or other purposes.
	ReferenceNumber *string              `json:"referenceNumber,omitempty"`
	RemitToParty    PartyIdentification  `json:"remitToParty"`
	ShipFromParty   *PartyIdentification `json:"shipFromParty,omitempty"`
	ShipToParty     *PartyIdentification `json:"shipToParty,omitempty"`

	// TaxDetails Total tax amount details for all line items.
	TaxDetails *[]TaxDetails `json:"taxDetails,omitempty"`
}

// InvoiceInvoiceType Identifies the type of invoice.
type InvoiceInvoiceType string

// InvoiceItem Details of the item being invoiced.
type InvoiceItem struct {
	// AllowanceDetails Individual allowance details per line item.
	AllowanceDetails *[]AllowanceDetails `json:"allowanceDetails,omitempty"`

	// AmazonProductIdentifier Amazon Standard Identification Number (ASIN) of an item.
	AmazonProductIdentifier *string `json:"amazonProductIdentifier,omitempty"`

	// ChargeDetails Individual charge details per line item.
	ChargeDetails *[]ChargeDetails `json:"chargeDetails,omitempty"`

	// CreditNoteDetails References required in order to process a credit note. This information is required only if InvoiceType is CreditNote.
	CreditNoteDetails *CreditNoteDetails `json:"creditNoteDetails,omitempty"`

	// HsnCode HSN Tax code. The HSN number cannot contain alphabets.
	HsnCode *string `json:"hsnCode,omitempty"`

	// InvoicedQuantity Details of quantity.
	InvoicedQuantity ItemQuantity `json:"invoicedQuantity"`

	// ItemSequenceNumber Unique number related to this line item.
	ItemSequenceNumber int `json:"itemSequenceNumber"`

	// NetCost An amount of money, including units in the form of currency.
	NetCost Money `json:"netCost"`

	// PurchaseOrderNumber The Amazon purchase order number for this invoiced line item. Formatting Notes: 8-character alpha-numeric code. This value is mandatory only when invoiceType is Invoice, and is not required when invoiceType is CreditNote.
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// TaxDetails Individual tax details per line item.
	TaxDetails *[]TaxDetails `json:"taxDetails,omitempty"`

	// VendorProductIdentifier The vendor selected product identifier of the item. Should be the same as was provided in the purchase order.
	VendorProductIdentifier *string `json:"vendorProductIdentifier,omitempty"`
}

// ItemQuantity Details of quantity.
type ItemQuantity struct {
	// Amount Quantity of an item. This value should not be zero.
	Amount int `json:"amount"`

	// UnitOfMeasure Unit of measure for the quantity.
	UnitOfMeasure ItemQuantityUnitOfMeasure `json:"unitOfMeasure"`

	// UnitSize The case size, if the unit of measure value is Cases.
	UnitSize *int `json:"unitSize,omitempty"`
}

// ItemQuantityUnitOfMeasure Unit of measure for the quantity.
type ItemQuantityUnitOfMeasure string

// Money An amount of money, including units in the form of currency.
type Money struct {
	// Amount A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
	Amount *Decimal `json:"amount,omitempty"`

	// CurrencyCode Three-digit currency code in ISO 4217 format.
	CurrencyCode *string `json:"currencyCode,omitempty"`
}

// PartyIdentification defines model for PartyIdentification.
type PartyIdentification struct {
	// Address A physical address.
	Address *Address `json:"address,omitempty"`

	// PartyId Assigned identification for the party.
	PartyId string `json:"partyId"`

	// TaxRegistrationDetails Tax registration details of the party.
	TaxRegistrationDetails *[]TaxRegistrationDetails `json:"taxRegistrationDetails,omitempty"`
}

// PaymentTerms Terms of the payment for the invoice. The basis of the payment terms is the invoice date.
type PaymentTerms struct {
	// DiscountDueDays The number of calendar days from the Base date (Invoice date) until the discount is no longer valid.
	DiscountDueDays *float32 `json:"discountDueDays,omitempty"`

	// DiscountPercent A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
	DiscountPercent *Decimal `json:"discountPercent,omitempty"`

	// NetDueDays The number of calendar days from the base date (invoice date) until the total amount on the invoice is due.
	NetDueDays *float32 `json:"netDueDays,omitempty"`

	// Type The payment term type for the invoice.
	Type *PaymentTermsType `json:"type,omitempty"`
}

// PaymentTermsType The payment term type for the invoice.
type PaymentTermsType string

// SubmitInvoicesRequest The request schema for the submitInvoices operation.
type SubmitInvoicesRequest struct {
	Invoices *[]Invoice `json:"invoices,omitempty"`
}

// SubmitInvoicesResponse The response schema for the submitInvoices operation.
type SubmitInvoicesResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList     `json:"errors,omitempty"`
	Payload *TransactionId `json:"payload,omitempty"`
}

// TaxDetails Details of tax amount applied.
type TaxDetails struct {
	// TaxAmount An amount of money, including units in the form of currency.
	TaxAmount Money `json:"taxAmount"`

	// TaxRate A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
	TaxRate *Decimal `json:"taxRate,omitempty"`

	// TaxType Type of the tax applied.
	TaxType TaxDetailsTaxType `json:"taxType"`

	// TaxableAmount An amount of money, including units in the form of currency.
	TaxableAmount *Money `json:"taxableAmount,omitempty"`
}

// TaxDetailsTaxType Type of the tax applied.
type TaxDetailsTaxType string

// TaxRegistrationDetails Tax registration details of the entity.
type TaxRegistrationDetails struct {
	// TaxRegistrationNumber The tax registration number for the entity. For example, VAT ID, Consumption Tax ID.
	TaxRegistrationNumber string `json:"taxRegistrationNumber"`

	// TaxRegistrationType The tax registration type for the entity.
	TaxRegistrationType TaxRegistrationDetailsTaxRegistrationType `json:"taxRegistrationType"`
}

// TaxRegistrationDetailsTaxRegistrationType The tax registration type for the entity.
type TaxRegistrationDetailsTaxRegistrationType string

// TransactionId defines model for TransactionId.
type TransactionId struct {
	// TransactionId GUID to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.
	TransactionId *string `json:"transactionId,omitempty"`
}

// SubmitInvoicesJSONRequestBody defines body for SubmitInvoices for application/json ContentType.
type SubmitInvoicesJSONRequestBody = SubmitInvoicesRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SubmitInvoicesWithBody request with any body
	SubmitInvoicesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	SubmitInvoices(ctx context.Context, body SubmitInvoicesJSONRequestBody) (*http.Response, error)
}

func (c *Client) SubmitInvoicesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSubmitInvoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SubmitInvoices(ctx context.Context, body SubmitInvoicesJSONRequestBody) (*http.Response, error) {
	req, err := NewSubmitInvoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewSubmitInvoicesRequest calls the generic SubmitInvoices builder with application/json body
func NewSubmitInvoicesRequest(server string, body SubmitInvoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitInvoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitInvoicesRequestWithBody generates requests for SubmitInvoices with any type of body
func NewSubmitInvoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vendor/payments/v1/invoices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SubmitInvoicesWithBodyWithResponse request with any body
	SubmitInvoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*SubmitInvoicesResp, error)

	SubmitInvoicesWithResponse(ctx context.Context, body SubmitInvoicesJSONRequestBody) (*SubmitInvoicesResp, error)
}

type SubmitInvoicesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SubmitInvoicesResponse
	JSON400      *SubmitInvoicesResponse
	JSON403      *SubmitInvoicesResponse
	JSON404      *SubmitInvoicesResponse
	JSON413      *SubmitInvoicesResponse
	JSON415      *SubmitInvoicesResponse
	JSON429      *SubmitInvoicesResponse
	JSON500      *SubmitInvoicesResponse
	JSON503      *SubmitInvoicesResponse
}

// Status returns HTTPResponse.Status
func (r SubmitInvoicesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitInvoicesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SubmitInvoicesWithBodyWithResponse request with arbitrary body returning *SubmitInvoicesResp
func (c *ClientWithResponses) SubmitInvoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*SubmitInvoicesResp, error) {
	rsp, err := c.SubmitInvoicesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitInvoicesResp(rsp)
}

func (c *ClientWithResponses) SubmitInvoicesWithResponse(ctx context.Context, body SubmitInvoicesJSONRequestBody) (*SubmitInvoicesResp, error) {
	rsp, err := c.SubmitInvoices(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitInvoicesResp(rsp)
}

// ParseSubmitInvoicesResp parses an HTTP response from a SubmitInvoicesWithResponse call
func ParseSubmitInvoicesResp(rsp *http.Response) (*SubmitInvoicesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitInvoicesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SubmitInvoicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SubmitInvoicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SubmitInvoicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SubmitInvoicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest SubmitInvoicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SubmitInvoicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SubmitInvoicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SubmitInvoicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest SubmitInvoicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
