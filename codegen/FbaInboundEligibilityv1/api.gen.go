// Package fbainboundeligibilityv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package fbainboundeligibilityv1

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ItemEligibilityPreviewIneligibilityReasonList.
const (
	FBAINB0004          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0004"
	FBAINB0006          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0006"
	FBAINB0007          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0007"
	FBAINB0008          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0008"
	FBAINB0009          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0009"
	FBAINB0010          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0010"
	FBAINB0011          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0011"
	FBAINB0012          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0012"
	FBAINB0013          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0013"
	FBAINB0014          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0014"
	FBAINB0015          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0015"
	FBAINB0016          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0016"
	FBAINB0017          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0017"
	FBAINB0018          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0018"
	FBAINB0019          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0019"
	FBAINB0034          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0034"
	FBAINB0035          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0035"
	FBAINB0036          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0036"
	FBAINB0037          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0037"
	FBAINB0038          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0038"
	FBAINB0050          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0050"
	FBAINB0051          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0051"
	FBAINB0053          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0053"
	FBAINB0055          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0055"
	FBAINB0056          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0056"
	FBAINB0059          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0059"
	FBAINB0065          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0065"
	FBAINB0066          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0066"
	FBAINB0067          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0067"
	FBAINB0068          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0068"
	FBAINB0095          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0095"
	FBAINB0097          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0097"
	FBAINB0098          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0098"
	FBAINB0099          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0099"
	FBAINB0100          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0100"
	FBAINB0103          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0103"
	FBAINB0104          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0104"
	FBAINB0197          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0197"
	FBAINB0342          ItemEligibilityPreviewIneligibilityReasonList = "FBA_INB_0342"
	UNKNOWNINBERRORCODE ItemEligibilityPreviewIneligibilityReasonList = "UNKNOWN_INB_ERROR_CODE"
)

// Defines values for ItemEligibilityPreviewProgram.
const (
	ItemEligibilityPreviewProgramCOMMINGLING ItemEligibilityPreviewProgram = "COMMINGLING"
	ItemEligibilityPreviewProgramINBOUND     ItemEligibilityPreviewProgram = "INBOUND"
)

// Defines values for GetItemEligibilityPreviewParamsProgram.
const (
	GetItemEligibilityPreviewParamsProgramCOMMINGLING GetItemEligibilityPreviewParamsProgram = "COMMINGLING"
	GetItemEligibilityPreviewParamsProgramINBOUND     GetItemEligibilityPreviewParamsProgram = "INBOUND"
)

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional information that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition in a human-readable form.
	Message *string `json:"message,omitempty"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList = []Error

// GetItemEligibilityPreviewResponse The response schema for the getItemEligibilityPreview operation.
type GetItemEligibilityPreviewResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The response object which contains the ASIN, marketplaceId if required, eligibility program, the eligibility status (boolean), and a list of ineligibility reason codes.
	Payload *ItemEligibilityPreview `json:"payload,omitempty"`
}

// ItemEligibilityPreview The response object which contains the ASIN, marketplaceId if required, eligibility program, the eligibility status (boolean), and a list of ineligibility reason codes.
type ItemEligibilityPreview struct {
	// Asin The ASIN for which eligibility was determined.
	Asin string `json:"asin"`

	// IneligibilityReasonList Potential Ineligibility Reason Codes.
	IneligibilityReasonList *[]ItemEligibilityPreviewIneligibilityReasonList `json:"ineligibilityReasonList,omitempty"`

	// IsEligibleForProgram Indicates if the item is eligible for the program.
	IsEligibleForProgram bool `json:"isEligibleForProgram"`

	// MarketplaceId The marketplace for which eligibility was determined.
	MarketplaceId *string `json:"marketplaceId,omitempty"`

	// Program The program for which eligibility was determined.
	Program ItemEligibilityPreviewProgram `json:"program"`
}

// ItemEligibilityPreviewIneligibilityReasonList Potential Ineligibility Reason Codes.
type ItemEligibilityPreviewIneligibilityReasonList string

// ItemEligibilityPreviewProgram The program for which eligibility was determined.
type ItemEligibilityPreviewProgram string

// GetItemEligibilityPreviewParams defines parameters for GetItemEligibilityPreview.
type GetItemEligibilityPreviewParams struct {
	// MarketplaceIds The identifier for the marketplace in which you want to determine eligibility. Required only when program=INBOUND.
	MarketplaceIds *[]string `form:"marketplaceIds,omitempty" json:"marketplaceIds,omitempty"`

	// Asin The ASIN of the item for which you want an eligibility preview.
	Asin string `form:"asin" json:"asin"`

	// Program The program that you want to check eligibility against.
	Program GetItemEligibilityPreviewParamsProgram `form:"program" json:"program"`
}

// GetItemEligibilityPreviewParamsProgram defines parameters for GetItemEligibilityPreview.
type GetItemEligibilityPreviewParamsProgram string

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetItemEligibilityPreview request
	GetItemEligibilityPreview(ctx context.Context, params *GetItemEligibilityPreviewParams) (*http.Response, error)
}

func (c *Client) GetItemEligibilityPreview(ctx context.Context, params *GetItemEligibilityPreviewParams) (*http.Response, error) {
	req, err := NewGetItemEligibilityPreviewRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetItemEligibilityPreviewRequest generates requests for GetItemEligibilityPreview
func NewGetItemEligibilityPreviewRequest(server string, params *GetItemEligibilityPreviewParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/inbound/v1/eligibility/itemPreview")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MarketplaceIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, *params.MarketplaceIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asin", runtime.ParamLocationQuery, params.Asin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "program", runtime.ParamLocationQuery, params.Program); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetItemEligibilityPreviewWithResponse request
	GetItemEligibilityPreviewWithResponse(ctx context.Context, params *GetItemEligibilityPreviewParams) (*GetItemEligibilityPreviewResp, error)
}

type GetItemEligibilityPreviewResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetItemEligibilityPreviewResponse
	JSON400      *GetItemEligibilityPreviewResponse
	JSON401      *GetItemEligibilityPreviewResponse
	JSON403      *GetItemEligibilityPreviewResponse
	JSON404      *GetItemEligibilityPreviewResponse
	JSON429      *GetItemEligibilityPreviewResponse
	JSON500      *GetItemEligibilityPreviewResponse
	JSON503      *GetItemEligibilityPreviewResponse
}

// Status returns HTTPResponse.Status
func (r GetItemEligibilityPreviewResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemEligibilityPreviewResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetItemEligibilityPreviewWithResponse request returning *GetItemEligibilityPreviewResp
func (c *ClientWithResponses) GetItemEligibilityPreviewWithResponse(ctx context.Context, params *GetItemEligibilityPreviewParams) (*GetItemEligibilityPreviewResp, error) {
	rsp, err := c.GetItemEligibilityPreview(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetItemEligibilityPreviewResp(rsp)
}

// ParseGetItemEligibilityPreviewResp parses an HTTP response from a GetItemEligibilityPreviewWithResponse call
func ParseGetItemEligibilityPreviewResp(rsp *http.Response) (*GetItemEligibilityPreviewResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetItemEligibilityPreviewResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetItemEligibilityPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetItemEligibilityPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetItemEligibilityPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetItemEligibilityPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetItemEligibilityPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetItemEligibilityPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetItemEligibilityPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetItemEligibilityPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
