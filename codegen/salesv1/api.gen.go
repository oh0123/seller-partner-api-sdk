// Package salesv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package salesv1

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for GetOrderMetricsParamsGranularity.
const (
	Day   GetOrderMetricsParamsGranularity = "Day"
	Hour  GetOrderMetricsParamsGranularity = "Hour"
	Month GetOrderMetricsParamsGranularity = "Month"
	Total GetOrderMetricsParamsGranularity = "Total"
	Week  GetOrderMetricsParamsGranularity = "Week"
	Year  GetOrderMetricsParamsGranularity = "Year"
)

// Defines values for GetOrderMetricsParamsBuyerType.
const (
	All GetOrderMetricsParamsBuyerType = "All"
	B2B GetOrderMetricsParamsBuyerType = "B2B"
	B2C GetOrderMetricsParamsBuyerType = "B2C"
)

// Defines values for GetOrderMetricsParamsFirstDayOfWeek.
const (
	Monday GetOrderMetricsParamsFirstDayOfWeek = "Monday"
	Sunday GetOrderMetricsParamsFirstDayOfWeek = "Sunday"
)

// Defines values for GetOrderMetricsParamsAmazonProgram.
const (
	AmazonHaul GetOrderMetricsParamsAmazonProgram = "AmazonHaul"
)

// Decimal A decimal number with no loss of precision. Useful when precision loss is unnaceptable, as with currencies. Follows RFC7159 for number representation.
type Decimal = string

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occured.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition in a human-readable form.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList = []Error

// GetOrderMetricsResponse The response schema for the getOrderMetrics operation.
type GetOrderMetricsResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload A set of order metrics, each scoped to a particular time interval.
	Payload *OrderMetricsList `json:"payload,omitempty"`
}

// Money The currency type and the amount.
type Money struct {
	// Amount A decimal number with no loss of precision. Useful when precision loss is unnaceptable, as with currencies. Follows RFC7159 for number representation.
	Amount Decimal `json:"amount"`

	// CurrencyCode Three-digit currency code. In ISO 4217 format.
	CurrencyCode string `json:"currencyCode"`
}

// OrderMetricsInterval Contains order metrics.
type OrderMetricsInterval struct {
	// AverageUnitPrice The currency type and the amount.
	AverageUnitPrice Money `json:"averageUnitPrice"`

	// Interval The interval of time based on requested granularity (ex. Hour, Day, etc.) If this is the first or the last interval from the list, it might contain incomplete data if the requested interval doesn't align with the requested granularity (ex. request interval 2018-09-01T02:00:00Z--2018-09-04T19:00:00Z and granularity day will result in Sept 1st UTC day and Sept 4th UTC days having partial data).
	Interval string `json:"interval"`

	// OrderCount The number of orders based on the specified filters.
	OrderCount int `json:"orderCount"`

	// OrderItemCount The number of order items based on the specified filters.
	OrderItemCount int `json:"orderItemCount"`

	// TotalSales The currency type and the amount.
	TotalSales Money `json:"totalSales"`

	// UnitCount The number of units in orders based on the specified filters.
	UnitCount int `json:"unitCount"`
}

// OrderMetricsList A set of order metrics, each scoped to a particular time interval.
type OrderMetricsList = []OrderMetricsInterval

// GetOrderMetricsParams defines parameters for GetOrderMetrics.
type GetOrderMetricsParams struct {
	// MarketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	//
	// For example, ATVPDKIKX0DER indicates the US marketplace.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`

	// Interval A time interval used for selecting order metrics. This takes the form of two dates separated by two hyphens (first date is inclusive; second date is exclusive). Dates are in ISO8601 format and must represent absolute time (either Z notation or offset notation). Example: 2018-09-01T00:00:00-07:00--2018-09-04T00:00:00-07:00 requests order metrics for Sept 1st, 2nd and 3rd in the -07:00 zone.
	Interval string `form:"interval" json:"interval"`

	// GranularityTimeZone An IANA-compatible time zone for determining the day boundary. Required when specifying a granularity value greater than Hour. The granularityTimeZone value must align with the offset of the specified interval value. For example, if the interval value uses Z notation, then granularityTimeZone must be UTC. If the interval value uses an offset, then granularityTimeZone must be an IANA-compatible time zone that matches the offset. Example: US/Pacific to compute day boundaries, accounting for daylight time savings, for US/Pacific zone.
	GranularityTimeZone *string `form:"granularityTimeZone,omitempty" json:"granularityTimeZone,omitempty"`

	// Granularity The granularity of the grouping of order metrics, based on a unit of time. Specifying granularity=Hour results in a successful request only if the interval specified is less than or equal to 30 days from now. For all other granularities, the interval specified must be less or equal to 2 years from now. Specifying granularity=Total results in order metrics that are aggregated over the entire interval that you specify. If the interval start and end date donâ€™t align with the specified granularity, the head and tail end of the response interval will contain partial data. Example: Day to get a daily breakdown of the request interval, where the day boundary is defined by the granularityTimeZone.
	Granularity GetOrderMetricsParamsGranularity `form:"granularity" json:"granularity"`

	// BuyerType Filters the results by the buyer type that you specify, B2B (business to business) or B2C (business to customer). Example: B2B, if you want the response to include order metrics for only B2B buyers.
	BuyerType *GetOrderMetricsParamsBuyerType `form:"buyerType,omitempty" json:"buyerType,omitempty"`

	// FulfillmentNetwork Filters the results by the fulfillment network that you specify, MFN (merchant fulfillment network) or AFN (Amazon fulfillment network). Do not include this filter if you want the response to include order metrics for all fulfillment networks. Example: AFN, if you want the response to include order metrics for only Amazon fulfillment network.
	FulfillmentNetwork *string `form:"fulfillmentNetwork,omitempty" json:"fulfillmentNetwork,omitempty"`

	// FirstDayOfWeek Specifies the day that the week starts on when granularity=Week, either Monday or Sunday. Default: Monday. Example: Sunday, if you want the week to start on a Sunday.
	FirstDayOfWeek *GetOrderMetricsParamsFirstDayOfWeek `form:"firstDayOfWeek,omitempty" json:"firstDayOfWeek,omitempty"`

	// Asin Filters the results by the ASIN that you specify. Specifying both ASIN and SKU returns an error. Do not include this filter if you want the response to include order metrics for all ASINs. Example: B0792R1RSN, if you want the response to include order metrics for only ASIN B0792R1RSN.
	Asin *string `form:"asin,omitempty" json:"asin,omitempty"`

	// Sku Filters the results by the SKU that you specify. Specifying both ASIN and SKU returns an error. Do not include this filter if you want the response to include order metrics for all SKUs. Example: TestSKU, if you want the response to include order metrics for only SKU TestSKU.
	Sku *string `form:"sku,omitempty" json:"sku,omitempty"`

	// AmazonProgram Filters the results by the Amazon program that you specify. Do not include this filter if you want the response to include order metrics for all programs. **Example:** `AmazonHaul` returns order metrics for the Amazon Haul program only.
	AmazonProgram *GetOrderMetricsParamsAmazonProgram `form:"amazonProgram,omitempty" json:"amazonProgram,omitempty"`
}

// GetOrderMetricsParamsGranularity defines parameters for GetOrderMetrics.
type GetOrderMetricsParamsGranularity string

// GetOrderMetricsParamsBuyerType defines parameters for GetOrderMetrics.
type GetOrderMetricsParamsBuyerType string

// GetOrderMetricsParamsFirstDayOfWeek defines parameters for GetOrderMetrics.
type GetOrderMetricsParamsFirstDayOfWeek string

// GetOrderMetricsParamsAmazonProgram defines parameters for GetOrderMetrics.
type GetOrderMetricsParamsAmazonProgram string

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetOrderMetrics request
	GetOrderMetrics(ctx context.Context, params *GetOrderMetricsParams) (*http.Response, error)
}

func (c *Client) GetOrderMetrics(ctx context.Context, params *GetOrderMetricsParams) (*http.Response, error) {
	req, err := NewGetOrderMetricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetOrderMetricsRequest generates requests for GetOrderMetrics
func NewGetOrderMetricsRequest(server string, params *GetOrderMetricsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sales/v1/orderMetrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interval", runtime.ParamLocationQuery, params.Interval); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if params.GranularityTimeZone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "granularityTimeZone", runtime.ParamLocationQuery, *params.GranularityTimeZone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "granularity", runtime.ParamLocationQuery, params.Granularity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if params.BuyerType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "buyerType", runtime.ParamLocationQuery, *params.BuyerType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.FulfillmentNetwork != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fulfillmentNetwork", runtime.ParamLocationQuery, *params.FulfillmentNetwork); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.FirstDayOfWeek != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstDayOfWeek", runtime.ParamLocationQuery, *params.FirstDayOfWeek); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Asin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asin", runtime.ParamLocationQuery, *params.Asin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Sku != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sku", runtime.ParamLocationQuery, *params.Sku); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AmazonProgram != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amazonProgram", runtime.ParamLocationQuery, *params.AmazonProgram); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetOrderMetricsWithResponse request
	GetOrderMetricsWithResponse(ctx context.Context, params *GetOrderMetricsParams) (*GetOrderMetricsResp, error)
}

type GetOrderMetricsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetOrderMetricsResponse
	JSON400      *GetOrderMetricsResponse
	JSON403      *GetOrderMetricsResponse
	JSON404      *GetOrderMetricsResponse
	JSON413      *GetOrderMetricsResponse
	JSON415      *GetOrderMetricsResponse
	JSON429      *GetOrderMetricsResponse
	JSON500      *GetOrderMetricsResponse
	JSON503      *GetOrderMetricsResponse
}

// Status returns HTTPResponse.Status
func (r GetOrderMetricsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderMetricsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetOrderMetricsWithResponse request returning *GetOrderMetricsResp
func (c *ClientWithResponses) GetOrderMetricsWithResponse(ctx context.Context, params *GetOrderMetricsParams) (*GetOrderMetricsResp, error) {
	rsp, err := c.GetOrderMetrics(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderMetricsResp(rsp)
}

// ParseGetOrderMetricsResp parses an HTTP response from a GetOrderMetricsWithResponse call
func ParseGetOrderMetricsResp(rsp *http.Response) (*GetOrderMetricsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderMetricsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetOrderMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetOrderMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetOrderMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetOrderMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest GetOrderMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetOrderMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetOrderMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetOrderMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetOrderMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
