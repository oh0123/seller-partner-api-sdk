// Package vehicles20241101 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package vehicles20241101

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for EngineOutputUnit.
const (
	HORSEPOWER EngineOutputUnit = "HORSEPOWER"
	KILOWATT   EngineOutputUnit = "KILOWATT"
)

// Defines values for VehicleStandard.
const (
	AMAZONID VehicleStandard = "AMAZON_ID"
	KTYPE    VehicleStandard = "KTYPE"
)

// Defines values for VehicleStatusInCatalog.
const (
	ACTIVE  VehicleStatusInCatalog = "ACTIVE"
	DELETED VehicleStatusInCatalog = "DELETED"
)

// Defines values for GetVehiclesParamsVehicleType.
const (
	CAR       GetVehiclesParamsVehicleType = "CAR"
	MOTORBIKE GetVehiclesParamsVehicleType = "MOTORBIKE"
)

// EngineOutput Engine power output of vehicle.
type EngineOutput struct {
	// Unit Unit for measuring engine power.
	Unit EngineOutputUnit `json:"unit"`

	// Value Engine power value in specified unit.
	Value float32 `json:"value"`
}

// EngineOutputUnit Unit for measuring engine power.
type EngineOutputUnit string

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList struct {
	// Errors array of errors
	Errors []Error `json:"errors"`
}

// Month Month in MM format
type Month = float32

// MonthAndYear Represents a month in a specific year.
type MonthAndYear struct {
	// Month Month in MM format
	Month *Month `json:"month,omitempty"`

	// Year Year in YYYY format
	Year *Year `json:"year,omitempty"`
}

// Pagination When a request produces a response that exceeds the `pageSize`, pagination occurs. This means the response is divided into individual pages. To retrieve the next page or the previous page, you must pass the `nextToken` value or the `previousToken` value as the `pageToken` parameter in the next request. When you receive the last page, there will be no `nextToken` key in the pagination object.
type Pagination struct {
	// NextToken A token that can be used to fetch the next page.
	NextToken *string `json:"nextToken,omitempty"`

	// PreviousToken A token that can be used to fetch the previous page.
	PreviousToken *string `json:"previousToken,omitempty"`
}

// Vehicle Combinations of attributes and unique identifier that represents a vehicle in vehicle list.
type Vehicle struct {
	// BodyStyle Body style of vehicle (example: Hatchback, Cabriolet).
	BodyStyle *string `json:"bodyStyle,omitempty"`

	// DriveType Drive type of vehicle(example: Rear wheel drive).
	DriveType *string `json:"driveType,omitempty"`

	// Energy Energy Source for the vehicle(example: Petrol)
	Energy *string `json:"energy,omitempty"`

	// EngineOutput Engine output of vehicle.
	EngineOutput *[]EngineOutput `json:"engineOutput,omitempty"`

	// Identifiers Identifiers that can be used to identify the vehicle uniquely
	Identifiers []VehicleIdentifiers `json:"identifiers"`

	// LastProcessedDate The date on which the vehicle was last updated, in ISO-8601 date/time format.
	LastProcessedDate *string `json:"lastProcessedDate,omitempty"`

	// Make Vehicle Brand.
	Make string `json:"make"`

	// ManufacturingStartDate Represents a month in a specific year.
	ManufacturingStartDate *MonthAndYear `json:"manufacturingStartDate,omitempty"`

	// ManufacturingStopDate Represents a month in a specific year.
	ManufacturingStopDate *MonthAndYear `json:"manufacturingStopDate,omitempty"`

	// Model Specific model of a vehicle.
	Model string `json:"model"`

	// Status Status of vehicle in Amazon's catalog.
	Status *VehicleStatusInCatalog `json:"status,omitempty"`

	// VariantName Name of the vehicle variant.
	VariantName *string `json:"variantName,omitempty"`
}

// VehicleIdentifiers Combination of vehicle standard and id that can uniquely identify a vehicle from Amazon's catalog.
type VehicleIdentifiers struct {
	// Standard Standard followed to uniquely identify a vehicle.
	Standard VehicleStandard `json:"standard"`

	// Value Id that can uniquely identify a vehicle based the vehicle identification standard.
	Value string `json:"value"`
}

// VehicleStandard Standard followed to uniquely identify a vehicle.
type VehicleStandard string

// VehicleStatusInCatalog Status of vehicle in Amazon's catalog.
type VehicleStatusInCatalog string

// VehiclesResponse Get paginated list of vehicle from Amazon's catalog
type VehiclesResponse struct {
	// Pagination When a request produces a response that exceeds the `pageSize`, pagination occurs. This means the response is divided into individual pages. To retrieve the next page or the previous page, you must pass the `nextToken` value or the `previousToken` value as the `pageToken` parameter in the next request. When you receive the last page, there will be no `nextToken` key in the pagination object.
	Pagination *Pagination `json:"pagination,omitempty"`

	// Vehicles List of vehicles from Amazon's catalog.
	Vehicles []Vehicle `json:"vehicles"`
}

// Year Year in YYYY format
type Year = float32

// GetVehiclesParams defines parameters for GetVehicles.
type GetVehiclesParams struct {
	// PageToken A token to fetch a certain page when there are multiple pages worth of results.
	PageToken *string `form:"pageToken,omitempty" json:"pageToken,omitempty"`

	// MarketplaceId An identifier for the marketplace in which the resource operates.
	MarketplaceId string `form:"marketplaceId" json:"marketplaceId"`

	// VehicleType An identifier for vehicle type.
	VehicleType GetVehiclesParamsVehicleType `form:"vehicleType" json:"vehicleType"`

	// UpdatedAfter Date in ISO 8601 format, if provided only vehicles which are modified/added to Amazon's catalog after this date will be returned.
	UpdatedAfter *string `form:"updatedAfter,omitempty" json:"updatedAfter,omitempty"`
}

// GetVehiclesParamsVehicleType defines parameters for GetVehicles.
type GetVehiclesParamsVehicleType string

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetVehicles request
	GetVehicles(ctx context.Context, params *GetVehiclesParams) (*http.Response, error)
}

func (c *Client) GetVehicles(ctx context.Context, params *GetVehiclesParams) (*http.Response, error) {
	req, err := NewGetVehiclesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetVehiclesRequest generates requests for GetVehicles
func NewGetVehiclesRequest(server string, params *GetVehiclesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalog/2024-11-01/automotive/vehicles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vehicleType", runtime.ParamLocationQuery, params.VehicleType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if params.UpdatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, *params.UpdatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetVehiclesWithResponse request
	GetVehiclesWithResponse(ctx context.Context, params *GetVehiclesParams) (*GetVehiclesResp, error)
}

type GetVehiclesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VehiclesResponse
	JSON400      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r GetVehiclesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVehiclesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetVehiclesWithResponse request returning *GetVehiclesResp
func (c *ClientWithResponses) GetVehiclesWithResponse(ctx context.Context, params *GetVehiclesParams) (*GetVehiclesResp, error) {
	rsp, err := c.GetVehicles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetVehiclesResp(rsp)
}

// ParseGetVehiclesResp parses an HTTP response from a GetVehiclesWithResponse call
func ParseGetVehiclesResp(rsp *http.Response) (*GetVehiclesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVehiclesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VehiclesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
