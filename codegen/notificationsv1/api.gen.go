// Package notificationsv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package notificationsv1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/bytedance/sonic"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AggregationTimePeriod.
const (
	FiveMinutes AggregationTimePeriod = "FiveMinutes"
	TenMinutes  AggregationTimePeriod = "TenMinutes"
)

// Defines values for EventFilterEventFilterType.
const (
	ANYOFFERCHANGED EventFilterEventFilterType = "ANY_OFFER_CHANGED"
	ORDERCHANGE     EventFilterEventFilterType = "ORDER_CHANGE"
)

// Defines values for OrderChangeTypeEnum.
const (
	BuyerRequestedChange OrderChangeTypeEnum = "BuyerRequestedChange"
	OrderStatusChange    OrderChangeTypeEnum = "OrderStatusChange"
)

// AggregationFilter A filter used to select the aggregation time period at which to send notifications (for example: limit to one notification every five minutes for high frequency notifications).
type AggregationFilter struct {
	// AggregationSettings A container that holds all of the necessary properties to configure the aggregation of notifications.
	AggregationSettings *AggregationSettings `json:"aggregationSettings,omitempty"`
}

// AggregationSettings A container that holds all of the necessary properties to configure the aggregation of notifications.
type AggregationSettings struct {
	// AggregationTimePeriod The supported aggregation time periods. For example, if FiveMinutes is the value chosen, and 50 price updates occur for an ASIN within 5 minutes, Amazon will send only two notifications; one for the first event, and then a subsequent notification 5 minutes later with the final end state of the data. The 48 interim events will be dropped.
	AggregationTimePeriod AggregationTimePeriod `json:"aggregationTimePeriod"`
}

// AggregationTimePeriod The supported aggregation time periods. For example, if FiveMinutes is the value chosen, and 50 price updates occur for an ASIN within 5 minutes, Amazon will send only two notifications; one for the first event, and then a subsequent notification 5 minutes later with the final end state of the data. The 48 interim events will be dropped.
type AggregationTimePeriod string

// CreateDestinationRequest The request schema for the `createDestination` operation.
type CreateDestinationRequest struct {
	// Name A developer-defined name to help identify this destination.
	Name string `json:"name"`

	// ResourceSpecification The information required to create a destination resource. Applications should use one resource type (sqs or eventBridge) per destination.
	ResourceSpecification DestinationResourceSpecification `json:"resourceSpecification"`
}

// CreateDestinationResponse The response schema for the createDestination operation.
type CreateDestinationResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload Information about the destination created when you call the `createDestination` operation.
	Payload *Destination `json:"payload,omitempty"`
}

// CreateSubscriptionRequest The request schema for the `createSubscription` operation.
type CreateSubscriptionRequest struct {
	// DestinationId The identifier for the destination where notifications will be delivered.
	DestinationId string `json:"destinationId"`

	// PayloadVersion The version of the payload object to be used in the notification.
	PayloadVersion string `json:"payloadVersion"`

	// ProcessingDirective Additional information passed to the subscription to control the processing of notifications. For example, you can use an `eventFilter` to customize your subscription to send notifications for only the specified `marketplaceId`s, or select the aggregation time period at which to send notifications (for example: limit to one notification every five minutes for high frequency notifications). The specific features available vary depending on the `notificationType`.
	//
	// This feature is currently only supported by the `ANY_OFFER_CHANGED` and `ORDER_CHANGE` `notificationType`s.
	ProcessingDirective *ProcessingDirective `json:"processingDirective,omitempty"`
}

// CreateSubscriptionResponse The response schema for the `createSubscription` operation.
type CreateSubscriptionResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload Information about the subscription.
	Payload *Subscription `json:"payload,omitempty"`
}

// DeleteDestinationResponse The response schema for the `deleteDestination` operation.
type DeleteDestinationResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// DeleteSubscriptionByIdResponse The response schema for the `deleteSubscriptionById` operation.
type DeleteSubscriptionByIdResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// Destination Information about the destination created when you call the `createDestination` operation.
type Destination struct {
	// DestinationId The destination identifier generated when you created the destination.
	DestinationId string `json:"destinationId"`

	// Name The developer-defined name for this destination.
	Name string `json:"name"`

	// Resource The destination resource types.
	Resource DestinationResource `json:"resource"`
}

// DestinationList A list of destinations.
type DestinationList = []Destination

// DestinationResource The destination resource types.
type DestinationResource struct {
	// EventBridge The Amazon EventBridge destination.
	EventBridge *EventBridgeResource `json:"eventBridge,omitempty"`

	// Sqs The information required to create an Amazon Simple Queue Service (Amazon SQS) queue destination.
	Sqs *SqsResource `json:"sqs,omitempty"`
}

// DestinationResourceSpecification The information required to create a destination resource. Applications should use one resource type (sqs or eventBridge) per destination.
type DestinationResourceSpecification struct {
	// EventBridge The information required to create an Amazon EventBridge destination.
	EventBridge *EventBridgeResourceSpecification `json:"eventBridge,omitempty"`

	// Sqs The information required to create an Amazon Simple Queue Service (Amazon SQS) queue destination.
	Sqs *SqsResource `json:"sqs,omitempty"`
}

// Error An error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList = []Error

// EventBridgeResource The Amazon EventBridge destination.
type EventBridgeResource struct {
	// AccountId The identifier for the AWS account that is responsible for charges related to receiving notifications.
	AccountId string `json:"accountId"`

	// Name The name of the partner event source associated with the destination.
	Name string `json:"name"`

	// Region The AWS region in which you receive the notifications. For AWS regions that are supported in Amazon EventBridge, refer to [Amazon EventBridge endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/ev.html).
	Region string `json:"region"`
}

// EventBridgeResourceSpecification The information required to create an Amazon EventBridge destination.
type EventBridgeResourceSpecification struct {
	// AccountId The identifier for the AWS account that is responsible for charges related to receiving notifications.
	AccountId string `json:"accountId"`

	// Region The AWS region in which you will be receiving the notifications.
	Region string `json:"region"`
}

// EventFilter defines model for EventFilter.
type EventFilter struct {
	// AggregationSettings A container that holds all of the necessary properties to configure the aggregation of notifications.
	AggregationSettings *AggregationSettings `json:"aggregationSettings,omitempty"`

	// EventFilterType An `eventFilterType` value that is supported by the specific `notificationType`. This is used by the subscription service to determine the type of event filter. Refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values) to determine if an `eventFilterType` is supported.
	EventFilterType EventFilterEventFilterType `json:"eventFilterType"`

	// MarketplaceIds A list of marketplace identifiers to subscribe to (for example: ATVPDKIKX0DER). To receive notifications in every marketplace, do not provide this list.
	MarketplaceIds *MarketplaceIds `json:"marketplaceIds,omitempty"`

	// OrderChangeTypes A list of order change types to subscribe to (for example: `BuyerRequestedChange`). To receive notifications of all change types, do not provide this list.
	OrderChangeTypes *OrderChangeTypes `json:"orderChangeTypes,omitempty"`
}

// EventFilterEventFilterType An `eventFilterType` value that is supported by the specific `notificationType`. This is used by the subscription service to determine the type of event filter. Refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values) to determine if an `eventFilterType` is supported.
type EventFilterEventFilterType string

// GetDestinationResponse The response schema for the `getDestination` operation.
type GetDestinationResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload Information about the destination created when you call the `createDestination` operation.
	Payload *Destination `json:"payload,omitempty"`
}

// GetDestinationsResponse The response schema for the `getDestinations` operation.
type GetDestinationsResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload A list of destinations.
	Payload *DestinationList `json:"payload,omitempty"`
}

// GetSubscriptionByIdResponse The response schema for the `getSubscriptionById` operation.
type GetSubscriptionByIdResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload Information about the subscription.
	Payload *Subscription `json:"payload,omitempty"`
}

// GetSubscriptionResponse The response schema for the `getSubscription` operation.
type GetSubscriptionResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload Information about the subscription.
	Payload *Subscription `json:"payload,omitempty"`
}

// MarketplaceFilter An event filter to customize your subscription to send notifications for only the specified `marketplaceId`s.
type MarketplaceFilter struct {
	// MarketplaceIds A list of marketplace identifiers to subscribe to (for example: ATVPDKIKX0DER). To receive notifications in every marketplace, do not provide this list.
	MarketplaceIds *MarketplaceIds `json:"marketplaceIds,omitempty"`
}

// MarketplaceIds A list of marketplace identifiers to subscribe to (for example: ATVPDKIKX0DER). To receive notifications in every marketplace, do not provide this list.
type MarketplaceIds = []string

// OrderChangeTypeEnum The supported order change type of ORDER_CHANGE notification.
type OrderChangeTypeEnum string

// OrderChangeTypeFilter An event filter to customize your subscription to send notifications for only the specified `orderChangeType`.
type OrderChangeTypeFilter struct {
	// OrderChangeTypes A list of order change types to subscribe to (for example: `BuyerRequestedChange`). To receive notifications of all change types, do not provide this list.
	OrderChangeTypes *OrderChangeTypes `json:"orderChangeTypes,omitempty"`
}

// OrderChangeTypes A list of order change types to subscribe to (for example: `BuyerRequestedChange`). To receive notifications of all change types, do not provide this list.
type OrderChangeTypes = []OrderChangeTypeEnum

// ProcessingDirective Additional information passed to the subscription to control the processing of notifications. For example, you can use an `eventFilter` to customize your subscription to send notifications for only the specified `marketplaceId`s, or select the aggregation time period at which to send notifications (for example: limit to one notification every five minutes for high frequency notifications). The specific features available vary depending on the `notificationType`.
//
// This feature is currently only supported by the `ANY_OFFER_CHANGED` and `ORDER_CHANGE` `notificationType`s.
type ProcessingDirective struct {
	// EventFilter A `notificationType` specific filter. This object contains all of the currently available filters and properties that you can use to define a `notificationType` specific filter.
	EventFilter *EventFilter `json:"eventFilter,omitempty"`
}

// SqsResource The information required to create an Amazon Simple Queue Service (Amazon SQS) queue destination.
type SqsResource struct {
	// Arn The Amazon Resource Name (ARN) associated with the SQS queue.
	Arn string `json:"arn"`
}

// Subscription Information about the subscription.
type Subscription struct {
	// DestinationId The identifier for the destination where notifications will be delivered.
	DestinationId string `json:"destinationId"`

	// PayloadVersion The version of the payload object to be used in the notification.
	PayloadVersion string `json:"payloadVersion"`

	// ProcessingDirective Additional information passed to the subscription to control the processing of notifications. For example, you can use an `eventFilter` to customize your subscription to send notifications for only the specified `marketplaceId`s, or select the aggregation time period at which to send notifications (for example: limit to one notification every five minutes for high frequency notifications). The specific features available vary depending on the `notificationType`.
	//
	// This feature is currently only supported by the `ANY_OFFER_CHANGED` and `ORDER_CHANGE` `notificationType`s.
	ProcessingDirective *ProcessingDirective `json:"processingDirective,omitempty"`

	// SubscriptionId The subscription identifier generated when the subscription is created.
	SubscriptionId string `json:"subscriptionId"`
}

// NotificationType defines model for NotificationType.
type NotificationType = string

// GetSubscriptionParams defines parameters for GetSubscription.
type GetSubscriptionParams struct {
	// PayloadVersion The version of the payload object to be used in the notification.
	PayloadVersion *string `form:"payloadVersion,omitempty" json:"payloadVersion,omitempty"`
}

// CreateDestinationJSONRequestBody defines body for CreateDestination for application/json ContentType.
type CreateDestinationJSONRequestBody = CreateDestinationRequest

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = CreateSubscriptionRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDestinations request
	GetDestinations(ctx context.Context) (*http.Response, error)

	// CreateDestinationWithBody request with any body
	CreateDestinationWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateDestination(ctx context.Context, body CreateDestinationJSONRequestBody) (*http.Response, error)

	// DeleteDestination request
	DeleteDestination(ctx context.Context, destinationId string) (*http.Response, error)

	// GetDestination request
	GetDestination(ctx context.Context, destinationId string) (*http.Response, error)

	// GetSubscription request
	GetSubscription(ctx context.Context, notificationType NotificationType, params *GetSubscriptionParams) (*http.Response, error)

	// CreateSubscriptionWithBody request with any body
	CreateSubscriptionWithBody(ctx context.Context, notificationType NotificationType, contentType string, body io.Reader) (*http.Response, error)

	CreateSubscription(ctx context.Context, notificationType NotificationType, body CreateSubscriptionJSONRequestBody) (*http.Response, error)

	// DeleteSubscriptionById request
	DeleteSubscriptionById(ctx context.Context, notificationType NotificationType, subscriptionId string) (*http.Response, error)

	// GetSubscriptionById request
	GetSubscriptionById(ctx context.Context, notificationType NotificationType, subscriptionId string) (*http.Response, error)
}

func (c *Client) GetDestinations(ctx context.Context) (*http.Response, error) {
	req, err := NewGetDestinationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDestinationWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateDestinationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDestination(ctx context.Context, body CreateDestinationJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDestinationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteDestination(ctx context.Context, destinationId string) (*http.Response, error) {
	req, err := NewDeleteDestinationRequest(c.Server, destinationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetDestination(ctx context.Context, destinationId string) (*http.Response, error) {
	req, err := NewGetDestinationRequest(c.Server, destinationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetSubscription(ctx context.Context, notificationType NotificationType, params *GetSubscriptionParams) (*http.Response, error) {
	req, err := NewGetSubscriptionRequest(c.Server, notificationType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSubscriptionWithBody(ctx context.Context, notificationType NotificationType, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSubscriptionRequestWithBody(c.Server, notificationType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSubscription(ctx context.Context, notificationType NotificationType, body CreateSubscriptionJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSubscriptionRequest(c.Server, notificationType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSubscriptionById(ctx context.Context, notificationType NotificationType, subscriptionId string) (*http.Response, error) {
	req, err := NewDeleteSubscriptionByIdRequest(c.Server, notificationType, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetSubscriptionById(ctx context.Context, notificationType NotificationType, subscriptionId string) (*http.Response, error) {
	req, err := NewGetSubscriptionByIdRequest(c.Server, notificationType, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetDestinationsRequest generates requests for GetDestinations
func NewGetDestinationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/v1/destinations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDestinationRequest calls the generic CreateDestination builder with application/json body
func NewCreateDestinationRequest(server string, body CreateDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDestinationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDestinationRequestWithBody generates requests for CreateDestination with any type of body
func NewCreateDestinationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/v1/destinations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDestinationRequest generates requests for DeleteDestination
func NewDeleteDestinationRequest(server string, destinationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "destinationId", runtime.ParamLocationPath, destinationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/v1/destinations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDestinationRequest generates requests for GetDestination
func NewGetDestinationRequest(server string, destinationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "destinationId", runtime.ParamLocationPath, destinationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/v1/destinations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubscriptionRequest generates requests for GetSubscription
func NewGetSubscriptionRequest(server string, notificationType NotificationType, params *GetSubscriptionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notificationType", runtime.ParamLocationPath, notificationType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/v1/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PayloadVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payloadVersion", runtime.ParamLocationQuery, *params.PayloadVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSubscriptionRequest calls the generic CreateSubscription builder with application/json body
func NewCreateSubscriptionRequest(server string, notificationType NotificationType, body CreateSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSubscriptionRequestWithBody(server, notificationType, "application/json", bodyReader)
}

// NewCreateSubscriptionRequestWithBody generates requests for CreateSubscription with any type of body
func NewCreateSubscriptionRequestWithBody(server string, notificationType NotificationType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notificationType", runtime.ParamLocationPath, notificationType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/v1/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSubscriptionByIdRequest generates requests for DeleteSubscriptionById
func NewDeleteSubscriptionByIdRequest(server string, notificationType NotificationType, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notificationType", runtime.ParamLocationPath, notificationType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/v1/subscriptions/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubscriptionByIdRequest generates requests for GetSubscriptionById
func NewGetSubscriptionByIdRequest(server string, notificationType NotificationType, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notificationType", runtime.ParamLocationPath, notificationType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/v1/subscriptions/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDestinationsWithResponse request
	GetDestinationsWithResponse(ctx context.Context) (*GetDestinationsResp, error)

	// CreateDestinationWithBodyWithResponse request with any body
	CreateDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateDestinationResp, error)

	CreateDestinationWithResponse(ctx context.Context, body CreateDestinationJSONRequestBody) (*CreateDestinationResp, error)

	// DeleteDestinationWithResponse request
	DeleteDestinationWithResponse(ctx context.Context, destinationId string) (*DeleteDestinationResp, error)

	// GetDestinationWithResponse request
	GetDestinationWithResponse(ctx context.Context, destinationId string) (*GetDestinationResp, error)

	// GetSubscriptionWithResponse request
	GetSubscriptionWithResponse(ctx context.Context, notificationType NotificationType, params *GetSubscriptionParams) (*GetSubscriptionResp, error)

	// CreateSubscriptionWithBodyWithResponse request with any body
	CreateSubscriptionWithBodyWithResponse(ctx context.Context, notificationType NotificationType, contentType string, body io.Reader) (*CreateSubscriptionResp, error)

	CreateSubscriptionWithResponse(ctx context.Context, notificationType NotificationType, body CreateSubscriptionJSONRequestBody) (*CreateSubscriptionResp, error)

	// DeleteSubscriptionByIdWithResponse request
	DeleteSubscriptionByIdWithResponse(ctx context.Context, notificationType NotificationType, subscriptionId string) (*DeleteSubscriptionByIdResp, error)

	// GetSubscriptionByIdWithResponse request
	GetSubscriptionByIdWithResponse(ctx context.Context, notificationType NotificationType, subscriptionId string) (*GetSubscriptionByIdResp, error)
}

type GetDestinationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDestinationsResponse
	JSON400      *GetDestinationsResponse
	JSON403      *GetDestinationsResponse
	JSON404      *GetDestinationsResponse
	JSON409      *GetDestinationsResponse
	JSON413      *GetDestinationsResponse
	JSON415      *GetDestinationsResponse
	JSON429      *GetDestinationsResponse
	JSON500      *GetDestinationsResponse
	JSON503      *GetDestinationsResponse
}

// Status returns HTTPResponse.Status
func (r GetDestinationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDestinationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDestinationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateDestinationResponse
	JSON400      *CreateDestinationResponse
	JSON403      *CreateDestinationResponse
	JSON404      *CreateDestinationResponse
	JSON409      *CreateDestinationResponse
	JSON413      *CreateDestinationResponse
	JSON415      *CreateDestinationResponse
	JSON429      *CreateDestinationResponse
	JSON500      *CreateDestinationResponse
	JSON503      *CreateDestinationResponse
}

// Status returns HTTPResponse.Status
func (r CreateDestinationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDestinationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDestinationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteDestinationResponse
	JSON400      *DeleteDestinationResponse
	JSON403      *DeleteDestinationResponse
	JSON404      *DeleteDestinationResponse
	JSON409      *DeleteDestinationResponse
	JSON413      *DeleteDestinationResponse
	JSON415      *DeleteDestinationResponse
	JSON429      *DeleteDestinationResponse
	JSON500      *DeleteDestinationResponse
	JSON503      *DeleteDestinationResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDestinationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDestinationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDestinationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDestinationResponse
	JSON400      *GetDestinationResponse
	JSON403      *GetDestinationResponse
	JSON404      *GetDestinationResponse
	JSON409      *GetDestinationResponse
	JSON413      *GetDestinationResponse
	JSON415      *GetDestinationResponse
	JSON429      *GetDestinationResponse
	JSON500      *GetDestinationResponse
	JSON503      *GetDestinationResponse
}

// Status returns HTTPResponse.Status
func (r GetDestinationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDestinationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubscriptionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSubscriptionResponse
	JSON400      *GetSubscriptionResponse
	JSON403      *GetSubscriptionResponse
	JSON404      *GetSubscriptionResponse
	JSON413      *GetSubscriptionResponse
	JSON415      *GetSubscriptionResponse
	JSON429      *GetSubscriptionResponse
	JSON500      *GetSubscriptionResponse
	JSON503      *GetSubscriptionResponse
}

// Status returns HTTPResponse.Status
func (r GetSubscriptionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubscriptionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSubscriptionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateSubscriptionResponse
	JSON400      *CreateSubscriptionResponse
	JSON403      *CreateSubscriptionResponse
	JSON404      *CreateSubscriptionResponse
	JSON409      *CreateSubscriptionResponse
	JSON413      *CreateSubscriptionResponse
	JSON415      *CreateSubscriptionResponse
	JSON429      *CreateSubscriptionResponse
	JSON500      *CreateSubscriptionResponse
	JSON503      *CreateSubscriptionResponse
}

// Status returns HTTPResponse.Status
func (r CreateSubscriptionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSubscriptionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSubscriptionByIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteSubscriptionByIdResponse
	JSON400      *DeleteSubscriptionByIdResponse
	JSON403      *DeleteSubscriptionByIdResponse
	JSON404      *DeleteSubscriptionByIdResponse
	JSON409      *DeleteSubscriptionByIdResponse
	JSON413      *DeleteSubscriptionByIdResponse
	JSON415      *DeleteSubscriptionByIdResponse
	JSON429      *DeleteSubscriptionByIdResponse
	JSON500      *DeleteSubscriptionByIdResponse
	JSON503      *DeleteSubscriptionByIdResponse
}

// Status returns HTTPResponse.Status
func (r DeleteSubscriptionByIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSubscriptionByIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubscriptionByIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSubscriptionByIdResponse
	JSON400      *GetSubscriptionByIdResponse
	JSON403      *GetSubscriptionByIdResponse
	JSON404      *GetSubscriptionResponse
	JSON409      *GetSubscriptionByIdResponse
	JSON413      *GetSubscriptionByIdResponse
	JSON415      *GetSubscriptionByIdResponse
	JSON429      *GetSubscriptionByIdResponse
	JSON500      *GetSubscriptionByIdResponse
	JSON503      *GetSubscriptionByIdResponse
}

// Status returns HTTPResponse.Status
func (r GetSubscriptionByIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubscriptionByIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDestinationsWithResponse request returning *GetDestinationsResp
func (c *ClientWithResponses) GetDestinationsWithResponse(ctx context.Context) (*GetDestinationsResp, error) {
	rsp, err := c.GetDestinations(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationsResp(rsp)
}

// CreateDestinationWithBodyWithResponse request with arbitrary body returning *CreateDestinationResp
func (c *ClientWithResponses) CreateDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateDestinationResp, error) {
	rsp, err := c.CreateDestinationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDestinationResp(rsp)
}

func (c *ClientWithResponses) CreateDestinationWithResponse(ctx context.Context, body CreateDestinationJSONRequestBody) (*CreateDestinationResp, error) {
	rsp, err := c.CreateDestination(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDestinationResp(rsp)
}

// DeleteDestinationWithResponse request returning *DeleteDestinationResp
func (c *ClientWithResponses) DeleteDestinationWithResponse(ctx context.Context, destinationId string) (*DeleteDestinationResp, error) {
	rsp, err := c.DeleteDestination(ctx, destinationId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDestinationResp(rsp)
}

// GetDestinationWithResponse request returning *GetDestinationResp
func (c *ClientWithResponses) GetDestinationWithResponse(ctx context.Context, destinationId string) (*GetDestinationResp, error) {
	rsp, err := c.GetDestination(ctx, destinationId)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationResp(rsp)
}

// GetSubscriptionWithResponse request returning *GetSubscriptionResp
func (c *ClientWithResponses) GetSubscriptionWithResponse(ctx context.Context, notificationType NotificationType, params *GetSubscriptionParams) (*GetSubscriptionResp, error) {
	rsp, err := c.GetSubscription(ctx, notificationType, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSubscriptionResp(rsp)
}

// CreateSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateSubscriptionResp
func (c *ClientWithResponses) CreateSubscriptionWithBodyWithResponse(ctx context.Context, notificationType NotificationType, contentType string, body io.Reader) (*CreateSubscriptionResp, error) {
	rsp, err := c.CreateSubscriptionWithBody(ctx, notificationType, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubscriptionResp(rsp)
}

func (c *ClientWithResponses) CreateSubscriptionWithResponse(ctx context.Context, notificationType NotificationType, body CreateSubscriptionJSONRequestBody) (*CreateSubscriptionResp, error) {
	rsp, err := c.CreateSubscription(ctx, notificationType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubscriptionResp(rsp)
}

// DeleteSubscriptionByIdWithResponse request returning *DeleteSubscriptionByIdResp
func (c *ClientWithResponses) DeleteSubscriptionByIdWithResponse(ctx context.Context, notificationType NotificationType, subscriptionId string) (*DeleteSubscriptionByIdResp, error) {
	rsp, err := c.DeleteSubscriptionById(ctx, notificationType, subscriptionId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSubscriptionByIdResp(rsp)
}

// GetSubscriptionByIdWithResponse request returning *GetSubscriptionByIdResp
func (c *ClientWithResponses) GetSubscriptionByIdWithResponse(ctx context.Context, notificationType NotificationType, subscriptionId string) (*GetSubscriptionByIdResp, error) {
	rsp, err := c.GetSubscriptionById(ctx, notificationType, subscriptionId)
	if err != nil {
		return nil, err
	}
	return ParseGetSubscriptionByIdResp(rsp)
}

// ParseGetDestinationsResp parses an HTTP response from a GetDestinationsWithResponse call
func ParseGetDestinationsResp(rsp *http.Response) (*GetDestinationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDestinationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDestinationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetDestinationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetDestinationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetDestinationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest GetDestinationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest GetDestinationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetDestinationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetDestinationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetDestinationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetDestinationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateDestinationResp parses an HTTP response from a CreateDestinationWithResponse call
func ParseCreateDestinationResp(rsp *http.Response) (*CreateDestinationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDestinationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest CreateDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteDestinationResp parses an HTTP response from a DeleteDestinationWithResponse call
func ParseDeleteDestinationResp(rsp *http.Response) (*DeleteDestinationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDestinationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DeleteDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest DeleteDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DeleteDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest DeleteDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest DeleteDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest DeleteDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest DeleteDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest DeleteDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest DeleteDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetDestinationResp parses an HTTP response from a GetDestinationWithResponse call
func ParseGetDestinationResp(rsp *http.Response) (*GetDestinationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDestinationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest GetDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest GetDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetSubscriptionResp parses an HTTP response from a GetSubscriptionWithResponse call
func ParseGetSubscriptionResp(rsp *http.Response) (*GetSubscriptionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubscriptionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest GetSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateSubscriptionResp parses an HTTP response from a CreateSubscriptionWithResponse call
func ParseCreateSubscriptionResp(rsp *http.Response) (*CreateSubscriptionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSubscriptionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest CreateSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteSubscriptionByIdResp parses an HTTP response from a DeleteSubscriptionByIdWithResponse call
func ParseDeleteSubscriptionByIdResp(rsp *http.Response) (*DeleteSubscriptionByIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSubscriptionByIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DeleteSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest DeleteSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DeleteSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest DeleteSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest DeleteSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest DeleteSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest DeleteSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest DeleteSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest DeleteSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetSubscriptionByIdResp parses an HTTP response from a GetSubscriptionByIdWithResponse call
func ParseGetSubscriptionByIdResp(rsp *http.Response) (*GetSubscriptionByIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubscriptionByIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest GetSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest GetSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetSubscriptionByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
