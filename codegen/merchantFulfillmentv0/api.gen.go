// Package merchantfulfillmentv0 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package merchantfulfillmentv0

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for CarrierWillPickUpOption.
const (
	CarrierWillPickUpOptionCarrierWillPickUp  CarrierWillPickUpOption = "CarrierWillPickUp"
	CarrierWillPickUpOptionNoPreference       CarrierWillPickUpOption = "NoPreference"
	CarrierWillPickUpOptionShipperWillDropOff CarrierWillPickUpOption = "ShipperWillDropOff"
)

// Defines values for DangerousGoodsDetailsPackingGroup.
const (
	I   DangerousGoodsDetailsPackingGroup = "I"
	II  DangerousGoodsDetailsPackingGroup = "II"
	III DangerousGoodsDetailsPackingGroup = "III"
)

// Defines values for DangerousGoodsDetailsPackingInstruction.
const (
	PI965SECTIONIA DangerousGoodsDetailsPackingInstruction = "PI965_SECTION_IA"
	PI965SECTIONIB DangerousGoodsDetailsPackingInstruction = "PI965_SECTION_IB"
	PI965SECTIONII DangerousGoodsDetailsPackingInstruction = "PI965_SECTION_II"
	PI966SECTIONI  DangerousGoodsDetailsPackingInstruction = "PI966_SECTION_I"
	PI966SECTIONII DangerousGoodsDetailsPackingInstruction = "PI966_SECTION_II"
	PI967SECTIONI  DangerousGoodsDetailsPackingInstruction = "PI967_SECTION_I"
	PI967SECTIONII DangerousGoodsDetailsPackingInstruction = "PI967_SECTION_II"
	PI968SECTIONIA DangerousGoodsDetailsPackingInstruction = "PI968_SECTION_IA"
	PI968SECTIONIB DangerousGoodsDetailsPackingInstruction = "PI968_SECTION_IB"
	PI969SECTIONI  DangerousGoodsDetailsPackingInstruction = "PI969_SECTION_I"
	PI969SECTIONII DangerousGoodsDetailsPackingInstruction = "PI969_SECTION_II"
	PI970SECTIONI  DangerousGoodsDetailsPackingInstruction = "PI970_SECTION_I"
	PI970SECTIONII DangerousGoodsDetailsPackingInstruction = "PI970_SECTION_II"
)

// Defines values for DeliveryExperienceOption.
const (
	DeliveryExperienceOptionDeliveryConfirmationWithAdultSignature DeliveryExperienceOption = "DeliveryConfirmationWithAdultSignature"
	DeliveryExperienceOptionDeliveryConfirmationWithSignature      DeliveryExperienceOption = "DeliveryConfirmationWithSignature"
	DeliveryExperienceOptionDeliveryConfirmationWithoutSignature   DeliveryExperienceOption = "DeliveryConfirmationWithoutSignature"
	DeliveryExperienceOptionNoPreference                           DeliveryExperienceOption = "NoPreference"
	DeliveryExperienceOptionNoTracking                             DeliveryExperienceOption = "NoTracking"
)

// Defines values for DeliveryExperienceType.
const (
	DeliveryConfirmationWithAdultSignature DeliveryExperienceType = "DeliveryConfirmationWithAdultSignature"
	DeliveryConfirmationWithSignature      DeliveryExperienceType = "DeliveryConfirmationWithSignature"
	DeliveryConfirmationWithoutSignature   DeliveryExperienceType = "DeliveryConfirmationWithoutSignature"
	NoTracking                             DeliveryExperienceType = "NoTracking"
)

// Defines values for FileType.
const (
	Applicationpdf FileType = "application/pdf"
	Applicationzpl FileType = "application/zpl"
	Imagepng       FileType = "image/png"
)

// Defines values for HazmatType.
const (
	LQHazmat HazmatType = "LQHazmat"
	None     HazmatType = "None"
)

// Defines values for InputTargetType.
const (
	ITEMLEVEL     InputTargetType = "ITEM_LEVEL"
	SHIPMENTLEVEL InputTargetType = "SHIPMENT_LEVEL"
)

// Defines values for LabelFormat.
const (
	PDF                    LabelFormat = "PDF"
	PNG                    LabelFormat = "PNG"
	ShippingServiceDefault LabelFormat = "ShippingServiceDefault"
	ZPL203                 LabelFormat = "ZPL203"
	ZPL300                 LabelFormat = "ZPL300"
)

// Defines values for LiquidVolumeUnit.
const (
	C    LiquidVolumeUnit = "C"
	FLOZ LiquidVolumeUnit = "FL_OZ"
	GAL  LiquidVolumeUnit = "GAL"
	L    LiquidVolumeUnit = "L"
	ML   LiquidVolumeUnit = "ML"
	PT   LiquidVolumeUnit = "PT"
	QT   LiquidVolumeUnit = "QT"
)

// Defines values for PredefinedPackageDimensions.
const (
	FedExBox10kg                  PredefinedPackageDimensions = "FedEx_Box_10kg"
	FedExBox25kg                  PredefinedPackageDimensions = "FedEx_Box_25kg"
	FedExBoxExtraLarge1           PredefinedPackageDimensions = "FedEx_Box_Extra_Large_1"
	FedExBoxExtraLarge2           PredefinedPackageDimensions = "FedEx_Box_Extra_Large_2"
	FedExBoxLarge1                PredefinedPackageDimensions = "FedEx_Box_Large_1"
	FedExBoxLarge2                PredefinedPackageDimensions = "FedEx_Box_Large_2"
	FedExBoxMedium1               PredefinedPackageDimensions = "FedEx_Box_Medium_1"
	FedExBoxMedium2               PredefinedPackageDimensions = "FedEx_Box_Medium_2"
	FedExBoxSmall1                PredefinedPackageDimensions = "FedEx_Box_Small_1"
	FedExBoxSmall2                PredefinedPackageDimensions = "FedEx_Box_Small_2"
	FedExEnvelope                 PredefinedPackageDimensions = "FedEx_Envelope"
	FedExPaddedPak                PredefinedPackageDimensions = "FedEx_Padded_Pak"
	FedExPak1                     PredefinedPackageDimensions = "FedEx_Pak_1"
	FedExPak2                     PredefinedPackageDimensions = "FedEx_Pak_2"
	FedExTube                     PredefinedPackageDimensions = "FedEx_Tube"
	FedExXLPak                    PredefinedPackageDimensions = "FedEx_XL_Pak"
	UPSBox10kg                    PredefinedPackageDimensions = "UPS_Box_10kg"
	UPSBox25kg                    PredefinedPackageDimensions = "UPS_Box_25kg"
	UPSExpressBox                 PredefinedPackageDimensions = "UPS_Express_Box"
	UPSExpressBoxLarge            PredefinedPackageDimensions = "UPS_Express_Box_Large"
	UPSExpressBoxMedium           PredefinedPackageDimensions = "UPS_Express_Box_Medium"
	UPSExpressBoxSmall            PredefinedPackageDimensions = "UPS_Express_Box_Small"
	UPSExpressEnvelope            PredefinedPackageDimensions = "UPS_Express_Envelope"
	UPSExpressHardPak             PredefinedPackageDimensions = "UPS_Express_Hard_Pak"
	UPSExpressLegalEnvelope       PredefinedPackageDimensions = "UPS_Express_Legal_Envelope"
	UPSExpressPak                 PredefinedPackageDimensions = "UPS_Express_Pak"
	UPSExpressTube                PredefinedPackageDimensions = "UPS_Express_Tube"
	UPSLaboratoryPak              PredefinedPackageDimensions = "UPS_Laboratory_Pak"
	UPSPadPak                     PredefinedPackageDimensions = "UPS_Pad_Pak"
	UPSPallet                     PredefinedPackageDimensions = "UPS_Pallet"
	USPSCard                      PredefinedPackageDimensions = "USPS_Card"
	USPSFlat                      PredefinedPackageDimensions = "USPS_Flat"
	USPSFlatRateCardboardEnvelope PredefinedPackageDimensions = "USPS_FlatRateCardboardEnvelope"
	USPSFlatRateEnvelope          PredefinedPackageDimensions = "USPS_FlatRateEnvelope"
	USPSFlatRateGiftCardEnvelope  PredefinedPackageDimensions = "USPS_FlatRateGiftCardEnvelope"
	USPSFlatRateLegalEnvelope     PredefinedPackageDimensions = "USPS_FlatRateLegalEnvelope"
	USPSFlatRatePaddedEnvelope    PredefinedPackageDimensions = "USPS_FlatRatePaddedEnvelope"
	USPSFlatRateWindowEnvelope    PredefinedPackageDimensions = "USPS_FlatRateWindowEnvelope"
	USPSLargeFlatRateBoardGameBox PredefinedPackageDimensions = "USPS_LargeFlatRateBoardGameBox"
	USPSLargeFlatRateBox          PredefinedPackageDimensions = "USPS_LargeFlatRateBox"
	USPSLetter                    PredefinedPackageDimensions = "USPS_Letter"
	USPSMediumFlatRateBox1        PredefinedPackageDimensions = "USPS_MediumFlatRateBox1"
	USPSMediumFlatRateBox2        PredefinedPackageDimensions = "USPS_MediumFlatRateBox2"
	USPSRegionalRateBoxA1         PredefinedPackageDimensions = "USPS_RegionalRateBoxA1"
	USPSRegionalRateBoxA2         PredefinedPackageDimensions = "USPS_RegionalRateBoxA2"
	USPSRegionalRateBoxB1         PredefinedPackageDimensions = "USPS_RegionalRateBoxB1"
	USPSRegionalRateBoxB2         PredefinedPackageDimensions = "USPS_RegionalRateBoxB2"
	USPSRegionalRateBoxC          PredefinedPackageDimensions = "USPS_RegionalRateBoxC"
	USPSSmallFlatRateBox          PredefinedPackageDimensions = "USPS_SmallFlatRateBox"
	USPSSmallFlatRateEnvelope     PredefinedPackageDimensions = "USPS_SmallFlatRateEnvelope"
)

// Defines values for ShipmentStatus.
const (
	Purchased      ShipmentStatus = "Purchased"
	RefundApplied  ShipmentStatus = "RefundApplied"
	RefundPending  ShipmentStatus = "RefundPending"
	RefundRejected ShipmentStatus = "RefundRejected"
)

// Defines values for StandardIdForLabel.
const (
	StandardIdForLabelAmazonOrderId StandardIdForLabel = "AmazonOrderId"
)

// Defines values for UnitOfLength.
const (
	Centimeters UnitOfLength = "centimeters"
	Inches      UnitOfLength = "inches"
)

// Defines values for UnitOfWeight.
const (
	G  UnitOfWeight = "g"
	Oz UnitOfWeight = "oz"
)

// AdditionalInputs Maps the additional seller input to the definition. The key to the map is the field name.
type AdditionalInputs struct {
	// AdditionalInputFieldName The field name.
	AdditionalInputFieldName *string `json:"AdditionalInputFieldName,omitempty"`

	// SellerInputDefinition Specifies characteristics that apply to a seller input.
	SellerInputDefinition *SellerInputDefinition `json:"SellerInputDefinition,omitempty"`
}

// AdditionalInputsList A list of additional inputs.
type AdditionalInputsList = []AdditionalInputs

// AdditionalSellerInput Additional information required to purchase shipping.
type AdditionalSellerInput struct {
	// DataType The data type of the additional information.
	DataType *string `json:"DataType,omitempty"`

	// ValueAsAddress The postal address information.
	ValueAsAddress *Address `json:"ValueAsAddress,omitempty"`

	// ValueAsBoolean The value when the data type is boolean.
	ValueAsBoolean *bool `json:"ValueAsBoolean,omitempty"`

	// ValueAsCurrency Currency type and amount.
	ValueAsCurrency *CurrencyAmount `json:"ValueAsCurrency,omitempty"`

	// ValueAsDimension The length.
	ValueAsDimension *Length `json:"ValueAsDimension,omitempty"`

	// ValueAsInteger The value when the data type is integer.
	ValueAsInteger *int `json:"ValueAsInteger,omitempty"`

	// ValueAsString The value when the data type is string.
	ValueAsString *string `json:"ValueAsString,omitempty"`

	// ValueAsTimestamp Date-time formatted timestamp.
	ValueAsTimestamp *Timestamp `json:"ValueAsTimestamp,omitempty"`

	// ValueAsWeight The weight.
	ValueAsWeight *Weight `json:"ValueAsWeight,omitempty"`
}

// AdditionalSellerInputs An additional set of seller inputs required to purchase shipping.
type AdditionalSellerInputs struct {
	// AdditionalInputFieldName The name of the additional input field.
	AdditionalInputFieldName string `json:"AdditionalInputFieldName"`

	// AdditionalSellerInput Additional information required to purchase shipping.
	AdditionalSellerInput AdditionalSellerInput `json:"AdditionalSellerInput"`
}

// AdditionalSellerInputsList A list of additional seller input pairs required to purchase shipping.
type AdditionalSellerInputsList = []AdditionalSellerInputs

// Address The postal address information.
type Address struct {
	// AddressLine1 The street address information.
	AddressLine1 AddressLine1 `json:"AddressLine1"`

	// AddressLine2 Additional street address information.
	AddressLine2 *AddressLine2 `json:"AddressLine2,omitempty"`

	// AddressLine3 Additional street address information.
	AddressLine3 *AddressLine3 `json:"AddressLine3,omitempty"`

	// City The city.
	City City `json:"City"`

	// CountryCode The two-letter country code in [ISO 3166-1 alpha-2](https://www.iban.com/country-codes) format.
	CountryCode CountryCode `json:"CountryCode"`

	// DistrictOrCounty The district or county.
	DistrictOrCounty *DistrictOrCounty `json:"DistrictOrCounty,omitempty"`

	// Email The email address.
	Email EmailAddress `json:"Email"`

	// Name The name of the addressee, or business name.
	Name AddressName `json:"Name"`

	// Phone The phone number.
	Phone PhoneNumber `json:"Phone"`

	// PostalCode The zip code or postal code.
	PostalCode PostalCode `json:"PostalCode"`

	// StateOrProvinceCode The state or province code. This is a required field in Canada, US, and UK marketplaces, and for shipments that originate in China.
	StateOrProvinceCode *StateOrProvinceCode `json:"StateOrProvinceCode,omitempty"`
}

// AddressLine1 The street address information.
type AddressLine1 = string

// AddressLine2 Additional street address information.
type AddressLine2 = string

// AddressLine3 Additional street address information.
type AddressLine3 = string

// AddressName The name of the addressee, or business name.
type AddressName = string

// AmazonOrderId An Amazon-defined order identifier, in 3-7-7 format.
type AmazonOrderId = string

// AvailableCarrierWillPickUpOption Indicates whether the carrier will pick up the package, and what fee is charged, if any.
type AvailableCarrierWillPickUpOption struct {
	// CarrierWillPickUpOption Carrier will pick up option.
	CarrierWillPickUpOption CarrierWillPickUpOption `json:"CarrierWillPickUpOption"`

	// Charge Currency type and amount.
	Charge CurrencyAmount `json:"Charge"`
}

// AvailableCarrierWillPickUpOptionsList List of available carrier pickup options.
type AvailableCarrierWillPickUpOptionsList = []AvailableCarrierWillPickUpOption

// AvailableDeliveryExperienceOption The available delivery confirmation options, and the fee charged, if any.
type AvailableDeliveryExperienceOption struct {
	// Charge Currency type and amount.
	Charge CurrencyAmount `json:"Charge"`

	// DeliveryExperienceOption The delivery confirmation level.
	DeliveryExperienceOption DeliveryExperienceOption `json:"DeliveryExperienceOption"`
}

// AvailableDeliveryExperienceOptionsList List of available delivery experience options.
type AvailableDeliveryExperienceOptionsList = []AvailableDeliveryExperienceOption

// AvailableFormatOptionsForLabelList The available label formats.
type AvailableFormatOptionsForLabelList = []LabelFormatOption

// AvailableShippingServiceOptions The available shipping service options.
type AvailableShippingServiceOptions struct {
	// AvailableCarrierWillPickUpOptions List of available carrier pickup options.
	AvailableCarrierWillPickUpOptions AvailableCarrierWillPickUpOptionsList `json:"AvailableCarrierWillPickUpOptions"`

	// AvailableDeliveryExperienceOptions List of available delivery experience options.
	AvailableDeliveryExperienceOptions AvailableDeliveryExperienceOptionsList `json:"AvailableDeliveryExperienceOptions"`
}

// Benefits Benefits that are included and excluded for each shipping offer. Benefits represents services provided by Amazon (for example, `CLAIMS_PROTECTED`) when sellers purchase shipping through Amazon. Benefit details are made available for any shipment placed on or after January 1st 2024 00:00 UTC.
type Benefits struct {
	// ExcludedBenefits A list of excluded benefits. Refer to the `ExcludeBenefit` object for further documentation.
	ExcludedBenefits *ExcludedBenefits `json:"ExcludedBenefits,omitempty"`

	// IncludedBenefits A list of included benefits.
	IncludedBenefits *IncludedBenefits `json:"IncludedBenefits,omitempty"`
}

// CancelShipmentResponse Response schema.
type CancelShipmentResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The details of a shipment. Includes the shipment status.
	Payload *Shipment `json:"payload,omitempty"`
}

// CarrierWillPickUpOption Carrier will pick up option.
type CarrierWillPickUpOption string

// City The city.
type City = string

// Constraint A validation constraint.
type Constraint struct {
	// ValidationRegEx A regular expression.
	ValidationRegEx *string `json:"ValidationRegEx,omitempty"`

	// ValidationString A validation string.
	ValidationString string `json:"ValidationString"`
}

// Constraints List of constraints.
type Constraints = []Constraint

// CountryCode The two-letter country code in [ISO 3166-1 alpha-2](https://www.iban.com/country-codes) format.
type CountryCode = string

// CreateShipmentRequest Request schema.
type CreateShipmentRequest struct {
	// HazmatType Hazardous materials options for a package. Consult the terms and conditions for each carrier for more information on hazardous materials.
	HazmatType *HazmatType `json:"HazmatType,omitempty"`

	// LabelFormatOption Whether to include a packing slip.
	LabelFormatOption *LabelFormatOptionRequest `json:"LabelFormatOption,omitempty"`

	// ShipmentLevelSellerInputsList A list of additional seller input pairs required to purchase shipping.
	ShipmentLevelSellerInputsList *AdditionalSellerInputsList `json:"ShipmentLevelSellerInputsList,omitempty"`

	// ShipmentRequestDetails Shipment information required for requesting shipping service offers or for creating a shipment.
	ShipmentRequestDetails ShipmentRequestDetails `json:"ShipmentRequestDetails"`

	// ShippingServiceId An Amazon-defined shipping service identifier.
	ShippingServiceId ShippingServiceIdentifier `json:"ShippingServiceId"`

	// ShippingServiceOfferId Identifies a shipping service order made by a carrier.
	ShippingServiceOfferId *string `json:"ShippingServiceOfferId,omitempty"`
}

// CreateShipmentResponse Response schema.
type CreateShipmentResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The details of a shipment. Includes the shipment status.
	Payload *Shipment `json:"payload,omitempty"`
}

// CurrencyAmount Currency type and amount.
type CurrencyAmount struct {
	// Amount The currency amount.
	Amount float64 `json:"Amount"`

	// CurrencyCode Three-digit currency code in ISO 4217 format.
	CurrencyCode string `json:"CurrencyCode"`
}

// CustomTextForLabel Custom text to print on the label. Note: Custom text is only included on labels that are in ZPL format (ZPL203). FedEx does not support `CustomTextForLabel`.
type CustomTextForLabel = string

// DangerousGoodsDetails Details related to any dangerous goods or items that are shipped.
type DangerousGoodsDetails struct {
	// PackingGroup The specific packaging group of the item being shipped.
	PackingGroup *DangerousGoodsDetailsPackingGroup `json:"PackingGroup,omitempty"`

	// PackingInstruction The specific packing instruction of the item being shipped.
	PackingInstruction *DangerousGoodsDetailsPackingInstruction `json:"PackingInstruction,omitempty"`

	// TransportationRegulatoryClass The specific regulatory class of the shipped item.
	TransportationRegulatoryClass *string `json:"TransportationRegulatoryClass,omitempty"`

	// UnitedNationsRegulatoryId The specific UNID of the item being shipped.
	UnitedNationsRegulatoryId *string `json:"UnitedNationsRegulatoryId,omitempty"`
}

// DangerousGoodsDetailsPackingGroup The specific packaging group of the item being shipped.
type DangerousGoodsDetailsPackingGroup string

// DangerousGoodsDetailsPackingInstruction The specific packing instruction of the item being shipped.
type DangerousGoodsDetailsPackingInstruction string

// DeliveryExperienceOption The delivery confirmation level.
type DeliveryExperienceOption string

// DeliveryExperienceType The delivery confirmation level.
type DeliveryExperienceType string

// DistrictOrCounty The district or county.
type DistrictOrCounty = string

// EmailAddress The email address.
type EmailAddress = string

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition in a human-readable form.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList = []Error

// ExcludedBenefit An object representing an excluded benefit that is excluded for a shipping offer or rate.
type ExcludedBenefit struct {
	// Benefit A benefit that is being excluded from a shipment.
	Benefit *string `json:"Benefit,omitempty"`

	// ReasonCodes List of reasons why a benefit is excluded for a shipping offer (for example, `LATE_DELIVERY_RISK`).
	ReasonCodes *ExcludedBenefitReasonCodes `json:"ReasonCodes,omitempty"`
}

// ExcludedBenefitReasonCodes List of reasons why a benefit is excluded for a shipping offer (for example, `LATE_DELIVERY_RISK`).
type ExcludedBenefitReasonCodes = []string

// ExcludedBenefits A list of excluded benefits. Refer to the `ExcludeBenefit` object for further documentation.
type ExcludedBenefits = []ExcludedBenefit

// FileContents The document data and checksum.
type FileContents struct {
	// Checksum An MD5 hash to validate the PDF document data, in the form of a Base64 string.
	Checksum string `json:"Checksum"`

	// Contents Data for printing labels encoded into a Base64, GZip-compressed string.
	Contents string `json:"Contents"`

	// FileType The file type for a label.
	FileType FileType `json:"FileType"`
}

// FileType The file type for a label.
type FileType string

// GetAdditionalSellerInputsRequest Request schema.
type GetAdditionalSellerInputsRequest struct {
	// OrderId An Amazon-defined order identifier, in 3-7-7 format.
	OrderId AmazonOrderId `json:"OrderId"`

	// ShipFromAddress The postal address information.
	ShipFromAddress Address `json:"ShipFromAddress"`

	// ShippingServiceId An Amazon-defined shipping service identifier.
	ShippingServiceId ShippingServiceIdentifier `json:"ShippingServiceId"`
}

// GetAdditionalSellerInputsResponse Response schema.
type GetAdditionalSellerInputsResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The payload for the `getAdditionalSellerInputs` operation.
	Payload *GetAdditionalSellerInputsResult `json:"payload,omitempty"`
}

// GetAdditionalSellerInputsResult The payload for the `getAdditionalSellerInputs` operation.
type GetAdditionalSellerInputsResult struct {
	// ItemLevelFieldsList A list of item level fields.
	ItemLevelFieldsList *ItemLevelFieldsList `json:"ItemLevelFieldsList,omitempty"`

	// ShipmentLevelFields A list of additional inputs.
	ShipmentLevelFields *AdditionalInputsList `json:"ShipmentLevelFields,omitempty"`
}

// GetEligibleShipmentServicesRequest Request schema.
type GetEligibleShipmentServicesRequest struct {
	// ShipmentRequestDetails Shipment information required for requesting shipping service offers or for creating a shipment.
	ShipmentRequestDetails ShipmentRequestDetails `json:"ShipmentRequestDetails"`

	// ShippingOfferingFilter Filter for use when requesting eligible shipping services.
	ShippingOfferingFilter *ShippingOfferingFilter `json:"ShippingOfferingFilter,omitempty"`
}

// GetEligibleShipmentServicesResponse Response schema.
type GetEligibleShipmentServicesResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The payload for the `getEligibleShipmentServices` operation.
	Payload *GetEligibleShipmentServicesResult `json:"payload,omitempty"`
}

// GetEligibleShipmentServicesResult The payload for the `getEligibleShipmentServices` operation.
type GetEligibleShipmentServicesResult struct {
	// RejectedShippingServiceList List of services that are for some reason unavailable for this request
	RejectedShippingServiceList *RejectedShippingServiceList `json:"RejectedShippingServiceList,omitempty"`

	// ShippingServiceList A list of shipping services offers.
	ShippingServiceList ShippingServiceList `json:"ShippingServiceList"`

	// TemporarilyUnavailableCarrierList A list of temporarily unavailable carriers.
	TemporarilyUnavailableCarrierList *TemporarilyUnavailableCarrierList `json:"TemporarilyUnavailableCarrierList,omitempty"`

	// TermsAndConditionsNotAcceptedCarrierList List of carriers whose terms and conditions were not accepted by the seller.
	TermsAndConditionsNotAcceptedCarrierList *TermsAndConditionsNotAcceptedCarrierList `json:"TermsAndConditionsNotAcceptedCarrierList,omitempty"`
}

// GetShipmentResponse Response schema.
type GetShipmentResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The details of a shipment. Includes the shipment status.
	Payload *Shipment `json:"payload,omitempty"`
}

// HazmatType Hazardous materials options for a package. Consult the terms and conditions for each carrier for more information on hazardous materials.
type HazmatType string

// IncludedBenefits A list of included benefits.
type IncludedBenefits = []string

// InputTargetType Indicates whether the additional seller input is at the item or shipment level.
type InputTargetType string

// Item An Amazon order item identifier and a quantity.
type Item struct {
	// DangerousGoodsDetails Details related to any dangerous goods or items that are shipped.
	DangerousGoodsDetails *DangerousGoodsDetails `json:"DangerousGoodsDetails,omitempty"`

	// IsHazmat When true, the item qualifies as hazardous materials (hazmat). Defaults to false.
	IsHazmat *bool `json:"IsHazmat,omitempty"`

	// ItemDescription The description of the item.
	ItemDescription *ItemDescription `json:"ItemDescription,omitempty"`

	// ItemLevelSellerInputsList A list of additional seller input pairs required to purchase shipping.
	ItemLevelSellerInputsList *AdditionalSellerInputsList `json:"ItemLevelSellerInputsList,omitempty"`

	// ItemWeight The weight.
	ItemWeight *Weight `json:"ItemWeight,omitempty"`

	// LiquidVolume Liquid volume.
	LiquidVolume *LiquidVolume `json:"LiquidVolume,omitempty"`

	// OrderItemId An Amazon-defined identifier for an individual item in an order.
	OrderItemId OrderItemId `json:"OrderItemId"`

	// Quantity The number of items.
	Quantity ItemQuantity `json:"Quantity"`

	// TransparencyCodeList A list of transparency codes.
	TransparencyCodeList *TransparencyCodeList `json:"TransparencyCodeList,omitempty"`
}

// ItemDescription The description of the item.
type ItemDescription = string

// ItemLevelFields A list of item level fields.
type ItemLevelFields struct {
	// AdditionalInputs A list of additional inputs.
	AdditionalInputs AdditionalInputsList `json:"AdditionalInputs"`

	// Asin The Amazon Standard Identification Number (ASIN) of the item.
	Asin string `json:"Asin"`
}

// ItemLevelFieldsList A list of item level fields.
type ItemLevelFieldsList = []ItemLevelFields

// ItemList The list of items you want to include in a shipment.
type ItemList = []Item

// ItemQuantity The number of items.
type ItemQuantity = int32

// Label Data for creating a shipping label and dimensions for printing the label.
type Label struct {
	// CustomTextForLabel Custom text to print on the label. Note: Custom text is only included on labels that are in ZPL format (ZPL203). FedEx does not support `CustomTextForLabel`.
	CustomTextForLabel *CustomTextForLabel `json:"CustomTextForLabel,omitempty"`

	// Dimensions Dimensions for printing a shipping label.
	Dimensions LabelDimensions `json:"Dimensions"`

	// FileContents The document data and checksum.
	FileContents FileContents `json:"FileContents"`

	// LabelFormat The label format.
	LabelFormat *LabelFormat `json:"LabelFormat,omitempty"`

	// StandardIdForLabel The type of standard identifier to print on the label.
	StandardIdForLabel *StandardIdForLabel `json:"StandardIdForLabel,omitempty"`
}

// LabelCustomization Custom text for shipping labels.
type LabelCustomization struct {
	// CustomTextForLabel Custom text to print on the label. Note: Custom text is only included on labels that are in ZPL format (ZPL203). FedEx does not support `CustomTextForLabel`.
	CustomTextForLabel *CustomTextForLabel `json:"CustomTextForLabel,omitempty"`

	// StandardIdForLabel The type of standard identifier to print on the label.
	StandardIdForLabel *StandardIdForLabel `json:"StandardIdForLabel,omitempty"`
}

// LabelDimension A label dimension.
type LabelDimension = float32

// LabelDimensions Dimensions for printing a shipping label.
type LabelDimensions struct {
	// Length A label dimension.
	Length LabelDimension `json:"Length"`

	// Unit The unit of length.
	Unit UnitOfLength `json:"Unit"`

	// Width A label dimension.
	Width LabelDimension `json:"Width"`
}

// LabelFormat The label format.
type LabelFormat string

// LabelFormatList List of label formats.
type LabelFormatList = []LabelFormat

// LabelFormatOption The label format details and whether to include a packing slip.
type LabelFormatOption struct {
	// IncludePackingSlipWithLabel When true, include a packing slip with the label.
	IncludePackingSlipWithLabel *bool `json:"IncludePackingSlipWithLabel,omitempty"`

	// LabelFormat The label format.
	LabelFormat *LabelFormat `json:"LabelFormat,omitempty"`
}

// LabelFormatOptionRequest Whether to include a packing slip.
type LabelFormatOptionRequest struct {
	// IncludePackingSlipWithLabel When true, include a packing slip with the label.
	IncludePackingSlipWithLabel *bool `json:"IncludePackingSlipWithLabel,omitempty"`
}

// Length The length.
type Length struct {
	// Unit The unit of length.
	Unit *UnitOfLength `json:"unit,omitempty"`

	// Value The value in units.
	Value *float32 `json:"value,omitempty"`
}

// LiquidVolume Liquid volume.
type LiquidVolume struct {
	// Unit The unit of measurement.
	Unit LiquidVolumeUnit `json:"Unit"`

	// Value The measurement value.
	Value float32 `json:"Value"`
}

// LiquidVolumeUnit The unit of measurement.
type LiquidVolumeUnit string

// OrderItemId An Amazon-defined identifier for an individual item in an order.
type OrderItemId = string

// PackageDimension A number that represents the given package dimension.
type PackageDimension = float64

// PackageDimensions The dimensions of a package contained in a shipment.
type PackageDimensions struct {
	// Height A number that represents the given package dimension.
	Height *PackageDimension `json:"Height,omitempty"`

	// Length A number that represents the given package dimension.
	Length *PackageDimension `json:"Length,omitempty"`

	// PredefinedPackageDimensions An enumeration of predefined parcel tokens. If you specify a `PredefinedPackageDimensions` token, you are not obligated to use a branded package from a carrier. For example, if you specify the `FedEx_Box_10kg` token, you do not have to use that particular package from FedEx. You are only obligated to use a box that matches the dimensions specified by the token. Note: Carriers can have restrictions on the type of package allowed for certain ship methods. Check the carrier website for details. Example: Flat rate pricing is available when materials are sent by USPS in a USPS-produced Flat Rate envelope or box.
	PredefinedPackageDimensions *PredefinedPackageDimensions `json:"PredefinedPackageDimensions,omitempty"`

	// Unit The unit of length.
	Unit *UnitOfLength `json:"Unit,omitempty"`

	// Width A number that represents the given package dimension.
	Width *PackageDimension `json:"Width,omitempty"`
}

// PhoneNumber The phone number.
type PhoneNumber = string

// PostalCode The zip code or postal code.
type PostalCode = string

// PredefinedPackageDimensions An enumeration of predefined parcel tokens. If you specify a `PredefinedPackageDimensions` token, you are not obligated to use a branded package from a carrier. For example, if you specify the `FedEx_Box_10kg` token, you do not have to use that particular package from FedEx. You are only obligated to use a box that matches the dimensions specified by the token. Note: Carriers can have restrictions on the type of package allowed for certain ship methods. Check the carrier website for details. Example: Flat rate pricing is available when materials are sent by USPS in a USPS-produced Flat Rate envelope or box.
type PredefinedPackageDimensions string

// RejectedShippingService Information about a rejected shipping service
type RejectedShippingService struct {
	// CarrierName The rejected shipping carrier name. For example, USPS.
	CarrierName string `json:"CarrierName"`

	// RejectionReasonCode A reason code meant to be consumed programatically. For example, `CARRIER_CANNOT_SHIP_TO_POBOX`.
	RejectionReasonCode string `json:"RejectionReasonCode"`

	// RejectionReasonMessage A localized human readable description of the rejected reason.
	RejectionReasonMessage *string `json:"RejectionReasonMessage,omitempty"`

	// ShippingServiceId An Amazon-defined shipping service identifier.
	ShippingServiceId ShippingServiceIdentifier `json:"ShippingServiceId"`

	// ShippingServiceName The rejected shipping service localized name. For example, FedEx Standard Overnight.
	ShippingServiceName string `json:"ShippingServiceName"`
}

// RejectedShippingServiceList List of services that are for some reason unavailable for this request
type RejectedShippingServiceList = []RejectedShippingService

// RestrictedSetValues The set of fixed values in an additional seller input.
type RestrictedSetValues = []string

// SellerInputDefinition Specifies characteristics that apply to a seller input.
type SellerInputDefinition struct {
	// Constraints List of constraints.
	Constraints Constraints `json:"Constraints"`

	// DataType The data type of the additional input field.
	DataType string `json:"DataType"`

	// InputDisplayText The display text for the additional input field.
	InputDisplayText string `json:"InputDisplayText"`

	// InputTarget Indicates whether the additional seller input is at the item or shipment level.
	InputTarget *InputTargetType `json:"InputTarget,omitempty"`

	// IsRequired When true, the additional input field is required.
	IsRequired bool `json:"IsRequired"`

	// RestrictedSetValues The set of fixed values in an additional seller input.
	RestrictedSetValues *RestrictedSetValues `json:"RestrictedSetValues,omitempty"`

	// StoredValue Additional information required to purchase shipping.
	StoredValue AdditionalSellerInput `json:"StoredValue"`
}

// SellerOrderId A seller-defined order identifier.
type SellerOrderId = string

// Shipment The details of a shipment. Includes the shipment status.
type Shipment struct {
	// AmazonOrderId An Amazon-defined order identifier, in 3-7-7 format.
	AmazonOrderId AmazonOrderId `json:"AmazonOrderId"`

	// CreatedDate Date-time formatted timestamp.
	CreatedDate Timestamp `json:"CreatedDate"`

	// Insurance Currency type and amount.
	Insurance CurrencyAmount `json:"Insurance"`

	// ItemList The list of items you want to include in a shipment.
	ItemList ItemList `json:"ItemList"`

	// Label Data for creating a shipping label and dimensions for printing the label.
	Label Label `json:"Label"`

	// LastUpdatedDate Date-time formatted timestamp.
	LastUpdatedDate *Timestamp `json:"LastUpdatedDate,omitempty"`

	// PackageDimensions The dimensions of a package contained in a shipment.
	PackageDimensions PackageDimensions `json:"PackageDimensions"`

	// SellerOrderId A seller-defined order identifier.
	SellerOrderId *SellerOrderId `json:"SellerOrderId,omitempty"`

	// ShipFromAddress The postal address information.
	ShipFromAddress Address `json:"ShipFromAddress"`

	// ShipToAddress The postal address information.
	ShipToAddress Address `json:"ShipToAddress"`

	// ShipmentId An Amazon-defined shipment identifier.
	ShipmentId ShipmentId `json:"ShipmentId"`

	// ShippingService A shipping service offer made by a carrier.
	ShippingService ShippingService `json:"ShippingService"`

	// Status The shipment status.
	Status ShipmentStatus `json:"Status"`

	// TrackingId The shipment tracking identifier provided by the carrier.
	TrackingId *TrackingId `json:"TrackingId,omitempty"`

	// Weight The weight.
	Weight Weight `json:"Weight"`
}

// ShipmentId An Amazon-defined shipment identifier.
type ShipmentId = string

// ShipmentRequestDetails Shipment information required for requesting shipping service offers or for creating a shipment.
type ShipmentRequestDetails struct {
	// AmazonOrderId An Amazon-defined order identifier, in 3-7-7 format.
	AmazonOrderId AmazonOrderId `json:"AmazonOrderId"`

	// ItemList The list of items you want to include in a shipment.
	ItemList ItemList `json:"ItemList"`

	// LabelCustomization Custom text for shipping labels.
	LabelCustomization *LabelCustomization `json:"LabelCustomization,omitempty"`

	// MustArriveByDate Date-time formatted timestamp.
	MustArriveByDate *Timestamp `json:"MustArriveByDate,omitempty"`

	// PackageDimensions The dimensions of a package contained in a shipment.
	PackageDimensions PackageDimensions `json:"PackageDimensions"`

	// SellerOrderId A seller-defined order identifier.
	SellerOrderId *SellerOrderId `json:"SellerOrderId,omitempty"`

	// ShipDate Date-time formatted timestamp.
	ShipDate *Timestamp `json:"ShipDate,omitempty"`

	// ShipFromAddress The postal address information.
	ShipFromAddress Address `json:"ShipFromAddress"`

	// ShippingServiceOptions Extra services provided by a carrier.
	ShippingServiceOptions ShippingServiceOptions `json:"ShippingServiceOptions"`

	// Weight The weight.
	Weight Weight `json:"Weight"`
}

// ShipmentStatus The shipment status.
type ShipmentStatus string

// ShippingOfferingFilter Filter for use when requesting eligible shipping services.
type ShippingOfferingFilter struct {
	// CarrierWillPickUp Carrier will pick up option.
	CarrierWillPickUp *CarrierWillPickUpOption `json:"CarrierWillPickUp,omitempty"`

	// DeliveryExperience The delivery confirmation level.
	DeliveryExperience *DeliveryExperienceOption `json:"DeliveryExperience,omitempty"`

	// IncludeComplexShippingOptions When true, include complex shipping options.
	IncludeComplexShippingOptions *bool `json:"IncludeComplexShippingOptions,omitempty"`

	// IncludePackingSlipWithLabel When true, include a packing slip with the label.
	IncludePackingSlipWithLabel *bool `json:"IncludePackingSlipWithLabel,omitempty"`
}

// ShippingService A shipping service offer made by a carrier.
type ShippingService struct {
	// AvailableFormatOptionsForLabel The available label formats.
	AvailableFormatOptionsForLabel *AvailableFormatOptionsForLabelList `json:"AvailableFormatOptionsForLabel,omitempty"`

	// AvailableLabelFormats List of label formats.
	AvailableLabelFormats *LabelFormatList `json:"AvailableLabelFormats,omitempty"`

	// AvailableShippingServiceOptions The available shipping service options.
	AvailableShippingServiceOptions *AvailableShippingServiceOptions `json:"AvailableShippingServiceOptions,omitempty"`

	// Benefits Benefits that are included and excluded for each shipping offer. Benefits represents services provided by Amazon (for example, `CLAIMS_PROTECTED`) when sellers purchase shipping through Amazon. Benefit details are made available for any shipment placed on or after January 1st 2024 00:00 UTC.
	Benefits *Benefits `json:"Benefits,omitempty"`

	// CarrierName The name of the carrier.
	CarrierName string `json:"CarrierName"`

	// EarliestEstimatedDeliveryDate Date-time formatted timestamp.
	EarliestEstimatedDeliveryDate *Timestamp `json:"EarliestEstimatedDeliveryDate,omitempty"`

	// LatestEstimatedDeliveryDate Date-time formatted timestamp.
	LatestEstimatedDeliveryDate *Timestamp `json:"LatestEstimatedDeliveryDate,omitempty"`

	// Rate Currency type and amount.
	Rate CurrencyAmount `json:"Rate"`

	// RequiresAdditionalSellerInputs When true, additional seller inputs are required.
	RequiresAdditionalSellerInputs bool `json:"RequiresAdditionalSellerInputs"`

	// ShipDate Date-time formatted timestamp.
	ShipDate Timestamp `json:"ShipDate"`

	// ShippingServiceId An Amazon-defined shipping service identifier.
	ShippingServiceId ShippingServiceIdentifier `json:"ShippingServiceId"`

	// ShippingServiceName A plain text representation of a carrier's shipping service. For example, "UPS Ground" or "FedEx Standard Overnight".
	ShippingServiceName string `json:"ShippingServiceName"`

	// ShippingServiceOfferId An Amazon-defined shipping service offer identifier.
	ShippingServiceOfferId string `json:"ShippingServiceOfferId"`

	// ShippingServiceOptions Extra services provided by a carrier.
	ShippingServiceOptions ShippingServiceOptions `json:"ShippingServiceOptions"`
}

// ShippingServiceIdentifier An Amazon-defined shipping service identifier.
type ShippingServiceIdentifier = string

// ShippingServiceList A list of shipping services offers.
type ShippingServiceList = []ShippingService

// ShippingServiceOptions Extra services provided by a carrier.
type ShippingServiceOptions struct {
	// CarrierWillPickUp When true, the carrier will pick up the package. Note: Scheduled carrier pickup is available only using Dynamex (US), DPD (UK), and Royal Mail (UK).
	CarrierWillPickUp bool `json:"CarrierWillPickUp"`

	// CarrierWillPickUpOption Carrier will pick up option.
	CarrierWillPickUpOption *CarrierWillPickUpOption `json:"CarrierWillPickUpOption,omitempty"`

	// DeclaredValue Currency type and amount.
	DeclaredValue *CurrencyAmount `json:"DeclaredValue,omitempty"`

	// DeliveryExperience The delivery confirmation level.
	DeliveryExperience DeliveryExperienceType `json:"DeliveryExperience"`

	// LabelFormat The label format.
	LabelFormat *LabelFormat `json:"LabelFormat,omitempty"`
}

// StandardIdForLabel The type of standard identifier to print on the label.
type StandardIdForLabel string

// StateOrProvinceCode The state or province code. This is a required field in Canada, US, and UK marketplaces, and for shipments that originate in China.
type StateOrProvinceCode = string

// TemporarilyUnavailableCarrier A carrier who is temporarily unavailable, most likely due to a service outage experienced by the carrier.
type TemporarilyUnavailableCarrier struct {
	// CarrierName The name of the carrier.
	CarrierName string `json:"CarrierName"`
}

// TemporarilyUnavailableCarrierList A list of temporarily unavailable carriers.
type TemporarilyUnavailableCarrierList = []TemporarilyUnavailableCarrier

// TermsAndConditionsNotAcceptedCarrier A carrier whose terms and conditions have not been accepted by the seller.
type TermsAndConditionsNotAcceptedCarrier struct {
	// CarrierName The name of the carrier.
	CarrierName string `json:"CarrierName"`
}

// TermsAndConditionsNotAcceptedCarrierList List of carriers whose terms and conditions were not accepted by the seller.
type TermsAndConditionsNotAcceptedCarrierList = []TermsAndConditionsNotAcceptedCarrier

// Timestamp Date-time formatted timestamp.
type Timestamp = time.Time

// TrackingId The shipment tracking identifier provided by the carrier.
type TrackingId = string

// TransparencyCode The transparency code associated with the item. Determine the transparency serial number with:
//
// **1D or 2D barcode:** This has a **T** logo. Submit either the 29-character alpha-numeric identifier beginning with **AZ** or **ZA**, or the 38-character Serialized Global Trade Item Number (SGTIN).
// **2D barcode SN:** Submit the 7- to 20-character serial number barcode, that likely has the prefix **SN**. The serial number is applied to the same side of the packaging as the GTIN (UPC/EAN/ISBN) barcode.
// **QR code SN:** Submit the URL that the QR code generates.
type TransparencyCode = string

// TransparencyCodeList A list of transparency codes.
type TransparencyCodeList = []TransparencyCode

// UnitOfLength The unit of length.
type UnitOfLength string

// UnitOfWeight The unit of weight.
type UnitOfWeight string

// Weight The weight.
type Weight struct {
	// Unit The unit of weight.
	Unit UnitOfWeight `json:"Unit"`

	// Value The weight value.
	Value WeightValue `json:"Value"`
}

// WeightValue The weight value.
type WeightValue = float64

// GetAdditionalSellerInputsJSONRequestBody defines body for GetAdditionalSellerInputs for application/json ContentType.
type GetAdditionalSellerInputsJSONRequestBody = GetAdditionalSellerInputsRequest

// GetEligibleShipmentServicesJSONRequestBody defines body for GetEligibleShipmentServices for application/json ContentType.
type GetEligibleShipmentServicesJSONRequestBody = GetEligibleShipmentServicesRequest

// CreateShipmentJSONRequestBody defines body for CreateShipment for application/json ContentType.
type CreateShipmentJSONRequestBody = CreateShipmentRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAdditionalSellerInputsWithBody request with any body
	GetAdditionalSellerInputsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	GetAdditionalSellerInputs(ctx context.Context, body GetAdditionalSellerInputsJSONRequestBody) (*http.Response, error)

	// GetEligibleShipmentServicesWithBody request with any body
	GetEligibleShipmentServicesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	GetEligibleShipmentServices(ctx context.Context, body GetEligibleShipmentServicesJSONRequestBody) (*http.Response, error)

	// CreateShipmentWithBody request with any body
	CreateShipmentWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateShipment(ctx context.Context, body CreateShipmentJSONRequestBody) (*http.Response, error)

	// CancelShipment request
	CancelShipment(ctx context.Context, shipmentId string) (*http.Response, error)

	// GetShipment request
	GetShipment(ctx context.Context, shipmentId string) (*http.Response, error)
}

func (c *Client) GetAdditionalSellerInputsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetAdditionalSellerInputsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetAdditionalSellerInputs(ctx context.Context, body GetAdditionalSellerInputsJSONRequestBody) (*http.Response, error) {
	req, err := NewGetAdditionalSellerInputsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetEligibleShipmentServicesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetEligibleShipmentServicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetEligibleShipmentServices(ctx context.Context, body GetEligibleShipmentServicesJSONRequestBody) (*http.Response, error) {
	req, err := NewGetEligibleShipmentServicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateShipmentWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateShipmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateShipment(ctx context.Context, body CreateShipmentJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateShipmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CancelShipment(ctx context.Context, shipmentId string) (*http.Response, error) {
	req, err := NewCancelShipmentRequest(c.Server, shipmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetShipment(ctx context.Context, shipmentId string) (*http.Response, error) {
	req, err := NewGetShipmentRequest(c.Server, shipmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetAdditionalSellerInputsRequest calls the generic GetAdditionalSellerInputs builder with application/json body
func NewGetAdditionalSellerInputsRequest(server string, body GetAdditionalSellerInputsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAdditionalSellerInputsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetAdditionalSellerInputsRequestWithBody generates requests for GetAdditionalSellerInputs with any type of body
func NewGetAdditionalSellerInputsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mfn/v0/additionalSellerInputs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEligibleShipmentServicesRequest calls the generic GetEligibleShipmentServices builder with application/json body
func NewGetEligibleShipmentServicesRequest(server string, body GetEligibleShipmentServicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetEligibleShipmentServicesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetEligibleShipmentServicesRequestWithBody generates requests for GetEligibleShipmentServices with any type of body
func NewGetEligibleShipmentServicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mfn/v0/eligibleShippingServices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateShipmentRequest calls the generic CreateShipment builder with application/json body
func NewCreateShipmentRequest(server string, body CreateShipmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateShipmentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateShipmentRequestWithBody generates requests for CreateShipment with any type of body
func NewCreateShipmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mfn/v0/shipments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelShipmentRequest generates requests for CancelShipment
func NewCancelShipmentRequest(server string, shipmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mfn/v0/shipments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShipmentRequest generates requests for GetShipment
func NewGetShipmentRequest(server string, shipmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mfn/v0/shipments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAdditionalSellerInputsWithBodyWithResponse request with any body
	GetAdditionalSellerInputsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GetAdditionalSellerInputsResp, error)

	GetAdditionalSellerInputsWithResponse(ctx context.Context, body GetAdditionalSellerInputsJSONRequestBody) (*GetAdditionalSellerInputsResp, error)

	// GetEligibleShipmentServicesWithBodyWithResponse request with any body
	GetEligibleShipmentServicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GetEligibleShipmentServicesResp, error)

	GetEligibleShipmentServicesWithResponse(ctx context.Context, body GetEligibleShipmentServicesJSONRequestBody) (*GetEligibleShipmentServicesResp, error)

	// CreateShipmentWithBodyWithResponse request with any body
	CreateShipmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateShipmentResp, error)

	CreateShipmentWithResponse(ctx context.Context, body CreateShipmentJSONRequestBody) (*CreateShipmentResp, error)

	// CancelShipmentWithResponse request
	CancelShipmentWithResponse(ctx context.Context, shipmentId string) (*CancelShipmentResp, error)

	// GetShipmentWithResponse request
	GetShipmentWithResponse(ctx context.Context, shipmentId string) (*GetShipmentResp, error)
}

type GetAdditionalSellerInputsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAdditionalSellerInputsResponse
	JSON400      *GetAdditionalSellerInputsResponse
	JSON401      *GetAdditionalSellerInputsResponse
	JSON403      *GetAdditionalSellerInputsResponse
	JSON404      *GetAdditionalSellerInputsResponse
	JSON429      *GetAdditionalSellerInputsResponse
	JSON500      *GetAdditionalSellerInputsResponse
	JSON503      *GetAdditionalSellerInputsResponse
}

// Status returns HTTPResponse.Status
func (r GetAdditionalSellerInputsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdditionalSellerInputsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEligibleShipmentServicesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEligibleShipmentServicesResponse
	JSON400      *GetEligibleShipmentServicesResponse
	JSON401      *GetEligibleShipmentServicesResponse
	JSON403      *GetEligibleShipmentServicesResponse
	JSON404      *GetEligibleShipmentServicesResponse
	JSON429      *GetEligibleShipmentServicesResponse
	JSON500      *GetEligibleShipmentServicesResponse
	JSON503      *GetEligibleShipmentServicesResponse
}

// Status returns HTTPResponse.Status
func (r GetEligibleShipmentServicesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEligibleShipmentServicesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShipmentResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateShipmentResponse
	JSON400      *CreateShipmentResponse
	JSON401      *CreateShipmentResponse
	JSON403      *CreateShipmentResponse
	JSON404      *CreateShipmentResponse
	JSON429      *CreateShipmentResponse
	JSON500      *CreateShipmentResponse
	JSON503      *CreateShipmentResponse
}

// Status returns HTTPResponse.Status
func (r CreateShipmentResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShipmentResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelShipmentResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelShipmentResponse
	JSON400      *CancelShipmentResponse
	JSON401      *CancelShipmentResponse
	JSON403      *CancelShipmentResponse
	JSON404      *CancelShipmentResponse
	JSON429      *CancelShipmentResponse
	JSON500      *CancelShipmentResponse
	JSON503      *CancelShipmentResponse
}

// Status returns HTTPResponse.Status
func (r CancelShipmentResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelShipmentResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShipmentResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetShipmentResponse
	JSON400      *GetShipmentResponse
	JSON401      *GetShipmentResponse
	JSON403      *GetShipmentResponse
	JSON404      *GetShipmentResponse
	JSON429      *GetShipmentResponse
	JSON500      *GetShipmentResponse
	JSON503      *GetShipmentResponse
}

// Status returns HTTPResponse.Status
func (r GetShipmentResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipmentResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAdditionalSellerInputsWithBodyWithResponse request with arbitrary body returning *GetAdditionalSellerInputsResp
func (c *ClientWithResponses) GetAdditionalSellerInputsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GetAdditionalSellerInputsResp, error) {
	rsp, err := c.GetAdditionalSellerInputsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetAdditionalSellerInputsResp(rsp)
}

func (c *ClientWithResponses) GetAdditionalSellerInputsWithResponse(ctx context.Context, body GetAdditionalSellerInputsJSONRequestBody) (*GetAdditionalSellerInputsResp, error) {
	rsp, err := c.GetAdditionalSellerInputs(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseGetAdditionalSellerInputsResp(rsp)
}

// GetEligibleShipmentServicesWithBodyWithResponse request with arbitrary body returning *GetEligibleShipmentServicesResp
func (c *ClientWithResponses) GetEligibleShipmentServicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GetEligibleShipmentServicesResp, error) {
	rsp, err := c.GetEligibleShipmentServicesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetEligibleShipmentServicesResp(rsp)
}

func (c *ClientWithResponses) GetEligibleShipmentServicesWithResponse(ctx context.Context, body GetEligibleShipmentServicesJSONRequestBody) (*GetEligibleShipmentServicesResp, error) {
	rsp, err := c.GetEligibleShipmentServices(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseGetEligibleShipmentServicesResp(rsp)
}

// CreateShipmentWithBodyWithResponse request with arbitrary body returning *CreateShipmentResp
func (c *ClientWithResponses) CreateShipmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateShipmentResp, error) {
	rsp, err := c.CreateShipmentWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipmentResp(rsp)
}

func (c *ClientWithResponses) CreateShipmentWithResponse(ctx context.Context, body CreateShipmentJSONRequestBody) (*CreateShipmentResp, error) {
	rsp, err := c.CreateShipment(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipmentResp(rsp)
}

// CancelShipmentWithResponse request returning *CancelShipmentResp
func (c *ClientWithResponses) CancelShipmentWithResponse(ctx context.Context, shipmentId string) (*CancelShipmentResp, error) {
	rsp, err := c.CancelShipment(ctx, shipmentId)
	if err != nil {
		return nil, err
	}
	return ParseCancelShipmentResp(rsp)
}

// GetShipmentWithResponse request returning *GetShipmentResp
func (c *ClientWithResponses) GetShipmentWithResponse(ctx context.Context, shipmentId string) (*GetShipmentResp, error) {
	rsp, err := c.GetShipment(ctx, shipmentId)
	if err != nil {
		return nil, err
	}
	return ParseGetShipmentResp(rsp)
}

// ParseGetAdditionalSellerInputsResp parses an HTTP response from a GetAdditionalSellerInputsWithResponse call
func ParseGetAdditionalSellerInputsResp(rsp *http.Response) (*GetAdditionalSellerInputsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdditionalSellerInputsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetEligibleShipmentServicesResp parses an HTTP response from a GetEligibleShipmentServicesWithResponse call
func ParseGetEligibleShipmentServicesResp(rsp *http.Response) (*GetEligibleShipmentServicesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEligibleShipmentServicesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateShipmentResp parses an HTTP response from a CreateShipmentWithResponse call
func ParseCreateShipmentResp(rsp *http.Response) (*CreateShipmentResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShipmentResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCancelShipmentResp parses an HTTP response from a CancelShipmentWithResponse call
func ParseCancelShipmentResp(rsp *http.Response) (*CancelShipmentResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelShipmentResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetShipmentResp parses an HTTP response from a GetShipmentWithResponse call
func ParseGetShipmentResp(rsp *http.Response) (*GetShipmentResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShipmentResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
