// Package productPricingv20220501 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.3 DO NOT EDIT.
package productPricingv20220501

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// Defines values for Condition.
const (
	Club        Condition = "Club"
	Collectible Condition = "Collectible"
	New         Condition = "New"
	Refurbished Condition = "Refurbished"
	Used        Condition = "Used"
)

// Defines values for FulfillmentType.
const (
	AFN FulfillmentType = "AFN"
	MFN FulfillmentType = "MFN"
)

// Defines values for HttpMethod.
const (
	DELETE HttpMethod = "DELETE"
	GET    HttpMethod = "GET"
	PATCH  HttpMethod = "PATCH"
	POST   HttpMethod = "POST"
	PUT    HttpMethod = "PUT"
)

// Asin The Amazon Standard Identification Number (ASIN) of the item.
type Asin = string

// BatchRequest The common properties for individual requests within a batch.
type BatchRequest struct {
	// Body Additional HTTP body information associated with an individual request within a batch.
	Body *HttpBody `json:"body,omitempty"`

	// Headers A mapping of additional HTTP headers to send/receive for an individual request within a batch.
	Headers *HttpHeaders `json:"headers,omitempty"`

	// Method The HTTP method associated with an individual request within a batch.
	Method HttpMethod `json:"method"`

	// Uri The URI associated with an individual request within a batch. For FeaturedOfferExpectedPrice, this should be '/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice'.
	Uri string `json:"uri"`
}

// BatchResponse The common properties for responses to individual requests within a batch.
type BatchResponse struct {
	// Headers A mapping of additional HTTP headers to send/receive for an individual request within a batch.
	Headers HttpHeaders `json:"headers"`

	// Status The HTTP status line associated with the response to an individual request within a batch. For more information, consult [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html).
	Status HttpStatusLine `json:"status"`
}

// Condition The condition of the item.
type Condition string

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional information that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList = []Error

// Errors A list of error responses returned when a request is unsuccessful.
type Errors struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors ErrorList `json:"errors"`
}

// FeaturedOffer defines model for FeaturedOffer.
type FeaturedOffer struct {
	// Condition The condition of the item.
	Condition *Condition `json:"condition,omitempty"`

	// OfferIdentifier Identifies an offer from a particular seller on an ASIN.
	OfferIdentifier OfferIdentifier `json:"offerIdentifier"`
	Price           *Price          `json:"price,omitempty"`
}

// FeaturedOfferExpectedPrice The item price at or below which the target offer may be featured.
type FeaturedOfferExpectedPrice struct {
	ListingPrice MoneyType `json:"listingPrice"`
	Points       *Points   `json:"points,omitempty"`
}

// FeaturedOfferExpectedPriceRequest defines model for FeaturedOfferExpectedPriceRequest.
type FeaturedOfferExpectedPriceRequest struct {
	// Body Additional HTTP body information associated with an individual request within a batch.
	Body *HttpBody `json:"body,omitempty"`

	// Headers A mapping of additional HTTP headers to send/receive for an individual request within a batch.
	Headers *HttpHeaders `json:"headers,omitempty"`

	// MarketplaceId A marketplace identifier. Specifies the marketplace for which data is returned.
	MarketplaceId MarketplaceId `json:"marketplaceId"`

	// Method The HTTP method associated with an individual request within a batch.
	Method HttpMethod `json:"method"`

	// Sku The seller SKU of the item.
	Sku Sku `json:"sku"`

	// Uri The URI associated with an individual request within a batch. For FeaturedOfferExpectedPrice, this should be '/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice'.
	Uri string `json:"uri"`
}

// FeaturedOfferExpectedPriceRequestList A batched list of featured offer expected price requests.
type FeaturedOfferExpectedPriceRequestList = []FeaturedOfferExpectedPriceRequest

// FeaturedOfferExpectedPriceRequestParams The parameters for an individual request.
type FeaturedOfferExpectedPriceRequestParams struct {
	// MarketplaceId A marketplace identifier. Specifies the marketplace for which data is returned.
	MarketplaceId MarketplaceId `json:"marketplaceId"`

	// Sku The seller SKU of the item.
	Sku Sku `json:"sku"`
}

// FeaturedOfferExpectedPriceResponse defines model for FeaturedOfferExpectedPriceResponse.
type FeaturedOfferExpectedPriceResponse struct {
	// Body The featured offer expected price response data for a requested SKU.
	Body *FeaturedOfferExpectedPriceResponseBody `json:"body,omitempty"`

	// Headers A mapping of additional HTTP headers to send/receive for an individual request within a batch.
	Headers HttpHeaders `json:"headers"`

	// Request The parameters for an individual request.
	Request FeaturedOfferExpectedPriceRequestParams `json:"request"`

	// Status The HTTP status line associated with the response to an individual request within a batch. For more information, consult [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html).
	Status HttpStatusLine `json:"status"`
}

// FeaturedOfferExpectedPriceResponseBody The featured offer expected price response data for a requested SKU.
type FeaturedOfferExpectedPriceResponseBody struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// FeaturedOfferExpectedPriceResults A list of featured offer expected price results for the requested offer.
	FeaturedOfferExpectedPriceResults *FeaturedOfferExpectedPriceResultList `json:"featuredOfferExpectedPriceResults,omitempty"`

	// OfferIdentifier Identifies an offer from a particular seller on an ASIN.
	OfferIdentifier OfferIdentifier `json:"offerIdentifier"`
}

// FeaturedOfferExpectedPriceResponseList A batched list of featured offer expected price responses.
type FeaturedOfferExpectedPriceResponseList = []FeaturedOfferExpectedPriceResponse

// FeaturedOfferExpectedPriceResult The featured offer expected price result data for the requested offer.
type FeaturedOfferExpectedPriceResult struct {
	CompetingFeaturedOffer *FeaturedOffer `json:"competingFeaturedOffer,omitempty"`
	CurrentFeaturedOffer   *FeaturedOffer `json:"currentFeaturedOffer,omitempty"`

	// FeaturedOfferExpectedPrice The item price at or below which the target offer may be featured.
	FeaturedOfferExpectedPrice *FeaturedOfferExpectedPrice `json:"featuredOfferExpectedPrice,omitempty"`

	// ResultStatus The status of the featured offer expected price computation. Possible values include VALID_FOEP, NO_COMPETING_OFFER, OFFER_NOT_ELIGIBLE, OFFER_NOT_FOUND.
	ResultStatus string `json:"resultStatus"`
}

// FeaturedOfferExpectedPriceResultList A list of featured offer expected price results for the requested offer.
type FeaturedOfferExpectedPriceResultList = []FeaturedOfferExpectedPriceResult

// FulfillmentType Indicates whether the item is fulfilled by Amazon or by the seller (merchant).
type FulfillmentType string

// GetFeaturedOfferExpectedPriceBatchRequest The request body for the getFeaturedOfferExpectedPriceBatch operation.
type GetFeaturedOfferExpectedPriceBatchRequest struct {
	// Requests A batched list of featured offer expected price requests.
	Requests *FeaturedOfferExpectedPriceRequestList `json:"requests,omitempty"`
}

// GetFeaturedOfferExpectedPriceBatchResponse The response schema for the getFeaturedOfferExpectedPriceBatch operation.
type GetFeaturedOfferExpectedPriceBatchResponse struct {
	// Responses A batched list of featured offer expected price responses.
	Responses *FeaturedOfferExpectedPriceResponseList `json:"responses,omitempty"`
}

// HttpBody Additional HTTP body information associated with an individual request within a batch.
type HttpBody map[string]interface{}

// HttpHeaders A mapping of additional HTTP headers to send/receive for an individual request within a batch.
type HttpHeaders map[string]string

// HttpMethod The HTTP method associated with an individual request within a batch.
type HttpMethod string

// HttpStatusLine The HTTP status line associated with the response to an individual request within a batch. For more information, consult [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html).
type HttpStatusLine struct {
	// ReasonPhrase The HTTP response Reason-Phase.
	ReasonPhrase *string `json:"reasonPhrase,omitempty"`

	// StatusCode The HTTP response Status-Code.
	StatusCode *int `json:"statusCode,omitempty"`
}

// MarketplaceId A marketplace identifier. Specifies the marketplace for which data is returned.
type MarketplaceId = string

// MoneyType defines model for MoneyType.
type MoneyType struct {
	// Amount The monetary value.
	Amount *float32 `json:"amount,omitempty"`

	// CurrencyCode The currency code in ISO 4217 format.
	CurrencyCode *string `json:"currencyCode,omitempty"`
}

// OfferIdentifier Identifies an offer from a particular seller on an ASIN.
type OfferIdentifier struct {
	// Asin The Amazon Standard Identification Number (ASIN) of the item.
	Asin Asin `json:"asin"`

	// FulfillmentType Indicates whether the item is fulfilled by Amazon or by the seller (merchant).
	FulfillmentType *FulfillmentType `json:"fulfillmentType,omitempty"`

	// MarketplaceId A marketplace identifier. Specifies the marketplace for which data is returned.
	MarketplaceId MarketplaceId `json:"marketplaceId"`

	// SellerId The seller identifier for the offer.
	SellerId *string `json:"sellerId,omitempty"`

	// Sku The seller stock keeping unit (SKU) of the item. This will only be present for the target offer, which belongs to the requesting seller.
	Sku *string `json:"sku,omitempty"`
}

// Points defines model for Points.
type Points struct {
	PointsMonetaryValue *MoneyType `json:"pointsMonetaryValue,omitempty"`

	// PointsNumber The number of points.
	PointsNumber *int32 `json:"pointsNumber,omitempty"`
}

// Price defines model for Price.
type Price struct {
	ListingPrice  MoneyType  `json:"listingPrice"`
	Points        *Points    `json:"points,omitempty"`
	ShippingPrice *MoneyType `json:"shippingPrice,omitempty"`
}

// Sku The seller SKU of the item.
type Sku = string

// GetFeaturedOfferExpectedPriceBatchJSONRequestBody defines body for GetFeaturedOfferExpectedPriceBatch for application/json ContentType.
type GetFeaturedOfferExpectedPriceBatchJSONRequestBody = GetFeaturedOfferExpectedPriceBatchRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetFeaturedOfferExpectedPriceBatchWithBody request with any body
	GetFeaturedOfferExpectedPriceBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetFeaturedOfferExpectedPriceBatch(ctx context.Context, body GetFeaturedOfferExpectedPriceBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetFeaturedOfferExpectedPriceBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeaturedOfferExpectedPriceBatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeaturedOfferExpectedPriceBatch(ctx context.Context, body GetFeaturedOfferExpectedPriceBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeaturedOfferExpectedPriceBatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetFeaturedOfferExpectedPriceBatchRequest calls the generic GetFeaturedOfferExpectedPriceBatch builder with application/json body
func NewGetFeaturedOfferExpectedPriceBatchRequest(server string, body GetFeaturedOfferExpectedPriceBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetFeaturedOfferExpectedPriceBatchRequestWithBody(server, "application/json", bodyReader)
}

// NewGetFeaturedOfferExpectedPriceBatchRequestWithBody generates requests for GetFeaturedOfferExpectedPriceBatch with any type of body
func NewGetFeaturedOfferExpectedPriceBatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetFeaturedOfferExpectedPriceBatchWithBodyWithResponse request with any body
	GetFeaturedOfferExpectedPriceBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFeaturedOfferExpectedPriceBatchResp, error)

	GetFeaturedOfferExpectedPriceBatchWithResponse(ctx context.Context, body GetFeaturedOfferExpectedPriceBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFeaturedOfferExpectedPriceBatchResp, error)
}

type GetFeaturedOfferExpectedPriceBatchResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFeaturedOfferExpectedPriceBatchResponse
	JSON400      *Errors
	JSON401      *Errors
	JSON403      *Errors
	JSON404      *Errors
	JSON429      *Errors
	JSON500      *Errors
	JSON503      *Errors
}

// Status returns HTTPResponse.Status
func (r GetFeaturedOfferExpectedPriceBatchResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeaturedOfferExpectedPriceBatchResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetFeaturedOfferExpectedPriceBatchWithBodyWithResponse request with arbitrary body returning *GetFeaturedOfferExpectedPriceBatchResp
func (c *ClientWithResponses) GetFeaturedOfferExpectedPriceBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFeaturedOfferExpectedPriceBatchResp, error) {
	rsp, err := c.GetFeaturedOfferExpectedPriceBatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeaturedOfferExpectedPriceBatchResp(rsp)
}

func (c *ClientWithResponses) GetFeaturedOfferExpectedPriceBatchWithResponse(ctx context.Context, body GetFeaturedOfferExpectedPriceBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFeaturedOfferExpectedPriceBatchResp, error) {
	rsp, err := c.GetFeaturedOfferExpectedPriceBatch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeaturedOfferExpectedPriceBatchResp(rsp)
}

// ParseGetFeaturedOfferExpectedPriceBatchResp parses an HTTP response from a GetFeaturedOfferExpectedPriceBatchWithResponse call
func ParseGetFeaturedOfferExpectedPriceBatchResp(rsp *http.Response) (*GetFeaturedOfferExpectedPriceBatchResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeaturedOfferExpectedPriceBatchResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFeaturedOfferExpectedPriceBatchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
