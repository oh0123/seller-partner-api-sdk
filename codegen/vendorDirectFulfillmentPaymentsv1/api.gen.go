// Package vendorDirectFulfillmentPaymentsv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package vendorDirectFulfillmentPaymentsv1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
	"time"
)

// Defines values for AdditionalDetailsType.
const (
	OCR AdditionalDetailsType = "OCR"
	SUR AdditionalDetailsType = "SUR"
)

// Defines values for ChargeDetailsType.
const (
	FREIGHTOUT           ChargeDetailsType = "FREIGHTOUT"
	FULFILLMENT          ChargeDetailsType = "FULFILLMENT"
	GIFTWRAP             ChargeDetailsType = "GIFTWRAP"
	LOADING              ChargeDetailsType = "LOADING"
	MARKETINGINSERT      ChargeDetailsType = "MARKETINGINSERT"
	PACKAGING            ChargeDetailsType = "PACKAGING"
	TAXCOLLECTEDATSOURCE ChargeDetailsType = "TAX_COLLECTED_AT_SOURCE"
)

// Defines values for TaxDetailTaxType.
const (
	TaxDetailTaxTypeCESS            TaxDetailTaxType = "CESS"
	TaxDetailTaxTypeCGST            TaxDetailTaxType = "CGST"
	TaxDetailTaxTypeConsumption     TaxDetailTaxType = "Consumption"
	TaxDetailTaxTypeDomesticVAT     TaxDetailTaxType = "DomesticVAT"
	TaxDetailTaxTypeGST             TaxDetailTaxType = "GST"
	TaxDetailTaxTypeIGST            TaxDetailTaxType = "IGST"
	TaxDetailTaxTypeMutuallyDefined TaxDetailTaxType = "MutuallyDefined"
	TaxDetailTaxTypeMwSt            TaxDetailTaxType = "MwSt."
	TaxDetailTaxTypePST             TaxDetailTaxType = "PST"
	TaxDetailTaxTypeSGST            TaxDetailTaxType = "SGST"
	TaxDetailTaxTypeST              TaxDetailTaxType = "ST"
	TaxDetailTaxTypeTVA             TaxDetailTaxType = "TVA"
	TaxDetailTaxTypeUTGST           TaxDetailTaxType = "UTGST"
	TaxDetailTaxTypeVAT             TaxDetailTaxType = "VAT"
)

// Defines values for TaxRegistrationDetailTaxRegistrationType.
const (
	TaxRegistrationDetailTaxRegistrationTypeGST TaxRegistrationDetailTaxRegistrationType = "GST"
	TaxRegistrationDetailTaxRegistrationTypeVAT TaxRegistrationDetailTaxRegistrationType = "VAT"
)

// AdditionalDetails A field where the selling party can provide additional information for tax-related or any other purposes.
type AdditionalDetails struct {
	// Detail The detail of the additional information provided by the selling party.
	Detail string `json:"detail"`

	// LanguageCode The language code of the additional information detail.
	LanguageCode *string `json:"languageCode,omitempty"`

	// Type The type of the additional information provided by the selling party.
	Type AdditionalDetailsType `json:"type"`
}

// AdditionalDetailsType The type of the additional information provided by the selling party.
type AdditionalDetailsType string

// Address Address of the party.
type Address struct {
	// AddressLine1 First line of the address.
	AddressLine1 string `json:"addressLine1"`

	// AddressLine2 Additional street address information, if required.
	AddressLine2 *string `json:"addressLine2,omitempty"`

	// AddressLine3 Additional street address information, if required.
	AddressLine3 *string `json:"addressLine3,omitempty"`

	// City The city where the person, business or institution is located.
	City string `json:"city"`

	// CountryCode The two digit country code in ISO 3166-1 alpha-2 format.
	CountryCode string `json:"countryCode"`

	// County The county where person, business or institution is located.
	County *string `json:"county,omitempty"`

	// District The district where person, business or institution is located.
	District *string `json:"district,omitempty"`

	// Name The name of the person, business or institution at that address.
	Name string `json:"name"`

	// Phone The phone number of the person, business or institution located at that address.
	Phone *string `json:"phone,omitempty"`

	// PostalCode The postal code of that address. It conatins a series of letters or digits or both, sometimes including spaces or punctuation.
	PostalCode string `json:"postalCode"`

	// StateOrRegion The state or region where person, business or institution is located.
	StateOrRegion string `json:"stateOrRegion"`
}

// ChargeDetails Monetary and tax details of the charge.
type ChargeDetails struct {
	// ChargeAmount An amount of money, including units in the form of currency.
	ChargeAmount Money `json:"chargeAmount"`

	// TaxDetails Individual tax details per line item.
	TaxDetails *[]TaxDetail `json:"taxDetails,omitempty"`

	// Type Type of charge applied.
	Type ChargeDetailsType `json:"type"`
}

// ChargeDetailsType Type of charge applied.
type ChargeDetailsType string

// Decimal A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
type Decimal = string

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList = []Error

// InvoiceDetail defines model for InvoiceDetail.
type InvoiceDetail struct {
	// AdditionalDetails Additional details provided by the selling party, for tax-related or other purposes.
	AdditionalDetails *[]AdditionalDetails `json:"additionalDetails,omitempty"`
	BillToParty       *PartyIdentification `json:"billToParty,omitempty"`

	// ChargeDetails Total charge amount details for all line items.
	ChargeDetails *[]ChargeDetails `json:"chargeDetails,omitempty"`

	// InvoiceDate Invoice date.
	InvoiceDate time.Time `json:"invoiceDate"`

	// InvoiceNumber The unique invoice number.
	InvoiceNumber string `json:"invoiceNumber"`

	// InvoiceTotal An amount of money, including units in the form of currency.
	InvoiceTotal Money `json:"invoiceTotal"`

	// Items Provides the details of the items in this invoice.
	Items []InvoiceItem `json:"items"`

	// PaymentTermsCode The payment terms for the invoice.
	PaymentTermsCode *string `json:"paymentTermsCode,omitempty"`

	// ReferenceNumber An additional unique reference number used for regulatory or other purposes.
	ReferenceNumber *string             `json:"referenceNumber,omitempty"`
	RemitToParty    PartyIdentification `json:"remitToParty"`
	ShipFromParty   PartyIdentification `json:"shipFromParty"`

	// ShipToCountryCode Ship-to country code.
	ShipToCountryCode *string `json:"shipToCountryCode,omitempty"`

	// TaxTotals Individual tax details per line item.
	TaxTotals *[]TaxDetail `json:"taxTotals,omitempty"`
}

// InvoiceItem defines model for InvoiceItem.
type InvoiceItem struct {
	// BuyerProductIdentifier Buyer's standard identification number (ASIN) of an item.
	BuyerProductIdentifier *string `json:"buyerProductIdentifier,omitempty"`

	// ChargeDetails Individual charge details per line item.
	ChargeDetails *[]ChargeDetails `json:"chargeDetails,omitempty"`

	// HsnCode Harmonized System of Nomenclature (HSN) tax code. The HSN number cannot contain alphabets.
	HsnCode *string `json:"hsnCode,omitempty"`

	// InvoicedQuantity Details of item quantity.
	InvoicedQuantity ItemQuantity `json:"invoicedQuantity"`

	// ItemSequenceNumber Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
	ItemSequenceNumber string `json:"itemSequenceNumber"`

	// NetCost An amount of money, including units in the form of currency.
	NetCost Money `json:"netCost"`

	// PurchaseOrderNumber The purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.
	PurchaseOrderNumber string `json:"purchaseOrderNumber"`

	// TaxDetails Individual tax details per line item.
	TaxDetails *[]TaxDetail `json:"taxDetails,omitempty"`

	// VendorOrderNumber The vendor's order number for this order.
	VendorOrderNumber *string `json:"vendorOrderNumber,omitempty"`

	// VendorProductIdentifier The vendor selected product identification of the item.
	VendorProductIdentifier *string `json:"vendorProductIdentifier,omitempty"`
}

// ItemQuantity Details of item quantity.
type ItemQuantity struct {
	// Amount Quantity of units available for a specific item.
	Amount int `json:"amount"`

	// UnitOfMeasure Unit of measure for the available quantity.
	UnitOfMeasure string `json:"unitOfMeasure"`
}

// Money An amount of money, including units in the form of currency.
type Money struct {
	// Amount A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
	Amount Decimal `json:"amount"`

	// CurrencyCode Three digit currency code in ISO 4217 format.
	CurrencyCode string `json:"currencyCode"`
}

// PartyIdentification defines model for PartyIdentification.
type PartyIdentification struct {
	// Address Address of the party.
	Address *Address `json:"address,omitempty"`

	// PartyId Assigned Identification for the party.
	PartyId string `json:"partyId"`

	// TaxRegistrationDetails Tax registration details of the entity.
	TaxRegistrationDetails *[]TaxRegistrationDetail `json:"taxRegistrationDetails,omitempty"`
}

// SubmitInvoiceRequest The request schema for the submitInvoice operation.
type SubmitInvoiceRequest struct {
	Invoices *[]InvoiceDetail `json:"invoices,omitempty"`
}

// SubmitInvoiceResponse The response schema for the submitInvoice operation.
type SubmitInvoiceResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList            `json:"errors,omitempty"`
	Payload *TransactionReference `json:"payload,omitempty"`
}

// TaxDetail Details of tax amount applied.
type TaxDetail struct {
	// TaxAmount An amount of money, including units in the form of currency.
	TaxAmount Money `json:"taxAmount"`

	// TaxRate A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
	TaxRate *Decimal `json:"taxRate,omitempty"`

	// TaxType Type of the tax applied.
	TaxType TaxDetailTaxType `json:"taxType"`

	// TaxableAmount An amount of money, including units in the form of currency.
	TaxableAmount *Money `json:"taxableAmount,omitempty"`
}

// TaxDetailTaxType Type of the tax applied.
type TaxDetailTaxType string

// TaxRegistrationDetail Tax registration details of the entity.
type TaxRegistrationDetail struct {
	// TaxRegistrationAddress Address of the party.
	TaxRegistrationAddress *Address `json:"taxRegistrationAddress,omitempty"`

	// TaxRegistrationMessage Tax registration message that can be used for additional tax related details.
	TaxRegistrationMessage *string `json:"taxRegistrationMessage,omitempty"`

	// TaxRegistrationNumber Tax registration number for the entity. For example, VAT ID, Consumption Tax ID.
	TaxRegistrationNumber string `json:"taxRegistrationNumber"`

	// TaxRegistrationType Tax registration type for the entity.
	TaxRegistrationType *TaxRegistrationDetailTaxRegistrationType `json:"taxRegistrationType,omitempty"`
}

// TaxRegistrationDetailTaxRegistrationType Tax registration type for the entity.
type TaxRegistrationDetailTaxRegistrationType string

// TransactionReference defines model for TransactionReference.
type TransactionReference struct {
	// TransactionId GUID to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.
	TransactionId *string `json:"transactionId,omitempty"`
}

// SubmitInvoiceJSONRequestBody defines body for SubmitInvoice for application/json ContentType.
type SubmitInvoiceJSONRequestBody = SubmitInvoiceRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SubmitInvoiceWithBody request with any body
	SubmitInvoiceWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	SubmitInvoice(ctx context.Context, body SubmitInvoiceJSONRequestBody) (*http.Response, error)
}

func (c *Client) SubmitInvoiceWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSubmitInvoiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SubmitInvoice(ctx context.Context, body SubmitInvoiceJSONRequestBody) (*http.Response, error) {
	req, err := NewSubmitInvoiceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewSubmitInvoiceRequest calls the generic SubmitInvoice builder with application/json body
func NewSubmitInvoiceRequest(server string, body SubmitInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitInvoiceRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitInvoiceRequestWithBody generates requests for SubmitInvoice with any type of body
func NewSubmitInvoiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vendor/directFulfillment/payments/v1/invoices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SubmitInvoiceWithBodyWithResponse request with any body
	SubmitInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*SubmitInvoiceResp, error)

	SubmitInvoiceWithResponse(ctx context.Context, body SubmitInvoiceJSONRequestBody) (*SubmitInvoiceResp, error)
}

type SubmitInvoiceResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SubmitInvoiceResponse
	JSON400      *SubmitInvoiceResponse
	JSON403      *SubmitInvoiceResponse
	JSON404      *SubmitInvoiceResponse
	JSON413      *SubmitInvoiceResponse
	JSON415      *SubmitInvoiceResponse
	JSON429      *SubmitInvoiceResponse
	JSON500      *SubmitInvoiceResponse
	JSON503      *SubmitInvoiceResponse
}

// Status returns HTTPResponse.Status
func (r SubmitInvoiceResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitInvoiceResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SubmitInvoiceWithBodyWithResponse request with arbitrary body returning *SubmitInvoiceResp
func (c *ClientWithResponses) SubmitInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*SubmitInvoiceResp, error) {
	rsp, err := c.SubmitInvoiceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitInvoiceResp(rsp)
}

func (c *ClientWithResponses) SubmitInvoiceWithResponse(ctx context.Context, body SubmitInvoiceJSONRequestBody) (*SubmitInvoiceResp, error) {
	rsp, err := c.SubmitInvoice(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitInvoiceResp(rsp)
}

// ParseSubmitInvoiceResp parses an HTTP response from a SubmitInvoiceWithResponse call
func ParseSubmitInvoiceResp(rsp *http.Response) (*SubmitInvoiceResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitInvoiceResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
