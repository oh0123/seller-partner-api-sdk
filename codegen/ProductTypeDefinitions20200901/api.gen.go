// Package ProductTypeDefinitions20200901 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.3 DO NOT EDIT.
package ProductTypeDefinitions20200901

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for ProductTypeDefinitionRequirements.
const (
	ProductTypeDefinitionRequirementsLISTING            ProductTypeDefinitionRequirements = "LISTING"
	ProductTypeDefinitionRequirementsLISTINGOFFERONLY   ProductTypeDefinitionRequirements = "LISTING_OFFER_ONLY"
	ProductTypeDefinitionRequirementsLISTINGPRODUCTONLY ProductTypeDefinitionRequirements = "LISTING_PRODUCT_ONLY"
)

// Defines values for ProductTypeDefinitionRequirementsEnforced.
const (
	ProductTypeDefinitionRequirementsEnforcedENFORCED    ProductTypeDefinitionRequirementsEnforced = "ENFORCED"
	ProductTypeDefinitionRequirementsEnforcedNOTENFORCED ProductTypeDefinitionRequirementsEnforced = "NOT_ENFORCED"
)

// Defines values for SchemaLinkLinkVerb.
const (
	GET SchemaLinkLinkVerb = "GET"
)

// Defines values for GetDefinitionsProductTypeParamsRequirements.
const (
	GetDefinitionsProductTypeParamsRequirementsLISTING            GetDefinitionsProductTypeParamsRequirements = "LISTING"
	GetDefinitionsProductTypeParamsRequirementsLISTINGOFFERONLY   GetDefinitionsProductTypeParamsRequirements = "LISTING_OFFER_ONLY"
	GetDefinitionsProductTypeParamsRequirementsLISTINGPRODUCTONLY GetDefinitionsProductTypeParamsRequirements = "LISTING_PRODUCT_ONLY"
)

// Defines values for GetDefinitionsProductTypeParamsRequirementsEnforced.
const (
	GetDefinitionsProductTypeParamsRequirementsEnforcedENFORCED    GetDefinitionsProductTypeParamsRequirementsEnforced = "ENFORCED"
	GetDefinitionsProductTypeParamsRequirementsEnforcedNOTENFORCED GetDefinitionsProductTypeParamsRequirementsEnforced = "NOT_ENFORCED"
)

// Defines values for GetDefinitionsProductTypeParamsLocale.
const (
	Ar      GetDefinitionsProductTypeParamsLocale = "ar"
	ArAE    GetDefinitionsProductTypeParamsLocale = "ar_AE"
	DEFAULT GetDefinitionsProductTypeParamsLocale = "DEFAULT"
	De      GetDefinitionsProductTypeParamsLocale = "de"
	DeDE    GetDefinitionsProductTypeParamsLocale = "de_DE"
	En      GetDefinitionsProductTypeParamsLocale = "en"
	EnAE    GetDefinitionsProductTypeParamsLocale = "en_AE"
	EnAU    GetDefinitionsProductTypeParamsLocale = "en_AU"
	EnCA    GetDefinitionsProductTypeParamsLocale = "en_CA"
	EnGB    GetDefinitionsProductTypeParamsLocale = "en_GB"
	EnIN    GetDefinitionsProductTypeParamsLocale = "en_IN"
	EnSG    GetDefinitionsProductTypeParamsLocale = "en_SG"
	EnUS    GetDefinitionsProductTypeParamsLocale = "en_US"
	Es      GetDefinitionsProductTypeParamsLocale = "es"
	EsES    GetDefinitionsProductTypeParamsLocale = "es_ES"
	EsMX    GetDefinitionsProductTypeParamsLocale = "es_MX"
	EsUS    GetDefinitionsProductTypeParamsLocale = "es_US"
	Fr      GetDefinitionsProductTypeParamsLocale = "fr"
	FrCA    GetDefinitionsProductTypeParamsLocale = "fr_CA"
	FrFR    GetDefinitionsProductTypeParamsLocale = "fr_FR"
	It      GetDefinitionsProductTypeParamsLocale = "it"
	ItIT    GetDefinitionsProductTypeParamsLocale = "it_IT"
	Ja      GetDefinitionsProductTypeParamsLocale = "ja"
	JaJP    GetDefinitionsProductTypeParamsLocale = "ja_JP"
	Nl      GetDefinitionsProductTypeParamsLocale = "nl"
	NlNL    GetDefinitionsProductTypeParamsLocale = "nl_NL"
	Pl      GetDefinitionsProductTypeParamsLocale = "pl"
	PlPL    GetDefinitionsProductTypeParamsLocale = "pl_PL"
	Pt      GetDefinitionsProductTypeParamsLocale = "pt"
	PtBR    GetDefinitionsProductTypeParamsLocale = "pt_BR"
	PtPT    GetDefinitionsProductTypeParamsLocale = "pt_PT"
	Sv      GetDefinitionsProductTypeParamsLocale = "sv"
	SvSE    GetDefinitionsProductTypeParamsLocale = "sv_SE"
	Tr      GetDefinitionsProductTypeParamsLocale = "tr"
	TrTR    GetDefinitionsProductTypeParamsLocale = "tr_TR"
	Zh      GetDefinitionsProductTypeParamsLocale = "zh"
	ZhCN    GetDefinitionsProductTypeParamsLocale = "zh_CN"
	ZhTW    GetDefinitionsProductTypeParamsLocale = "zh_TW"
)

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList struct {
	Errors []Error `json:"errors"`
}

// ProductType An Amazon product type with a definition available.
type ProductType struct {
	// MarketplaceIds The Amazon marketplace identifiers for which the product type definition is available.
	MarketplaceIds []string `json:"marketplaceIds"`

	// Name The name of the Amazon product type.
	Name string `json:"name"`
}

// ProductTypeDefinition A product type definition represents the attributes and data requirements for a product type in the Amazon catalog. Product type definitions are used interchangeably between the Selling Partner API for Listings Items, Selling Partner API for Catalog Items, and JSON-based listings feeds in the Selling Partner API for Feeds.
type ProductTypeDefinition struct {
	// Locale Locale of the display elements contained in the product type definition.
	Locale string `json:"locale"`

	// MarketplaceIds Amazon marketplace identifiers for which the product type definition is applicable.
	MarketplaceIds []string    `json:"marketplaceIds"`
	MetaSchema     *SchemaLink `json:"metaSchema,omitempty"`

	// ProductType The name of the Amazon product type that this product type definition applies to.
	ProductType string `json:"productType"`

	// ProductTypeVersion The version details for an Amazon product type.
	ProductTypeVersion ProductTypeVersion `json:"productTypeVersion"`

	// PropertyGroups Mapping of property group names to property groups. Property groups represent logical groupings of schema properties that can be used for display or informational purposes.
	PropertyGroups map[string]PropertyGroup `json:"propertyGroups"`

	// Requirements Name of the requirements set represented in this product type definition.
	Requirements ProductTypeDefinitionRequirements `json:"requirements"`

	// RequirementsEnforced Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all of the required attributes being present (such as for partial updates).
	RequirementsEnforced ProductTypeDefinitionRequirementsEnforced `json:"requirementsEnforced"`
	Schema               SchemaLink                                `json:"schema"`
}

// ProductTypeDefinitionRequirements Name of the requirements set represented in this product type definition.
type ProductTypeDefinitionRequirements string

// ProductTypeDefinitionRequirementsEnforced Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all of the required attributes being present (such as for partial updates).
type ProductTypeDefinitionRequirementsEnforced string

// ProductTypeList A list of Amazon product types with definitions available.
type ProductTypeList struct {
	ProductTypes []ProductType `json:"productTypes"`
}

// ProductTypeVersion The version details for an Amazon product type.
type ProductTypeVersion struct {
	// Latest When true, the version indicated by the version identifier is the latest available for the Amazon product type.
	Latest bool `json:"latest"`

	// ReleaseCandidate When true, the version indicated by the version identifier is the prerelease (release candidate) for the Amazon product type.
	ReleaseCandidate *bool `json:"releaseCandidate,omitempty"`

	// Version Version identifier.
	Version string `json:"version"`
}

// PropertyGroup A property group represents a logical grouping of schema properties that can be used for display or informational purposes.
type PropertyGroup struct {
	// Description The description of the property group.
	Description *string `json:"description,omitempty"`

	// PropertyNames The names of the schema properties for the property group.
	PropertyNames *[]string `json:"propertyNames,omitempty"`

	// Title The display label of the property group.
	Title *string `json:"title,omitempty"`
}

// SchemaLink defines model for SchemaLink.
type SchemaLink struct {
	// Checksum Checksum hash of the schema (Base64 MD5). Can be used to verify schema contents, identify changes between schema versions, and for caching.
	Checksum string `json:"checksum"`

	// Link Link to retrieve the schema.
	Link struct {
		// Resource URI resource for the link.
		Resource string `json:"resource"`

		// Verb HTTP method for the link operation.
		Verb SchemaLinkLinkVerb `json:"verb"`
	} `json:"link"`
}

// SchemaLinkLinkVerb HTTP method for the link operation.
type SchemaLinkLinkVerb string

// SearchDefinitionsProductTypesParams defines parameters for SearchDefinitionsProductTypes.
type SearchDefinitionsProductTypesParams struct {
	// Keywords A comma-delimited list of keywords to search product types by.
	Keywords *[]string `form:"keywords,omitempty" json:"keywords,omitempty"`

	// MarketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`
}

// GetDefinitionsProductTypeParams defines parameters for GetDefinitionsProductType.
type GetDefinitionsProductTypeParams struct {
	// SellerId A selling partner identifier. When provided, seller-specific requirements and values are populated within the product type definition schema, such as brand names associated with the selling partner.
	SellerId *string `form:"sellerId,omitempty" json:"sellerId,omitempty"`

	// MarketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
	// Note: This parameter is limited to one marketplaceId at this time.
	MarketplaceIds []string `form:"marketplaceIds" json:"marketplaceIds"`

	// ProductTypeVersion The version of the Amazon product type to retrieve. Defaults to "LATEST",. Prerelease versions of product type definitions may be retrieved with "RELEASE_CANDIDATE". If no prerelease version is currently available, the "LATEST" live version will be provided.
	ProductTypeVersion *string `form:"productTypeVersion,omitempty" json:"productTypeVersion,omitempty"`

	// Requirements The name of the requirements set to retrieve requirements for.
	Requirements *GetDefinitionsProductTypeParamsRequirements `form:"requirements,omitempty" json:"requirements,omitempty"`

	// RequirementsEnforced Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).
	RequirementsEnforced *GetDefinitionsProductTypeParamsRequirementsEnforced `form:"requirementsEnforced,omitempty" json:"requirementsEnforced,omitempty"`

	// Locale Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.
	Locale *GetDefinitionsProductTypeParamsLocale `form:"locale,omitempty" json:"locale,omitempty"`
}

// GetDefinitionsProductTypeParamsRequirements defines parameters for GetDefinitionsProductType.
type GetDefinitionsProductTypeParamsRequirements string

// GetDefinitionsProductTypeParamsRequirementsEnforced defines parameters for GetDefinitionsProductType.
type GetDefinitionsProductTypeParamsRequirementsEnforced string

// GetDefinitionsProductTypeParamsLocale defines parameters for GetDefinitionsProductType.
type GetDefinitionsProductTypeParamsLocale string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SearchDefinitionsProductTypes request
	SearchDefinitionsProductTypes(ctx context.Context, params *SearchDefinitionsProductTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefinitionsProductType request
	GetDefinitionsProductType(ctx context.Context, productType string, params *GetDefinitionsProductTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SearchDefinitionsProductTypes(ctx context.Context, params *SearchDefinitionsProductTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchDefinitionsProductTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefinitionsProductType(ctx context.Context, productType string, params *GetDefinitionsProductTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefinitionsProductTypeRequest(c.Server, productType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSearchDefinitionsProductTypesRequest generates requests for SearchDefinitionsProductTypes
func NewSearchDefinitionsProductTypesRequest(server string, params *SearchDefinitionsProductTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/2020-09-01/productTypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Keywords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keywords", runtime.ParamLocationQuery, *params.Keywords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDefinitionsProductTypeRequest generates requests for GetDefinitionsProductType
func NewGetDefinitionsProductTypeRequest(server string, productType string, params *GetDefinitionsProductTypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productType", runtime.ParamLocationPath, productType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/2020-09-01/productTypes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SellerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sellerId", runtime.ParamLocationQuery, *params.SellerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if params.ProductTypeVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productTypeVersion", runtime.ParamLocationQuery, *params.ProductTypeVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Requirements != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requirements", runtime.ParamLocationQuery, *params.Requirements); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.RequirementsEnforced != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requirementsEnforced", runtime.ParamLocationQuery, *params.RequirementsEnforced); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SearchDefinitionsProductTypesWithResponse request
	SearchDefinitionsProductTypesWithResponse(ctx context.Context, params *SearchDefinitionsProductTypesParams, reqEditors ...RequestEditorFn) (*SearchDefinitionsProductTypesResp, error)

	// GetDefinitionsProductTypeWithResponse request
	GetDefinitionsProductTypeWithResponse(ctx context.Context, productType string, params *GetDefinitionsProductTypeParams, reqEditors ...RequestEditorFn) (*GetDefinitionsProductTypeResp, error)
}

type SearchDefinitionsProductTypesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductTypeList
	JSON400      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r SearchDefinitionsProductTypesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchDefinitionsProductTypesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefinitionsProductTypeResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductTypeDefinition
	JSON400      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r GetDefinitionsProductTypeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefinitionsProductTypeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SearchDefinitionsProductTypesWithResponse request returning *SearchDefinitionsProductTypesResp
func (c *ClientWithResponses) SearchDefinitionsProductTypesWithResponse(ctx context.Context, params *SearchDefinitionsProductTypesParams, reqEditors ...RequestEditorFn) (*SearchDefinitionsProductTypesResp, error) {
	rsp, err := c.SearchDefinitionsProductTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchDefinitionsProductTypesResp(rsp)
}

// GetDefinitionsProductTypeWithResponse request returning *GetDefinitionsProductTypeResp
func (c *ClientWithResponses) GetDefinitionsProductTypeWithResponse(ctx context.Context, productType string, params *GetDefinitionsProductTypeParams, reqEditors ...RequestEditorFn) (*GetDefinitionsProductTypeResp, error) {
	rsp, err := c.GetDefinitionsProductType(ctx, productType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDefinitionsProductTypeResp(rsp)
}

// ParseSearchDefinitionsProductTypesResp parses an HTTP response from a SearchDefinitionsProductTypesWithResponse call
func ParseSearchDefinitionsProductTypesResp(rsp *http.Response) (*SearchDefinitionsProductTypesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchDefinitionsProductTypesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetDefinitionsProductTypeResp parses an HTTP response from a GetDefinitionsProductTypeWithResponse call
func ParseGetDefinitionsProductTypeResp(rsp *http.Response) (*GetDefinitionsProductTypeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefinitionsProductTypeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductTypeDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
