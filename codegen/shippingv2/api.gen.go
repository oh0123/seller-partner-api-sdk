// Package shippingv2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package shippingv2

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
	"time"

	"github.com/bytedance/sonic"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AccessPointAssistanceType.
const (
	SELFASSISTED  AccessPointAssistanceType = "SELF_ASSISTED"
	STAFFASSISTED AccessPointAssistanceType = "STAFF_ASSISTED"
)

// Defines values for AccessPointType.
const (
	AccessPointTypeCAMPUSLOCKER AccessPointType = "CAMPUS_LOCKER"
	AccessPointTypeCAMPUSROOM   AccessPointType = "CAMPUS_ROOM"
	AccessPointTypeCORELOCKER   AccessPointType = "CORE_LOCKER"
	AccessPointTypeDOBBYLOCKER  AccessPointType = "DOBBY_LOCKER"
	AccessPointTypeHELIX        AccessPointType = "HELIX"
	AccessPointTypeN3P          AccessPointType = "3P"
	AccessPointTypeODINLOCKER   AccessPointType = "ODIN_LOCKER"
	AccessPointTypeOMNILOCKER   AccessPointType = "OMNI_LOCKER"
)

// Defines values for ChannelType.
const (
	AMAZON   ChannelType = "AMAZON"
	EXTERNAL ChannelType = "EXTERNAL"
)

// Defines values for ChargeComponentChargeType.
const (
	DISCOUNT ChargeComponentChargeType = "DISCOUNT"
	TAX      ChargeComponentChargeType = "TAX"
)

// Defines values for ClientReferenceDetailClientReferenceType.
const (
	IntegratorMerchantId ClientReferenceDetailClientReferenceType = "IntegratorMerchantId"
	IntegratorShipperId  ClientReferenceDetailClientReferenceType = "IntegratorShipperId"
)

// Defines values for DangerousGoodsDetailsPackingGroup.
const (
	I   DangerousGoodsDetailsPackingGroup = "I"
	II  DangerousGoodsDetailsPackingGroup = "II"
	III DangerousGoodsDetailsPackingGroup = "III"
)

// Defines values for DangerousGoodsDetailsPackingInstruction.
const (
	PI965SECTIONIA DangerousGoodsDetailsPackingInstruction = "PI965_SECTION_IA"
	PI965SECTIONIB DangerousGoodsDetailsPackingInstruction = "PI965_SECTION_IB"
	PI965SECTIONII DangerousGoodsDetailsPackingInstruction = "PI965_SECTION_II"
	PI966SECTIONI  DangerousGoodsDetailsPackingInstruction = "PI966_SECTION_I"
	PI966SECTIONII DangerousGoodsDetailsPackingInstruction = "PI966_SECTION_II"
	PI967SECTIONI  DangerousGoodsDetailsPackingInstruction = "PI967_SECTION_I"
	PI967SECTIONII DangerousGoodsDetailsPackingInstruction = "PI967_SECTION_II"
	PI968SECTIONIA DangerousGoodsDetailsPackingInstruction = "PI968_SECTION_IA"
	PI968SECTIONIB DangerousGoodsDetailsPackingInstruction = "PI968_SECTION_IB"
	PI969SECTIONI  DangerousGoodsDetailsPackingInstruction = "PI969_SECTION_I"
	PI969SECTIONII DangerousGoodsDetailsPackingInstruction = "PI969_SECTION_II"
	PI970SECTIONI  DangerousGoodsDetailsPackingInstruction = "PI970_SECTION_I"
	PI970SECTIONII DangerousGoodsDetailsPackingInstruction = "PI970_SECTION_II"
)

// Defines values for DetailCodes.
const (
	DetailCodesAddressNotFound             DetailCodes = "AddressNotFound"
	DetailCodesBusinessClosed              DetailCodes = "BusinessClosed"
	DetailCodesCancelledByRecipient        DetailCodes = "CancelledByRecipient"
	DetailCodesCustomerUnavailable         DetailCodes = "CustomerUnavailable"
	DetailCodesDamaged                     DetailCodes = "Damaged"
	DetailCodesDeliveredToBehindWheelieBin DetailCodes = "DeliveredToBehindWheelieBin"
	DetailCodesDeliveredToGarage           DetailCodes = "DeliveredToGarage"
	DetailCodesDeliveredToGarden           DetailCodes = "DeliveredToGarden"
	DetailCodesDeliveredToGreenhouse       DetailCodes = "DeliveredToGreenhouse"
	DetailCodesDeliveredToMailRoom         DetailCodes = "DeliveredToMailRoom"
	DetailCodesDeliveredToMailSlot         DetailCodes = "DeliveredToMailSlot"
	DetailCodesDeliveredToNeighbor         DetailCodes = "DeliveredToNeighbor"
	DetailCodesDeliveredToPorch            DetailCodes = "DeliveredToPorch"
	DetailCodesDeliveredToRearDoor         DetailCodes = "DeliveredToRearDoor"
	DetailCodesDeliveredToReceptionist     DetailCodes = "DeliveredToReceptionist"
	DetailCodesDeliveredToShed             DetailCodes = "DeliveredToShed"
	DetailCodesDeliveryAttempted           DetailCodes = "DeliveryAttempted"
	DetailCodesHazmatShipment              DetailCodes = "HazmatShipment"
	DetailCodesIncorrectItems              DetailCodes = "IncorrectItems"
	DetailCodesNotRequired                 DetailCodes = "NotRequired"
	DetailCodesOtpNotAvailable             DetailCodes = "OtpNotAvailable"
	DetailCodesPaymentNotReady             DetailCodes = "PaymentNotReady"
	DetailCodesRejected                    DetailCodes = "Rejected"
	DetailCodesSigned                      DetailCodes = "Signed"
	DetailCodesUnableToAccess              DetailCodes = "UnableToAccess"
	DetailCodesUnableToContactRecipient    DetailCodes = "UnableToContactRecipient"
	DetailCodesUndeliverable               DetailCodes = "Undeliverable"
)

// Defines values for DimensionsUnit.
const (
	DimensionsUnitCENTIMETER DimensionsUnit = "CENTIMETER"
	DimensionsUnitINCH       DimensionsUnit = "INCH"
)

// Defines values for DocumentFormat.
const (
	PDF DocumentFormat = "PDF"
	PNG DocumentFormat = "PNG"
	ZPL DocumentFormat = "ZPL"
)

// Defines values for DocumentSizeUnit.
const (
	DocumentSizeUnitCENTIMETER DocumentSizeUnit = "CENTIMETER"
	DocumentSizeUnitINCH       DocumentSizeUnit = "INCH"
)

// Defines values for DocumentType.
const (
	CUSTOMFORM DocumentType = "CUSTOM_FORM"
	LABEL      DocumentType = "LABEL"
	PACKSLIP   DocumentType = "PACKSLIP"
	RECEIPT    DocumentType = "RECEIPT"
)

// Defines values for EventCode.
const (
	EventCodeArrivedAtCarrierFacility EventCode = "ArrivedAtCarrierFacility"
	EventCodeAvailableForPickup       EventCode = "AvailableForPickup"
	EventCodeDelivered                EventCode = "Delivered"
	EventCodeDeliveryAttempted        EventCode = "DeliveryAttempted"
	EventCodeDeparted                 EventCode = "Departed"
	EventCodeLost                     EventCode = "Lost"
	EventCodeOutForDelivery           EventCode = "OutForDelivery"
	EventCodePickupCancelled          EventCode = "PickupCancelled"
	EventCodePickupDone               EventCode = "PickupDone"
	EventCodeReadyForReceive          EventCode = "ReadyForReceive"
	EventCodeRejected                 EventCode = "Rejected"
	EventCodeReturnInitiated          EventCode = "ReturnInitiated"
	EventCodeUndeliverable            EventCode = "Undeliverable"
)

// Defines values for IneligibilityReasonCode.
const (
	LATEDELIVERY                  IneligibilityReasonCode = "LATE_DELIVERY"
	NOCOVERAGE                    IneligibilityReasonCode = "NO_COVERAGE"
	PICKUPSLOTRESTRICTION         IneligibilityReasonCode = "PICKUP_SLOT_RESTRICTION"
	PROGRAMCONSTRAINTS            IneligibilityReasonCode = "PROGRAM_CONSTRAINTS"
	SIZERESTRICTIONS              IneligibilityReasonCode = "SIZE_RESTRICTIONS"
	TERMSANDCONDITIONSNOTACCEPTED IneligibilityReasonCode = "TERMS_AND_CONDITIONS_NOT_ACCEPTED"
	UNKNOWN                       IneligibilityReasonCode = "UNKNOWN"
	UNSUPPORTEDVAS                IneligibilityReasonCode = "UNSUPPORTED_VAS"
	VASCOMBINATIONRESTRICTION     IneligibilityReasonCode = "VAS_COMBINATION_RESTRICTION"
	WEIGHTRESTRICTIONS            IneligibilityReasonCode = "WEIGHT_RESTRICTIONS"
)

// Defines values for LiquidVolumeUnit.
const (
	C    LiquidVolumeUnit = "C"
	FLOZ LiquidVolumeUnit = "FL_OZ"
	GAL  LiquidVolumeUnit = "GAL"
	L    LiquidVolumeUnit = "L"
	ML   LiquidVolumeUnit = "ML"
	PT   LiquidVolumeUnit = "PT"
	QT   LiquidVolumeUnit = "QT"
)

// Defines values for NdrAction.
const (
	REATTEMPT  NdrAction = "REATTEMPT"
	RESCHEDULE NdrAction = "RESCHEDULE"
	RTO        NdrAction = "RTO"
)

// Defines values for PaymentType.
const (
	PAYDIRECTTOCARRIER PaymentType = "PAY_DIRECT_TO_CARRIER"
	PAYTHROUGHAMAZON   PaymentType = "PAY_THROUGH_AMAZON"
)

// Defines values for RateItemID.
const (
	ADDITIONALSURCHARGE         RateItemID = "ADDITIONAL_SURCHARGE"
	ADULTSIGNATURECONFIRMATION  RateItemID = "ADULT_SIGNATURE_CONFIRMATION"
	AMAZONSPONSOREDDISCOUNT     RateItemID = "AMAZON_SPONSORED_DISCOUNT"
	BASERATE                    RateItemID = "BASE_RATE"
	COD                         RateItemID = "COD"
	CONGESTIONCHARGE            RateItemID = "CONGESTION_CHARGE"
	DECLAREDVALUE               RateItemID = "DECLARED_VALUE"
	DELIVERYAREASURCHARGE       RateItemID = "DELIVERY_AREA_SURCHARGE"
	DELIVERYCONFIRMATION        RateItemID = "DELIVERY_CONFIRMATION"
	FUELSURCHARGE               RateItemID = "FUEL_SURCHARGE"
	HIDDENPOSTAGE               RateItemID = "HIDDEN_POSTAGE"
	IMPLIEDLIABILITY            RateItemID = "IMPLIED_LIABILITY"
	IMPORTDUTYCHARGE            RateItemID = "IMPORT_DUTY_CHARGE"
	INSPECTIONCHARGE            RateItemID = "INSPECTION_CHARGE"
	INSURANCE                   RateItemID = "INSURANCE"
	INTEGRATORSPONSOREDDISCOUNT RateItemID = "INTEGRATOR_SPONSORED_DISCOUNT"
	NOCONFIRMATION              RateItemID = "NO_CONFIRMATION"
	NOSATURDAYDELIVERY          RateItemID = "NO_SATURDAY_DELIVERY"
	OVERSIZESURCHARGE           RateItemID = "OVERSIZE_SURCHARGE"
	REBATE                      RateItemID = "REBATE"
	RESIDENTIALSURCHARGE        RateItemID = "RESIDENTIAL_SURCHARGE"
	SIGNATURECONFIRMATION       RateItemID = "SIGNATURE_CONFIRMATION"
	SUNDAYHOLIDAYDELIVERY       RateItemID = "SUNDAY_HOLIDAY_DELIVERY"
	SURCHARGE                   RateItemID = "SURCHARGE"
	TRANSACTIONFEE              RateItemID = "TRANSACTION_FEE"
	VAT                         RateItemID = "VAT"
	WAIVESIGNATURE              RateItemID = "WAIVE_SIGNATURE"
	WAYBILLCHARGE               RateItemID = "WAYBILL_CHARGE"
)

// Defines values for RateItemType.
const (
	INCLUDED  RateItemType = "INCLUDED"
	MANDATORY RateItemType = "MANDATORY"
	OPTIONAL  RateItemType = "OPTIONAL"
)

// Defines values for ShipmentType.
const (
	FORWARD ShipmentType = "FORWARD"
	RETURNS ShipmentType = "RETURNS"
)

// Defines values for Status.
const (
	AwaitingCustomerPickup Status = "AwaitingCustomerPickup"
	Delivered              Status = "Delivered"
	DeliveryAttempted      Status = "DeliveryAttempted"
	InTransit              Status = "InTransit"
	Lost                   Status = "Lost"
	OutForDelivery         Status = "OutForDelivery"
	PickupCancelled        Status = "PickupCancelled"
	PreTransit             Status = "PreTransit"
	Rejected               Status = "Rejected"
	Undeliverable          Status = "Undeliverable"
)

// Defines values for TaxType.
const (
	GST TaxType = "GST"
)

// Defines values for WeightUnit.
const (
	GRAM     WeightUnit = "GRAM"
	KILOGRAM WeightUnit = "KILOGRAM"
	OUNCE    WeightUnit = "OUNCE"
	POUND    WeightUnit = "POUND"
)

// Defines values for GetAccessPointsParamsAccessPointTypes.
const (
	GetAccessPointsParamsAccessPointTypesCAMPUSLOCKER GetAccessPointsParamsAccessPointTypes = "CAMPUS_LOCKER"
	GetAccessPointsParamsAccessPointTypesCAMPUSROOM   GetAccessPointsParamsAccessPointTypes = "CAMPUS_ROOM"
	GetAccessPointsParamsAccessPointTypesCORELOCKER   GetAccessPointsParamsAccessPointTypes = "CORE_LOCKER"
	GetAccessPointsParamsAccessPointTypesDOBBYLOCKER  GetAccessPointsParamsAccessPointTypes = "DOBBY_LOCKER"
	GetAccessPointsParamsAccessPointTypesHELIX        GetAccessPointsParamsAccessPointTypes = "HELIX"
	GetAccessPointsParamsAccessPointTypesN3P          GetAccessPointsParamsAccessPointTypes = "3P"
	GetAccessPointsParamsAccessPointTypesODINLOCKER   GetAccessPointsParamsAccessPointTypes = "ODIN_LOCKER"
	GetAccessPointsParamsAccessPointTypesOMNILOCKER   GetAccessPointsParamsAccessPointTypes = "OMNI_LOCKER"
)

// Defines values for GetAccessPointsParamsXAmznShippingBusinessId.
const (
	GetAccessPointsParamsXAmznShippingBusinessIdAmazonShippingEG  GetAccessPointsParamsXAmznShippingBusinessId = "AmazonShipping_EG"
	GetAccessPointsParamsXAmznShippingBusinessIdAmazonShippingES  GetAccessPointsParamsXAmznShippingBusinessId = "AmazonShipping_ES"
	GetAccessPointsParamsXAmznShippingBusinessIdAmazonShippingFR  GetAccessPointsParamsXAmznShippingBusinessId = "AmazonShipping_FR"
	GetAccessPointsParamsXAmznShippingBusinessIdAmazonShippingIN  GetAccessPointsParamsXAmznShippingBusinessId = "AmazonShipping_IN"
	GetAccessPointsParamsXAmznShippingBusinessIdAmazonShippingIT  GetAccessPointsParamsXAmznShippingBusinessId = "AmazonShipping_IT"
	GetAccessPointsParamsXAmznShippingBusinessIdAmazonShippingJP  GetAccessPointsParamsXAmznShippingBusinessId = "AmazonShipping_JP"
	GetAccessPointsParamsXAmznShippingBusinessIdAmazonShippingSA  GetAccessPointsParamsXAmznShippingBusinessId = "AmazonShipping_SA"
	GetAccessPointsParamsXAmznShippingBusinessIdAmazonShippingUAE GetAccessPointsParamsXAmznShippingBusinessId = "AmazonShipping_UAE"
	GetAccessPointsParamsXAmznShippingBusinessIdAmazonShippingUK  GetAccessPointsParamsXAmznShippingBusinessId = "AmazonShipping_UK"
	GetAccessPointsParamsXAmznShippingBusinessIdAmazonShippingUS  GetAccessPointsParamsXAmznShippingBusinessId = "AmazonShipping_US"
)

// Defines values for SubmitNdrFeedbackParamsXAmznShippingBusinessId.
const (
	SubmitNdrFeedbackParamsXAmznShippingBusinessIdAmazonShippingEG  SubmitNdrFeedbackParamsXAmznShippingBusinessId = "AmazonShipping_EG"
	SubmitNdrFeedbackParamsXAmznShippingBusinessIdAmazonShippingES  SubmitNdrFeedbackParamsXAmznShippingBusinessId = "AmazonShipping_ES"
	SubmitNdrFeedbackParamsXAmznShippingBusinessIdAmazonShippingFR  SubmitNdrFeedbackParamsXAmznShippingBusinessId = "AmazonShipping_FR"
	SubmitNdrFeedbackParamsXAmznShippingBusinessIdAmazonShippingIN  SubmitNdrFeedbackParamsXAmznShippingBusinessId = "AmazonShipping_IN"
	SubmitNdrFeedbackParamsXAmznShippingBusinessIdAmazonShippingIT  SubmitNdrFeedbackParamsXAmznShippingBusinessId = "AmazonShipping_IT"
	SubmitNdrFeedbackParamsXAmznShippingBusinessIdAmazonShippingJP  SubmitNdrFeedbackParamsXAmznShippingBusinessId = "AmazonShipping_JP"
	SubmitNdrFeedbackParamsXAmznShippingBusinessIdAmazonShippingSA  SubmitNdrFeedbackParamsXAmznShippingBusinessId = "AmazonShipping_SA"
	SubmitNdrFeedbackParamsXAmznShippingBusinessIdAmazonShippingUAE SubmitNdrFeedbackParamsXAmznShippingBusinessId = "AmazonShipping_UAE"
	SubmitNdrFeedbackParamsXAmznShippingBusinessIdAmazonShippingUK  SubmitNdrFeedbackParamsXAmznShippingBusinessId = "AmazonShipping_UK"
	SubmitNdrFeedbackParamsXAmznShippingBusinessIdAmazonShippingUS  SubmitNdrFeedbackParamsXAmznShippingBusinessId = "AmazonShipping_US"
)

// Defines values for OneClickShipmentParamsXAmznShippingBusinessId.
const (
	OneClickShipmentParamsXAmznShippingBusinessIdAmazonShippingEG  OneClickShipmentParamsXAmznShippingBusinessId = "AmazonShipping_EG"
	OneClickShipmentParamsXAmznShippingBusinessIdAmazonShippingES  OneClickShipmentParamsXAmznShippingBusinessId = "AmazonShipping_ES"
	OneClickShipmentParamsXAmznShippingBusinessIdAmazonShippingFR  OneClickShipmentParamsXAmznShippingBusinessId = "AmazonShipping_FR"
	OneClickShipmentParamsXAmznShippingBusinessIdAmazonShippingIN  OneClickShipmentParamsXAmznShippingBusinessId = "AmazonShipping_IN"
	OneClickShipmentParamsXAmznShippingBusinessIdAmazonShippingIT  OneClickShipmentParamsXAmznShippingBusinessId = "AmazonShipping_IT"
	OneClickShipmentParamsXAmznShippingBusinessIdAmazonShippingJP  OneClickShipmentParamsXAmznShippingBusinessId = "AmazonShipping_JP"
	OneClickShipmentParamsXAmznShippingBusinessIdAmazonShippingSA  OneClickShipmentParamsXAmznShippingBusinessId = "AmazonShipping_SA"
	OneClickShipmentParamsXAmznShippingBusinessIdAmazonShippingUAE OneClickShipmentParamsXAmznShippingBusinessId = "AmazonShipping_UAE"
	OneClickShipmentParamsXAmznShippingBusinessIdAmazonShippingUK  OneClickShipmentParamsXAmznShippingBusinessId = "AmazonShipping_UK"
	OneClickShipmentParamsXAmznShippingBusinessIdAmazonShippingUS  OneClickShipmentParamsXAmznShippingBusinessId = "AmazonShipping_US"
)

// Defines values for PurchaseShipmentParamsXAmznShippingBusinessId.
const (
	PurchaseShipmentParamsXAmznShippingBusinessIdAmazonShippingEG  PurchaseShipmentParamsXAmznShippingBusinessId = "AmazonShipping_EG"
	PurchaseShipmentParamsXAmznShippingBusinessIdAmazonShippingES  PurchaseShipmentParamsXAmznShippingBusinessId = "AmazonShipping_ES"
	PurchaseShipmentParamsXAmznShippingBusinessIdAmazonShippingFR  PurchaseShipmentParamsXAmznShippingBusinessId = "AmazonShipping_FR"
	PurchaseShipmentParamsXAmznShippingBusinessIdAmazonShippingIN  PurchaseShipmentParamsXAmznShippingBusinessId = "AmazonShipping_IN"
	PurchaseShipmentParamsXAmznShippingBusinessIdAmazonShippingIT  PurchaseShipmentParamsXAmznShippingBusinessId = "AmazonShipping_IT"
	PurchaseShipmentParamsXAmznShippingBusinessIdAmazonShippingJP  PurchaseShipmentParamsXAmznShippingBusinessId = "AmazonShipping_JP"
	PurchaseShipmentParamsXAmznShippingBusinessIdAmazonShippingSA  PurchaseShipmentParamsXAmznShippingBusinessId = "AmazonShipping_SA"
	PurchaseShipmentParamsXAmznShippingBusinessIdAmazonShippingUAE PurchaseShipmentParamsXAmznShippingBusinessId = "AmazonShipping_UAE"
	PurchaseShipmentParamsXAmznShippingBusinessIdAmazonShippingUK  PurchaseShipmentParamsXAmznShippingBusinessId = "AmazonShipping_UK"
	PurchaseShipmentParamsXAmznShippingBusinessIdAmazonShippingUS  PurchaseShipmentParamsXAmznShippingBusinessId = "AmazonShipping_US"
)

// Defines values for GetRatesParamsXAmznShippingBusinessId.
const (
	GetRatesParamsXAmznShippingBusinessIdAmazonShippingEG  GetRatesParamsXAmznShippingBusinessId = "AmazonShipping_EG"
	GetRatesParamsXAmznShippingBusinessIdAmazonShippingES  GetRatesParamsXAmznShippingBusinessId = "AmazonShipping_ES"
	GetRatesParamsXAmznShippingBusinessIdAmazonShippingFR  GetRatesParamsXAmznShippingBusinessId = "AmazonShipping_FR"
	GetRatesParamsXAmznShippingBusinessIdAmazonShippingIN  GetRatesParamsXAmznShippingBusinessId = "AmazonShipping_IN"
	GetRatesParamsXAmznShippingBusinessIdAmazonShippingIT  GetRatesParamsXAmznShippingBusinessId = "AmazonShipping_IT"
	GetRatesParamsXAmznShippingBusinessIdAmazonShippingJP  GetRatesParamsXAmznShippingBusinessId = "AmazonShipping_JP"
	GetRatesParamsXAmznShippingBusinessIdAmazonShippingSA  GetRatesParamsXAmznShippingBusinessId = "AmazonShipping_SA"
	GetRatesParamsXAmznShippingBusinessIdAmazonShippingUAE GetRatesParamsXAmznShippingBusinessId = "AmazonShipping_UAE"
	GetRatesParamsXAmznShippingBusinessIdAmazonShippingUK  GetRatesParamsXAmznShippingBusinessId = "AmazonShipping_UK"
	GetRatesParamsXAmznShippingBusinessIdAmazonShippingUS  GetRatesParamsXAmznShippingBusinessId = "AmazonShipping_US"
)

// Defines values for CancelShipmentParamsXAmznShippingBusinessId.
const (
	CancelShipmentParamsXAmznShippingBusinessIdAmazonShippingEG  CancelShipmentParamsXAmznShippingBusinessId = "AmazonShipping_EG"
	CancelShipmentParamsXAmznShippingBusinessIdAmazonShippingES  CancelShipmentParamsXAmznShippingBusinessId = "AmazonShipping_ES"
	CancelShipmentParamsXAmznShippingBusinessIdAmazonShippingFR  CancelShipmentParamsXAmznShippingBusinessId = "AmazonShipping_FR"
	CancelShipmentParamsXAmznShippingBusinessIdAmazonShippingIN  CancelShipmentParamsXAmznShippingBusinessId = "AmazonShipping_IN"
	CancelShipmentParamsXAmznShippingBusinessIdAmazonShippingIT  CancelShipmentParamsXAmznShippingBusinessId = "AmazonShipping_IT"
	CancelShipmentParamsXAmznShippingBusinessIdAmazonShippingJP  CancelShipmentParamsXAmznShippingBusinessId = "AmazonShipping_JP"
	CancelShipmentParamsXAmznShippingBusinessIdAmazonShippingSA  CancelShipmentParamsXAmznShippingBusinessId = "AmazonShipping_SA"
	CancelShipmentParamsXAmznShippingBusinessIdAmazonShippingUAE CancelShipmentParamsXAmznShippingBusinessId = "AmazonShipping_UAE"
	CancelShipmentParamsXAmznShippingBusinessIdAmazonShippingUK  CancelShipmentParamsXAmznShippingBusinessId = "AmazonShipping_UK"
	CancelShipmentParamsXAmznShippingBusinessIdAmazonShippingUS  CancelShipmentParamsXAmznShippingBusinessId = "AmazonShipping_US"
)

// Defines values for GetShipmentDocumentsParamsXAmznShippingBusinessId.
const (
	GetShipmentDocumentsParamsXAmznShippingBusinessIdAmazonShippingEG  GetShipmentDocumentsParamsXAmznShippingBusinessId = "AmazonShipping_EG"
	GetShipmentDocumentsParamsXAmznShippingBusinessIdAmazonShippingES  GetShipmentDocumentsParamsXAmznShippingBusinessId = "AmazonShipping_ES"
	GetShipmentDocumentsParamsXAmznShippingBusinessIdAmazonShippingFR  GetShipmentDocumentsParamsXAmznShippingBusinessId = "AmazonShipping_FR"
	GetShipmentDocumentsParamsXAmznShippingBusinessIdAmazonShippingIN  GetShipmentDocumentsParamsXAmznShippingBusinessId = "AmazonShipping_IN"
	GetShipmentDocumentsParamsXAmznShippingBusinessIdAmazonShippingIT  GetShipmentDocumentsParamsXAmznShippingBusinessId = "AmazonShipping_IT"
	GetShipmentDocumentsParamsXAmznShippingBusinessIdAmazonShippingJP  GetShipmentDocumentsParamsXAmznShippingBusinessId = "AmazonShipping_JP"
	GetShipmentDocumentsParamsXAmznShippingBusinessIdAmazonShippingSA  GetShipmentDocumentsParamsXAmznShippingBusinessId = "AmazonShipping_SA"
	GetShipmentDocumentsParamsXAmznShippingBusinessIdAmazonShippingUAE GetShipmentDocumentsParamsXAmznShippingBusinessId = "AmazonShipping_UAE"
	GetShipmentDocumentsParamsXAmznShippingBusinessIdAmazonShippingUK  GetShipmentDocumentsParamsXAmznShippingBusinessId = "AmazonShipping_UK"
	GetShipmentDocumentsParamsXAmznShippingBusinessIdAmazonShippingUS  GetShipmentDocumentsParamsXAmznShippingBusinessId = "AmazonShipping_US"
)

// Defines values for GetTrackingParamsXAmznShippingBusinessId.
const (
	GetTrackingParamsXAmznShippingBusinessIdAmazonShippingEG  GetTrackingParamsXAmznShippingBusinessId = "AmazonShipping_EG"
	GetTrackingParamsXAmznShippingBusinessIdAmazonShippingES  GetTrackingParamsXAmznShippingBusinessId = "AmazonShipping_ES"
	GetTrackingParamsXAmznShippingBusinessIdAmazonShippingFR  GetTrackingParamsXAmznShippingBusinessId = "AmazonShipping_FR"
	GetTrackingParamsXAmznShippingBusinessIdAmazonShippingIN  GetTrackingParamsXAmznShippingBusinessId = "AmazonShipping_IN"
	GetTrackingParamsXAmznShippingBusinessIdAmazonShippingIT  GetTrackingParamsXAmznShippingBusinessId = "AmazonShipping_IT"
	GetTrackingParamsXAmznShippingBusinessIdAmazonShippingJP  GetTrackingParamsXAmznShippingBusinessId = "AmazonShipping_JP"
	GetTrackingParamsXAmznShippingBusinessIdAmazonShippingSA  GetTrackingParamsXAmznShippingBusinessId = "AmazonShipping_SA"
	GetTrackingParamsXAmznShippingBusinessIdAmazonShippingUAE GetTrackingParamsXAmznShippingBusinessId = "AmazonShipping_UAE"
	GetTrackingParamsXAmznShippingBusinessIdAmazonShippingUK  GetTrackingParamsXAmznShippingBusinessId = "AmazonShipping_UK"
	GetTrackingParamsXAmznShippingBusinessIdAmazonShippingUS  GetTrackingParamsXAmznShippingBusinessId = "AmazonShipping_US"
)

// AccessPoint Access point details
type AccessPoint struct {
	// AccessPointId Unique identifier for the access point
	AccessPointId *AccessPointId `json:"accessPointId,omitempty"`

	// AccessibilityAttributes Defines the accessibility details of the access point.
	AccessibilityAttributes *AccessibilityAttributes `json:"accessibilityAttributes,omitempty"`

	// Address The address.
	Address                 *Address                   `json:"address,omitempty"`
	AssistanceType          *AccessPointAssistanceType `json:"assistanceType,omitempty"`
	ExceptionOperatingHours *[]ExceptionOperatingHours `json:"exceptionOperatingHours,omitempty"`

	// Name Name of entity (store/hub etc) where this access point is located
	Name *string `json:"name,omitempty"`

	// Score The score of access point, based on proximity to postal code and sorting preference. This can be used to sort access point results on shipper's end.
	Score *string `json:"score,omitempty"`

	// StandardOperatingHours Map of day of the week to operating hours of that day
	StandardOperatingHours *DayOfWeekTimeMap `json:"standardOperatingHours,omitempty"`

	// Timezone Timezone of access point
	Timezone *string `json:"timezone,omitempty"`

	// Type The type of access point, like counter (HELIX), lockers, etc.
	Type *AccessPointType `json:"type,omitempty"`
}

// AccessPointAssistanceType defines model for AccessPoint.AssistanceType.
type AccessPointAssistanceType string

// AccessPointDetails defines model for AccessPointDetails.
type AccessPointDetails struct {
	// AccessPointId Unique identifier for the access point
	AccessPointId *AccessPointId `json:"accessPointId,omitempty"`
}

// AccessPointId Unique identifier for the access point
type AccessPointId = string

// AccessPointList List of relevant Access points requested by shipper. These access points are sorted by proximity to postal code, and are limited to 40. We have internally defined a radius value to render relevant results.
type AccessPointList = []AccessPoint

// AccessPointType The type of access point, like counter (HELIX), lockers, etc.
type AccessPointType string

// AccessPointsMap Map of type of access point to list of access points
type AccessPointsMap map[string]AccessPointList

// AccessibilityAttributes Defines the accessibility details of the access point.
type AccessibilityAttributes struct {
	// Distance The approximate distance of access point from input postalCode's centroid.
	Distance *string `json:"distance,omitempty"`

	// DriveTime The approximate (static) drive time from input postal code's centroid.
	DriveTime *int `json:"driveTime,omitempty"`
}

// AdditionalAddressNotes Address notes to re-attempt delivery with.
type AdditionalAddressNotes = string

// Address The address.
type Address struct {
	// AddressLine1 The first line of the address.
	AddressLine1 string `json:"addressLine1"`

	// AddressLine2 Additional address information, if required.
	AddressLine2 *string `json:"addressLine2,omitempty"`

	// AddressLine3 Additional address information, if required.
	AddressLine3 *string `json:"addressLine3,omitempty"`

	// City The city or town where the person, business or institution is located.
	City City `json:"city"`

	// CompanyName The name of the business or institution associated with the address.
	CompanyName *string `json:"companyName,omitempty"`

	// CountryCode The two digit country code. Follows ISO 3166-1 alpha-2 format.
	CountryCode CountryCode `json:"countryCode"`

	// Email The email address of the contact associated with the address.
	Email *string `json:"email,omitempty"`

	// Geocode Defines the latitude and longitude of the access point.
	Geocode *Geocode `json:"geocode,omitempty"`

	// Name The name of the person, business or institution at the address.
	Name string `json:"name"`

	// PhoneNumber The phone number of the person, business or institution located at that address, including the country calling code.
	PhoneNumber *string `json:"phoneNumber,omitempty"`

	// PostalCode The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
	PostalCode PostalCode `json:"postalCode"`

	// StateOrRegion The state, county or region where the person, business or institution is located.
	StateOrRegion StateOrRegion `json:"stateOrRegion"`
}

// AlternateLegTrackingId The carrier generated reverse identifier for a returned package in a purchased shipment.
type AlternateLegTrackingId = string

// AmazonOrderDetails Amazon order information. This is required if the shipment source channel is Amazon.
type AmazonOrderDetails struct {
	// OrderId The Amazon order ID associated with the Amazon order fulfilled by this shipment.
	OrderId string `json:"orderId"`
}

// AmazonShipmentDetails Amazon shipment information.
type AmazonShipmentDetails struct {
	// ShipmentId This attribute is required only for a Direct Fulfillment shipment. This is the encrypted shipment ID.
	ShipmentId string `json:"shipmentId"`
}

// AvailableValueAddedServiceGroup The value-added services available for purchase with a shipping service offering.
type AvailableValueAddedServiceGroup struct {
	// GroupDescription The name of the value-added service group.
	GroupDescription string `json:"groupDescription"`

	// GroupId The type of the value-added service group.
	GroupId string `json:"groupId"`

	// IsRequired When true, one or more of the value-added services listed must be specified.
	IsRequired bool `json:"isRequired"`

	// ValueAddedServices A list of optional value-added services available for purchase with a shipping service offering.
	ValueAddedServices *[]ValueAddedService `json:"valueAddedServices,omitempty"`
}

// AvailableValueAddedServiceGroupList A list of value-added services available for a shipping service offering.
type AvailableValueAddedServiceGroupList = []AvailableValueAddedServiceGroup

// Benefits Representing the included/excluded benefits that we offer for each ShippingOffering/Rate. Benefits being services provided by Amazon when sellers purchase shipping through Amazon.
type Benefits struct {
	// ExcludedBenefits A list of excluded benefit. Refer to the ExcludeBenefit object for further documentation
	ExcludedBenefits ExcludedBenefits `json:"excludedBenefits"`

	// IncludedBenefits A list of included benefits.
	IncludedBenefits IncludedBenefits `json:"includedBenefits"`
}

// CancelShipmentResponse Response schema for the cancelShipment operation.
type CancelShipmentResponse struct {
	// Payload The payload for the cancelShipment operation.
	Payload *CancelShipmentResult `json:"payload,omitempty"`
}

// CancelShipmentResult The payload for the cancelShipment operation.
type CancelShipmentResult map[string]interface{}

// Carrier Carrier Related Info
type Carrier struct {
	// Id The carrier identifier for the offering, provided by the carrier.
	Id CarrierId `json:"id"`

	// Name The carrier name for the offering.
	Name CarrierName `json:"name"`
}

// CarrierId The carrier identifier for the offering, provided by the carrier.
type CarrierId = string

// CarrierName The carrier name for the offering.
type CarrierName = string

// ChannelDetails Shipment source channel related information.
type ChannelDetails struct {
	// AmazonOrderDetails Amazon order information. This is required if the shipment source channel is Amazon.
	AmazonOrderDetails *AmazonOrderDetails `json:"amazonOrderDetails,omitempty"`

	// AmazonShipmentDetails Amazon shipment information.
	AmazonShipmentDetails *AmazonShipmentDetails `json:"amazonShipmentDetails,omitempty"`

	// ChannelType The shipment source channel type.
	ChannelType ChannelType `json:"channelType"`
}

// ChannelType The shipment source channel type.
type ChannelType string

// ChargeComponent The type and amount of a charge applied on a package.
type ChargeComponent struct {
	// Amount The monetary value in the currency indicated, in ISO 4217 standard format.
	Amount *Currency `json:"amount,omitempty"`

	// ChargeType The type of charge.
	ChargeType *ChargeComponentChargeType `json:"chargeType,omitempty"`
}

// ChargeComponentChargeType The type of charge.
type ChargeComponentChargeType string

// ChargeList A list of charges based on the shipping service charges applied on a package.
type ChargeList = []ChargeComponent

// City The city or town where the person, business or institution is located.
type City = string

// ClientReferenceDetail Client Reference Details
type ClientReferenceDetail struct {
	// ClientReferenceId The Client Reference Id.
	ClientReferenceId string `json:"clientReferenceId"`

	// ClientReferenceType Client Reference type.
	ClientReferenceType ClientReferenceDetailClientReferenceType `json:"clientReferenceType"`
}

// ClientReferenceDetailClientReferenceType Client Reference type.
type ClientReferenceDetailClientReferenceType string

// ClientReferenceDetails Object to pass additional information about the MCI Integrator shipperType: List of ClientReferenceDetail
type ClientReferenceDetails = []ClientReferenceDetail

// CollectOnDelivery The amount to collect on delivery.
type CollectOnDelivery struct {
	// Amount The monetary value in the currency indicated, in ISO 4217 standard format.
	Amount Currency `json:"amount"`
}

// Contents A Base64 encoded string of the file contents.
type Contents = string

// CountryCode The two digit country code. Follows ISO 3166-1 alpha-2 format.
type CountryCode = string

// Currency The monetary value in the currency indicated, in ISO 4217 standard format.
type Currency struct {
	// Unit The ISO 4217 format 3-character currency code.
	Unit string `json:"unit"`

	// Value The monetary value.
	Value float32 `json:"value"`
}

// DangerousGoodsDetails Details related to any dangerous goods/items that are being shipped.
type DangerousGoodsDetails struct {
	// PackingGroup The specific packaging group of the item being shipped.
	PackingGroup *DangerousGoodsDetailsPackingGroup `json:"packingGroup,omitempty"`

	// PackingInstruction The specific packing instruction of the item being shipped.
	PackingInstruction *DangerousGoodsDetailsPackingInstruction `json:"packingInstruction,omitempty"`

	// TransportationRegulatoryClass The specific regulatory class  of the item being shipped.
	TransportationRegulatoryClass *string `json:"transportationRegulatoryClass,omitempty"`

	// UnitedNationsRegulatoryId The specific UNID of the item being shipped.
	UnitedNationsRegulatoryId *string `json:"unitedNationsRegulatoryId,omitempty"`
}

// DangerousGoodsDetailsPackingGroup The specific packaging group of the item being shipped.
type DangerousGoodsDetailsPackingGroup string

// DangerousGoodsDetailsPackingInstruction The specific packing instruction of the item being shipped.
type DangerousGoodsDetailsPackingInstruction string

// DateRange Date Range for query the results.
type DateRange struct {
	// EndDate end date for query.
	EndDate *string `json:"endDate,omitempty"`

	// StartDate Start Date for query .
	StartDate *string `json:"startDate,omitempty"`
}

// DayOfWeekTimeMap Map of day of the week to operating hours of that day
type DayOfWeekTimeMap map[string]OperatingHours

// DetailCodes A list of codes used to provide additional shipment information.
type DetailCodes string

// Dimensions A set of measurements for a three-dimensional object.
type Dimensions struct {
	// Height The height of the package.
	Height float32 `json:"height"`

	// Length The length of the package.
	Length float32 `json:"length"`

	// Unit The unit of measurement.
	Unit DimensionsUnit `json:"unit"`

	// Width The width of the package.
	Width float32 `json:"width"`
}

// DimensionsUnit The unit of measurement.
type DimensionsUnit string

// DirectFulfillmentItemIdentifiers Item identifiers for an item in a direct fulfillment shipment.
type DirectFulfillmentItemIdentifiers struct {
	// LineItemID A unique identifier for an item provided by the client for a direct fulfillment shipment. This is only populated for direct fulfillment multi-piece shipments. It is required if a vendor wants to change the configuration of the packages in which the purchase order is shipped.
	LineItemID string `json:"lineItemID"`

	// PieceNumber A unique identifier for an item provided by the client for a direct fulfillment shipment. This is only populated if a single line item has multiple pieces. Defaults to 1.
	PieceNumber *string `json:"pieceNumber,omitempty"`
}

// DocumentFormat The file format of the document.
type DocumentFormat string

// DocumentSize The size dimensions of the label.
type DocumentSize struct {
	// Length The length of the document measured in the units specified.
	Length float32 `json:"length"`

	// Unit The unit of measurement.
	Unit DocumentSizeUnit `json:"unit"`

	// Width The width of the document measured in the units specified.
	Width float32 `json:"width"`
}

// DocumentSizeUnit The unit of measurement.
type DocumentSizeUnit string

// DocumentType The type of shipping document.
type DocumentType string

// Dpi The dots per inch (DPI) value used in printing. This value represents a measure of the resolution of the document.
type Dpi = int

// Error Error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList struct {
	Errors []Error `json:"errors"`
}

// Event A tracking event.
type Event struct {
	// EventCode The tracking event type.
	EventCode EventCode `json:"eventCode"`

	// EventTime The ISO 8601 formatted timestamp of the event.
	EventTime time.Time `json:"eventTime"`

	// Location The location where the person, business or institution is located.
	Location *Location `json:"location,omitempty"`

	// ShipmentType Shipment type.
	ShipmentType *ShipmentType `json:"shipmentType,omitempty"`
}

// EventCode The tracking event type.
type EventCode string

// ExceptionOperatingHours Defines exceptions to standard operating hours for certain date ranges.
type ExceptionOperatingHours struct {
	// DateRange Date Range for query the results.
	DateRange *DateRange `json:"dateRange,omitempty"`

	// OperatingHours The hours in which the access point shall remain operational
	OperatingHours *OperatingHours `json:"operatingHours,omitempty"`
}

// ExcludedBenefit Object representing an excluded benefit that is excluded for an ShippingOffering/Rate.
type ExcludedBenefit struct {
	Benefit    string `json:"benefit"`
	ReasonCode string `json:"reasonCode"`
}

// ExcludedBenefits A list of excluded benefit. Refer to the ExcludeBenefit object for further documentation
type ExcludedBenefits = []ExcludedBenefit

// Geocode Defines the latitude and longitude of the access point.
type Geocode struct {
	// Latitude The latitude of access point.
	Latitude *string `json:"latitude,omitempty"`

	// Longitude The longitude of access point.
	Longitude *string `json:"longitude,omitempty"`
}

// GetAccessPointsResponse The response schema for the GetAccessPoints operation.
type GetAccessPointsResponse struct {
	// Payload The payload for the GetAccessPoints API.
	Payload *GetAccessPointsResult `json:"payload,omitempty"`
}

// GetAccessPointsResult The payload for the GetAccessPoints API.
type GetAccessPointsResult struct {
	// AccessPointsMap Map of type of access point to list of access points
	AccessPointsMap AccessPointsMap `json:"accessPointsMap"`
}

// GetRatesRequest The request schema for the getRates operation. When the channelType is Amazon, the shipTo address is not required and will be ignored.
type GetRatesRequest struct {
	// ChannelDetails Shipment source channel related information.
	ChannelDetails ChannelDetails `json:"channelDetails"`

	// ClientReferenceDetails Object to pass additional information about the MCI Integrator shipperType: List of ClientReferenceDetail
	ClientReferenceDetails        *ClientReferenceDetails `json:"clientReferenceDetails,omitempty"`
	DestinationAccessPointDetails *AccessPointDetails     `json:"destinationAccessPointDetails,omitempty"`

	// Packages A list of packages to be shipped through a shipping service offering.
	Packages PackageList `json:"packages"`

	// ReturnTo The address.
	ReturnTo *Address `json:"returnTo,omitempty"`

	// ShipDate The ship date and time (the requested pickup). This defaults to the current date and time.
	ShipDate *time.Time `json:"shipDate,omitempty"`

	// ShipFrom The address.
	ShipFrom Address `json:"shipFrom"`

	// ShipTo The address.
	ShipTo *Address `json:"shipTo,omitempty"`

	// ShipmentType Shipment type.
	ShipmentType *ShipmentType `json:"shipmentType,omitempty"`

	// ShipperInstruction The shipper instruction.
	ShipperInstruction *ShipperInstruction `json:"shipperInstruction,omitempty"`

	// TaxDetails A list of tax detail information.
	TaxDetails *TaxDetailList `json:"taxDetails,omitempty"`

	// ValueAddedServices A collection of supported value-added services.
	ValueAddedServices *ValueAddedServiceDetails `json:"valueAddedServices,omitempty"`
}

// GetRatesResponse The response schema for the getRates operation.
type GetRatesResponse struct {
	// Payload The payload for the getRates operation.
	Payload *GetRatesResult `json:"payload,omitempty"`
}

// GetRatesResult The payload for the getRates operation.
type GetRatesResult struct {
	// IneligibleRates A list of ineligible shipping service offerings.
	IneligibleRates *IneligibleRateList `json:"ineligibleRates,omitempty"`

	// Rates A list of eligible shipping service offerings.
	Rates RateList `json:"rates"`

	// RequestToken A unique token generated to identify a getRates operation.
	RequestToken RequestToken `json:"requestToken"`
}

// GetShipmentDocumentsResponse The response schema for the the getShipmentDocuments operation.
type GetShipmentDocumentsResponse struct {
	// Payload The payload for the getShipmentDocuments operation.
	Payload *GetShipmentDocumentsResult `json:"payload,omitempty"`
}

// GetShipmentDocumentsResult The payload for the getShipmentDocuments operation.
type GetShipmentDocumentsResult struct {
	// PackageDocumentDetail The post-purchase details of a package that will be shipped using a shipping service.
	PackageDocumentDetail PackageDocumentDetail `json:"packageDocumentDetail"`

	// ShipmentId The unique shipment identifier provided by a shipping service.
	ShipmentId ShipmentId `json:"shipmentId"`
}

// GetTrackingResponse The response schema for the getTracking operation.
type GetTrackingResponse struct {
	// Payload The payload for the getTracking operation.
	Payload *GetTrackingResult `json:"payload,omitempty"`
}

// GetTrackingResult The payload for the getTracking operation.
type GetTrackingResult struct {
	// AlternateLegTrackingId The carrier generated reverse identifier for a returned package in a purchased shipment.
	AlternateLegTrackingId AlternateLegTrackingId `json:"alternateLegTrackingId"`

	// EventHistory A list of tracking events.
	EventHistory []Event `json:"eventHistory"`

	// PromisedDeliveryDate The date and time by which the shipment is promised to be delivered.
	PromisedDeliveryDate time.Time `json:"promisedDeliveryDate"`

	// Summary A package status summary.
	Summary TrackingSummary `json:"summary"`

	// TrackingId The carrier generated identifier for a package in a purchased shipment.
	TrackingId TrackingId `json:"trackingId"`
}

// IncludedBenefits A list of included benefits.
type IncludedBenefits = []string

// IneligibilityReason The reason why a shipping service offering is ineligible.
type IneligibilityReason struct {
	// Code Reasons that make a shipment service offering ineligible.
	Code IneligibilityReasonCode `json:"code"`

	// Message The ineligibility reason.
	Message string `json:"message"`
}

// IneligibilityReasonCode Reasons that make a shipment service offering ineligible.
type IneligibilityReasonCode string

// IneligibleRate Detailed information for an ineligible shipping service offering.
type IneligibleRate struct {
	// CarrierId The carrier identifier for the offering, provided by the carrier.
	CarrierId CarrierId `json:"carrierId"`

	// CarrierName The carrier name for the offering.
	CarrierName CarrierName `json:"carrierName"`

	// IneligibilityReasons A list of reasons why a shipping service offering is ineligible.
	IneligibilityReasons []IneligibilityReason `json:"ineligibilityReasons"`

	// ServiceId An identifier for the shipping service.
	ServiceId ServiceId `json:"serviceId"`

	// ServiceName The name of the shipping service.
	ServiceName ServiceName `json:"serviceName"`
}

// IneligibleRateList A list of ineligible shipping service offerings.
type IneligibleRateList = []IneligibleRate

// InvoiceDetails The invoice details for charges associated with the goods in the package. Only applies to certain regions.
type InvoiceDetails struct {
	// InvoiceDate The invoice date of the item in ISO 8061 format.
	InvoiceDate *time.Time `json:"invoiceDate,omitempty"`

	// InvoiceNumber The invoice number of the item.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
}

// Item An item in a package.
type Item struct {
	// DangerousGoodsDetails Details related to any dangerous goods/items that are being shipped.
	DangerousGoodsDetails *DangerousGoodsDetails `json:"dangerousGoodsDetails,omitempty"`

	// Description The product description of the item.
	Description *string `json:"description,omitempty"`

	// DirectFulfillmentItemIdentifiers Item identifiers for an item in a direct fulfillment shipment.
	DirectFulfillmentItemIdentifiers *DirectFulfillmentItemIdentifiers `json:"directFulfillmentItemIdentifiers,omitempty"`

	// InvoiceDetails The invoice details for charges associated with the goods in the package. Only applies to certain regions.
	InvoiceDetails *InvoiceDetails `json:"invoiceDetails,omitempty"`

	// IsHazmat When true, the item qualifies as hazardous materials (hazmat). Defaults to false.
	IsHazmat *bool `json:"isHazmat,omitempty"`

	// ItemIdentifier A unique identifier for an item provided by the client.
	ItemIdentifier *string `json:"itemIdentifier,omitempty"`

	// ItemValue The monetary value in the currency indicated, in ISO 4217 standard format.
	ItemValue *Currency `json:"itemValue,omitempty"`

	// LiquidVolume Liquid Volume.
	LiquidVolume *LiquidVolume `json:"liquidVolume,omitempty"`

	// ProductType The product type of the item.
	ProductType *string `json:"productType,omitempty"`

	// Quantity The number of units. This value is required.
	Quantity int `json:"quantity"`

	// SerialNumbers A list of unique serial numbers in an Amazon package that can be used to guarantee non-fraudulent items. The number of serial numbers in the list must be less than or equal to the quantity of items being shipped. Only applicable when channel source is Amazon.
	SerialNumbers *[]string `json:"serialNumbers,omitempty"`

	// Weight The weight in the units indicated.
	Weight *Weight `json:"weight,omitempty"`
}

// ItemList A list of items.
type ItemList = []Item

// LiquidVolume Liquid Volume.
type LiquidVolume struct {
	// Unit The unit of measurement.
	Unit LiquidVolumeUnit `json:"unit"`

	// Value The measurement value.
	Value float32 `json:"value"`
}

// LiquidVolumeUnit The unit of measurement.
type LiquidVolumeUnit string

// Location The location where the person, business or institution is located.
type Location struct {
	// City The city or town where the person, business or institution is located.
	City *City `json:"city,omitempty"`

	// CountryCode The two digit country code. Follows ISO 3166-1 alpha-2 format.
	CountryCode *CountryCode `json:"countryCode,omitempty"`

	// PostalCode The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
	PostalCode *PostalCode `json:"postalCode,omitempty"`

	// StateOrRegion The state, county or region where the person, business or institution is located.
	StateOrRegion *StateOrRegion `json:"stateOrRegion,omitempty"`
}

// NdrAction The type of NDR action shipper wants to take for a particular shipment.
type NdrAction string

// NdrRequestData Additional information required for the NDR action that has been filed. If the NDR Action is RESCHEDULE, rescheduleDate is a required field. Otherwise, if the NDR Action is REATTEMPT, additionalAddressNotes is a required field.
type NdrRequestData struct {
	// AdditionalAddressNotes Address notes to re-attempt delivery with.
	AdditionalAddressNotes *AdditionalAddressNotes `json:"additionalAddressNotes,omitempty"`

	// RescheduleDate The date on which the Seller wants to reschedule shipment delivery, in ISO-8601 date/time format
	RescheduleDate *time.Time `json:"rescheduleDate,omitempty"`
}

// NeedFileJoining When true, files should be stitched together. Otherwise, files should be returned separately. Defaults to false.
type NeedFileJoining = bool

// OneClickShipmentRequest The request schema for the OneClickShipment operation. When the channelType is not Amazon, shipTo is required and when channelType is Amazon shipTo is ignored.
type OneClickShipmentRequest struct {
	// ChannelDetails Shipment source channel related information.
	ChannelDetails                ChannelDetails      `json:"channelDetails"`
	DestinationAccessPointDetails *AccessPointDetails `json:"destinationAccessPointDetails,omitempty"`

	// LabelSpecifications The document specifications requested. For calls to the purchaseShipment operation, the shipment purchase fails if the specified document specifications are not among those returned in the response to the getRates operation.
	LabelSpecifications RequestedDocumentSpecification `json:"labelSpecifications"`

	// Packages A list of packages to be shipped through a shipping service offering.
	Packages PackageList `json:"packages"`

	// ReturnTo The address.
	ReturnTo *Address `json:"returnTo,omitempty"`

	// ServiceSelection Service Selection Criteria.
	ServiceSelection ServiceSelection `json:"serviceSelection"`

	// ShipDate The ship date and time (the requested pickup). This defaults to the current date and time.
	ShipDate *time.Time `json:"shipDate,omitempty"`

	// ShipFrom The address.
	ShipFrom Address `json:"shipFrom"`

	// ShipTo The address.
	ShipTo *Address `json:"shipTo,omitempty"`

	// ShipperInstruction The shipper instruction.
	ShipperInstruction *ShipperInstruction `json:"shipperInstruction,omitempty"`

	// TaxDetails A list of tax detail information.
	TaxDetails *TaxDetailList `json:"taxDetails,omitempty"`

	// ValueAddedServicesDetails The value-added services to be added to a shipping service purchase.
	ValueAddedServicesDetails *OneClickShipmentValueAddedServiceDetails `json:"valueAddedServicesDetails,omitempty"`
}

// OneClickShipmentResponse The response schema for the OneClickShipment operation.
type OneClickShipmentResponse struct {
	// Payload The payload for the OneClickShipment API.
	Payload *OneClickShipmentResult `json:"payload,omitempty"`
}

// OneClickShipmentResult The payload for the OneClickShipment API.
type OneClickShipmentResult struct {
	// Carrier Carrier Related Info
	Carrier Carrier `json:"carrier"`

	// PackageDocumentDetails A list of post-purchase details about a package that will be shipped using a shipping service.
	PackageDocumentDetails PackageDocumentDetailList `json:"packageDocumentDetails"`

	// Promise The time windows promised for pickup and delivery events.
	Promise Promise `json:"promise"`

	// Service Service Related Info
	Service Service `json:"service"`

	// ShipmentId The unique shipment identifier provided by a shipping service.
	ShipmentId ShipmentId `json:"shipmentId"`

	// TotalCharge The monetary value in the currency indicated, in ISO 4217 standard format.
	TotalCharge Currency `json:"totalCharge"`
}

// OneClickShipmentValueAddedService A value-added service to be applied to a shipping service purchase.
type OneClickShipmentValueAddedService struct {
	// Amount The monetary value in the currency indicated, in ISO 4217 standard format.
	Amount *Currency `json:"amount,omitempty"`

	// Id The identifier of the selected value-added service.
	Id string `json:"id"`
}

// OneClickShipmentValueAddedServiceDetails The value-added services to be added to a shipping service purchase.
type OneClickShipmentValueAddedServiceDetails = []OneClickShipmentValueAddedService

// OperatingHours The hours in which the access point shall remain operational
type OperatingHours struct {
	// ClosingTime Denotes time of the day, used for defining opening or closing time of access points
	ClosingTime    *TimeOfDay   `json:"closingTime,omitempty"`
	MidDayClosures *[]TimeOfDay `json:"midDayClosures,omitempty"`

	// OpeningTime Denotes time of the day, used for defining opening or closing time of access points
	OpeningTime *TimeOfDay `json:"openingTime,omitempty"`
}

// Package A package to be shipped through a shipping service offering.
type Package struct {
	// Charges A list of charges based on the shipping service charges applied on a package.
	Charges *ChargeList `json:"charges,omitempty"`

	// Dimensions A set of measurements for a three-dimensional object.
	Dimensions Dimensions `json:"dimensions"`

	// InsuredValue The monetary value in the currency indicated, in ISO 4217 standard format.
	InsuredValue Currency `json:"insuredValue"`

	// IsHazmat When true, the package contains hazardous materials. Defaults to false.
	IsHazmat *bool `json:"isHazmat,omitempty"`

	// Items A list of items.
	Items ItemList `json:"items"`

	// PackageClientReferenceId A client provided unique identifier for a package being shipped. This value should be saved by the client to pass as a parameter to the getShipmentDocuments operation.
	PackageClientReferenceId PackageClientReferenceId `json:"packageClientReferenceId"`

	// SellerDisplayName The seller name displayed on the label.
	SellerDisplayName *string `json:"sellerDisplayName,omitempty"`

	// Weight The weight in the units indicated.
	Weight Weight `json:"weight"`
}

// PackageClientReferenceId A client provided unique identifier for a package being shipped. This value should be saved by the client to pass as a parameter to the getShipmentDocuments operation.
type PackageClientReferenceId = string

// PackageDocument A document related to a package.
type PackageDocument struct {
	// Contents A Base64 encoded string of the file contents.
	Contents Contents `json:"contents"`

	// Format The file format of the document.
	Format DocumentFormat `json:"format"`

	// Type The type of shipping document.
	Type DocumentType `json:"type"`
}

// PackageDocumentDetail The post-purchase details of a package that will be shipped using a shipping service.
type PackageDocumentDetail struct {
	// PackageClientReferenceId A client provided unique identifier for a package being shipped. This value should be saved by the client to pass as a parameter to the getShipmentDocuments operation.
	PackageClientReferenceId PackageClientReferenceId `json:"packageClientReferenceId"`

	// PackageDocuments A list of documents related to a package.
	PackageDocuments PackageDocumentList `json:"packageDocuments"`

	// TrackingId The carrier generated identifier for a package in a purchased shipment.
	TrackingId *TrackingId `json:"trackingId,omitempty"`
}

// PackageDocumentDetailList A list of post-purchase details about a package that will be shipped using a shipping service.
type PackageDocumentDetailList = []PackageDocumentDetail

// PackageDocumentList A list of documents related to a package.
type PackageDocumentList = []PackageDocument

// PackageList A list of packages to be shipped through a shipping service offering.
type PackageList = []Package

// PageLayout Indicates the position of the label on the paper. Should be the same value as returned in getRates response.
type PageLayout = string

// PaymentType Payment type of the purchase.
type PaymentType string

// PostalCode The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
type PostalCode = string

// PrintOption The format options available for a label.
type PrintOption struct {
	// SupportedDPIs A list of the supported DPI options for a document.
	SupportedDPIs *[]Dpi `json:"supportedDPIs,omitempty"`

	// SupportedDocumentDetails A list of the supported documented details.
	SupportedDocumentDetails []SupportedDocumentDetail `json:"supportedDocumentDetails"`

	// SupportedFileJoiningOptions A list of the supported needFileJoining boolean values for a document.
	SupportedFileJoiningOptions []NeedFileJoining `json:"supportedFileJoiningOptions"`

	// SupportedPageLayouts A list of the supported page layout options for a document.
	SupportedPageLayouts []PageLayout `json:"supportedPageLayouts"`
}

// PrintOptionList A list of the format options for a label.
type PrintOptionList = []PrintOption

// Promise The time windows promised for pickup and delivery events.
type Promise struct {
	// DeliveryWindow The start and end time that specifies the time interval of an event.
	DeliveryWindow *TimeWindow `json:"deliveryWindow,omitempty"`

	// PickupWindow The start and end time that specifies the time interval of an event.
	PickupWindow *TimeWindow `json:"pickupWindow,omitempty"`
}

// PurchaseShipmentRequest The request schema for the purchaseShipment operation.
type PurchaseShipmentRequest struct {
	// AdditionalInputs The additional inputs required to purchase a shipping offering, in JSON format. The JSON provided here must adhere to the JSON schema that is returned in the response to the getAdditionalInputs operation.
	//
	// Additional inputs are only required when indicated by the requiresAdditionalInputs property in the response to the getRates operation.
	AdditionalInputs *map[string]interface{} `json:"additionalInputs,omitempty"`

	// RateId An identifier for the rate (shipment offering) provided by a shipping service provider.
	RateId RateId `json:"rateId"`

	// RequestToken A unique token generated to identify a getRates operation.
	RequestToken RequestToken `json:"requestToken"`

	// RequestedDocumentSpecification The document specifications requested. For calls to the purchaseShipment operation, the shipment purchase fails if the specified document specifications are not among those returned in the response to the getRates operation.
	RequestedDocumentSpecification RequestedDocumentSpecification `json:"requestedDocumentSpecification"`

	// RequestedValueAddedServices The value-added services to be added to a shipping service purchase.
	RequestedValueAddedServices *RequestedValueAddedServiceList `json:"requestedValueAddedServices,omitempty"`
}

// PurchaseShipmentResponse The response schema for the purchaseShipment operation.
type PurchaseShipmentResponse struct {
	// Payload The payload for the purchaseShipment operation.
	Payload *PurchaseShipmentResult `json:"payload,omitempty"`
}

// PurchaseShipmentResult The payload for the purchaseShipment operation.
type PurchaseShipmentResult struct {
	// PackageDocumentDetails A list of post-purchase details about a package that will be shipped using a shipping service.
	PackageDocumentDetails PackageDocumentDetailList `json:"packageDocumentDetails"`

	// Promise The time windows promised for pickup and delivery events.
	Promise Promise `json:"promise"`

	// ShipmentId The unique shipment identifier provided by a shipping service.
	ShipmentId ShipmentId `json:"shipmentId"`
}

// Rate The details of a shipping service offering.
type Rate struct {
	// AvailableValueAddedServiceGroups A list of value-added services available for a shipping service offering.
	AvailableValueAddedServiceGroups *AvailableValueAddedServiceGroupList `json:"availableValueAddedServiceGroups,omitempty"`

	// Benefits Representing the included/excluded benefits that we offer for each ShippingOffering/Rate. Benefits being services provided by Amazon when sellers purchase shipping through Amazon.
	Benefits *Benefits `json:"benefits,omitempty"`

	// BilledWeight The weight in the units indicated.
	BilledWeight *Weight `json:"billedWeight,omitempty"`

	// CarrierId The carrier identifier for the offering, provided by the carrier.
	CarrierId CarrierId `json:"carrierId"`

	// CarrierName The carrier name for the offering.
	CarrierName CarrierName `json:"carrierName"`

	// PaymentType Payment type of the purchase.
	PaymentType *PaymentType `json:"paymentType,omitempty"`

	// Promise The time windows promised for pickup and delivery events.
	Promise Promise `json:"promise"`

	// RateId An identifier for the rate (shipment offering) provided by a shipping service provider.
	RateId RateId `json:"rateId"`

	// RateItemList A list of RateItem
	RateItemList *RateItemList `json:"rateItemList,omitempty"`

	// RequiresAdditionalInputs When true, indicates that additional inputs are required to purchase this shipment service. You must then call the getAdditionalInputs operation to return the JSON schema to use when providing the additional inputs to the purchaseShipment operation.
	RequiresAdditionalInputs bool `json:"requiresAdditionalInputs"`

	// ServiceId An identifier for the shipping service.
	ServiceId ServiceId `json:"serviceId"`

	// ServiceName The name of the shipping service.
	ServiceName ServiceName `json:"serviceName"`

	// SupportedDocumentSpecifications A list of the document specifications supported for a shipment service offering.
	SupportedDocumentSpecifications SupportedDocumentSpecificationList `json:"supportedDocumentSpecifications"`

	// TotalCharge The monetary value in the currency indicated, in ISO 4217 standard format.
	TotalCharge Currency `json:"totalCharge"`
}

// RateId An identifier for the rate (shipment offering) provided by a shipping service provider.
type RateId = string

// RateItem Rate Item for shipping (base cost, transaction fee, confirmation, insurance, etc.) Data source definition:
type RateItem struct {
	// RateItemCharge The monetary value in the currency indicated, in ISO 4217 standard format.
	RateItemCharge *Currency `json:"rateItemCharge,omitempty"`

	// RateItemID Unique ID for the rateItem.
	RateItemID *RateItemID `json:"rateItemID,omitempty"`

	// RateItemNameLocalization Used for the localization.
	RateItemNameLocalization *string `json:"rateItemNameLocalization,omitempty"`

	// RateItemType Type of the rateItem.
	RateItemType *RateItemType `json:"rateItemType,omitempty"`
}

// RateItemID Unique ID for the rateItem.
type RateItemID string

// RateItemList A list of RateItem
type RateItemList = []RateItem

// RateItemType Type of the rateItem.
type RateItemType string

// RateList A list of eligible shipping service offerings.
type RateList = []Rate

// RequestToken A unique token generated to identify a getRates operation.
type RequestToken = string

// RequestedDocumentSpecification The document specifications requested. For calls to the purchaseShipment operation, the shipment purchase fails if the specified document specifications are not among those returned in the response to the getRates operation.
type RequestedDocumentSpecification struct {
	// Dpi The dots per inch (DPI) value used in printing. This value represents a measure of the resolution of the document.
	Dpi *Dpi `json:"dpi,omitempty"`

	// Format The file format of the document.
	Format DocumentFormat `json:"format"`

	// NeedFileJoining When true, files should be stitched together. Otherwise, files should be returned separately. Defaults to false.
	NeedFileJoining NeedFileJoining `json:"needFileJoining"`

	// PageLayout Indicates the position of the label on the paper. Should be the same value as returned in getRates response.
	PageLayout *PageLayout `json:"pageLayout,omitempty"`

	// RequestedDocumentTypes A list of the document types requested.
	RequestedDocumentTypes []DocumentType `json:"requestedDocumentTypes"`

	// Size The size dimensions of the label.
	Size DocumentSize `json:"size"`
}

// RequestedValueAddedService A value-added service to be applied to a shipping service purchase.
type RequestedValueAddedService struct {
	// Id The identifier of the selected value-added service. Must be among those returned in the response to the getRates operation.
	Id string `json:"id"`
}

// RequestedValueAddedServiceList The value-added services to be added to a shipping service purchase.
type RequestedValueAddedServiceList = []RequestedValueAddedService

// Service Service Related Info
type Service struct {
	// Id An identifier for the shipping service.
	Id ServiceId `json:"id"`

	// Name The name of the shipping service.
	Name ServiceName `json:"name"`
}

// ServiceId An identifier for the shipping service.
type ServiceId = string

// ServiceIds A list of ServiceId.
type ServiceIds = []string

// ServiceName The name of the shipping service.
type ServiceName = string

// ServiceSelection Service Selection Criteria.
type ServiceSelection struct {
	// ServiceId A list of ServiceId.
	ServiceId ServiceIds `json:"serviceId"`
}

// ShipmentId The unique shipment identifier provided by a shipping service.
type ShipmentId = string

// ShipmentType Shipment type.
type ShipmentType string

// ShipperInstruction The shipper instruction.
type ShipperInstruction struct {
	// DeliveryNotes The delivery notes for the shipment
	DeliveryNotes *string `json:"deliveryNotes,omitempty"`
}

// StateOrRegion The state, county or region where the person, business or institution is located.
type StateOrRegion = string

// Status The status of the package being shipped.
type Status string

// SubmitNdrFeedbackRequest The request schema for the NdrFeedback operation
type SubmitNdrFeedbackRequest struct {
	// NdrAction The type of NDR action shipper wants to take for a particular shipment.
	NdrAction NdrAction `json:"ndrAction"`

	// NdrRequestData Additional information required for the NDR action that has been filed. If the NDR Action is RESCHEDULE, rescheduleDate is a required field. Otherwise, if the NDR Action is REATTEMPT, additionalAddressNotes is a required field.
	NdrRequestData *NdrRequestData `json:"ndrRequestData,omitempty"`

	// TrackingId The carrier generated identifier for a package in a purchased shipment.
	TrackingId TrackingId `json:"trackingId"`
}

// SupportedDocumentDetail The supported document types for a service offering.
type SupportedDocumentDetail struct {
	// IsMandatory When true, the supported document type is required.
	IsMandatory bool `json:"isMandatory"`

	// Name The type of shipping document.
	Name DocumentType `json:"name"`
}

// SupportedDocumentSpecification Document specification that is supported for a service offering.
type SupportedDocumentSpecification struct {
	// Format The file format of the document.
	Format DocumentFormat `json:"format"`

	// PrintOptions A list of the format options for a label.
	PrintOptions PrintOptionList `json:"printOptions"`

	// Size The size dimensions of the label.
	Size DocumentSize `json:"size"`
}

// SupportedDocumentSpecificationList A list of the document specifications supported for a shipment service offering.
type SupportedDocumentSpecificationList = []SupportedDocumentSpecification

// TaxDetail Indicates the tax specifications associated with the shipment for customs compliance purposes in certain regions.
type TaxDetail struct {
	// TaxRegistrationNumber The shipper's tax registration number associated with the shipment for customs compliance purposes in certain regions.
	TaxRegistrationNumber string `json:"taxRegistrationNumber"`

	// TaxType Indicates the type of tax.
	TaxType TaxType `json:"taxType"`
}

// TaxDetailList A list of tax detail information.
type TaxDetailList = []TaxDetail

// TaxType Indicates the type of tax.
type TaxType string

// TimeOfDay Denotes time of the day, used for defining opening or closing time of access points
type TimeOfDay struct {
	HourOfDay      *int `json:"hourOfDay,omitempty"`
	MinuteOfHour   *int `json:"minuteOfHour,omitempty"`
	SecondOfMinute *int `json:"secondOfMinute,omitempty"`
}

// TimeWindow The start and end time that specifies the time interval of an event.
type TimeWindow struct {
	// End The end time of the time window.
	End *time.Time `json:"end,omitempty"`

	// Start The start time of the time window.
	Start *time.Time `json:"start,omitempty"`
}

// TrackingDetailCodes Contains detail codes that provide additional details related to the forward and return leg of the shipment.
type TrackingDetailCodes struct {
	// Forward Contains detail codes that provide additional details related to the forward leg of the shipment.
	Forward []DetailCodes `json:"forward"`

	// Returns Contains detail codes that provide additional details related to the return leg of the shipment.
	Returns []DetailCodes `json:"returns"`
}

// TrackingId The carrier generated identifier for a package in a purchased shipment.
type TrackingId = string

// TrackingSummary A package status summary.
type TrackingSummary struct {
	// Status The status of the package being shipped.
	Status *Status `json:"status,omitempty"`

	// TrackingDetailCodes Contains detail codes that provide additional details related to the forward and return leg of the shipment.
	TrackingDetailCodes *TrackingDetailCodes `json:"trackingDetailCodes,omitempty"`
}

// ValueAddedService A value-added service available for purchase with a shipment service offering.
type ValueAddedService struct {
	// Cost The monetary value in the currency indicated, in ISO 4217 standard format.
	Cost Currency `json:"cost"`

	// Id The identifier for the value-added service.
	Id string `json:"id"`

	// Name The name of the value-added service.
	Name string `json:"name"`
}

// ValueAddedServiceDetails A collection of supported value-added services.
type ValueAddedServiceDetails struct {
	// CollectOnDelivery The amount to collect on delivery.
	CollectOnDelivery *CollectOnDelivery `json:"collectOnDelivery,omitempty"`
}

// Weight The weight in the units indicated.
type Weight struct {
	// Unit The unit of measurement.
	Unit WeightUnit `json:"unit"`

	// Value The measurement value.
	Value float32 `json:"value"`
}

// WeightUnit The unit of measurement.
type WeightUnit string

// GetAccessPointsParams defines parameters for GetAccessPoints.
type GetAccessPointsParams struct {
	AccessPointTypes []GetAccessPointsParamsAccessPointTypes `form:"accessPointTypes" json:"accessPointTypes"`
	CountryCode      string                                  `form:"countryCode" json:"countryCode"`
	PostalCode       string                                  `form:"postalCode" json:"postalCode"`

	// XAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
	XAmznShippingBusinessId *GetAccessPointsParamsXAmznShippingBusinessId `json:"x-amzn-shipping-business-id,omitempty"`
}

// GetAccessPointsParamsAccessPointTypes defines parameters for GetAccessPoints.
type GetAccessPointsParamsAccessPointTypes string

// GetAccessPointsParamsXAmznShippingBusinessId defines parameters for GetAccessPoints.
type GetAccessPointsParamsXAmznShippingBusinessId string

// SubmitNdrFeedbackParams defines parameters for SubmitNdrFeedback.
type SubmitNdrFeedbackParams struct {
	// XAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
	XAmznShippingBusinessId *SubmitNdrFeedbackParamsXAmznShippingBusinessId `json:"x-amzn-shipping-business-id,omitempty"`
}

// SubmitNdrFeedbackParamsXAmznShippingBusinessId defines parameters for SubmitNdrFeedback.
type SubmitNdrFeedbackParamsXAmznShippingBusinessId string

// OneClickShipmentParams defines parameters for OneClickShipment.
type OneClickShipmentParams struct {
	// XAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
	XAmznShippingBusinessId *OneClickShipmentParamsXAmznShippingBusinessId `json:"x-amzn-shipping-business-id,omitempty"`
}

// OneClickShipmentParamsXAmznShippingBusinessId defines parameters for OneClickShipment.
type OneClickShipmentParamsXAmznShippingBusinessId string

// PurchaseShipmentParams defines parameters for PurchaseShipment.
type PurchaseShipmentParams struct {
	// XAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request.
	XAmznIdempotencyKey *string `json:"x-amzn-IdempotencyKey,omitempty"`

	// XAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
	XAmznShippingBusinessId *PurchaseShipmentParamsXAmznShippingBusinessId `json:"x-amzn-shipping-business-id,omitempty"`
}

// PurchaseShipmentParamsXAmznShippingBusinessId defines parameters for PurchaseShipment.
type PurchaseShipmentParamsXAmznShippingBusinessId string

// GetRatesParams defines parameters for GetRates.
type GetRatesParams struct {
	// XAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
	XAmznShippingBusinessId *GetRatesParamsXAmznShippingBusinessId `json:"x-amzn-shipping-business-id,omitempty"`
}

// GetRatesParamsXAmznShippingBusinessId defines parameters for GetRates.
type GetRatesParamsXAmznShippingBusinessId string

// CancelShipmentParams defines parameters for CancelShipment.
type CancelShipmentParams struct {
	// XAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
	XAmznShippingBusinessId *CancelShipmentParamsXAmznShippingBusinessId `json:"x-amzn-shipping-business-id,omitempty"`
}

// CancelShipmentParamsXAmznShippingBusinessId defines parameters for CancelShipment.
type CancelShipmentParamsXAmznShippingBusinessId string

// GetShipmentDocumentsParams defines parameters for GetShipmentDocuments.
type GetShipmentDocumentsParams struct {
	// PackageClientReferenceId The package client reference identifier originally provided in the request body parameter for the getRates operation.
	PackageClientReferenceId string `form:"packageClientReferenceId" json:"packageClientReferenceId"`

	// Format The file format of the document. Must be one of the supported formats returned by the getRates operation.
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Dpi The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation.
	Dpi *float32 `form:"dpi,omitempty" json:"dpi,omitempty"`

	// XAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
	XAmznShippingBusinessId *GetShipmentDocumentsParamsXAmznShippingBusinessId `json:"x-amzn-shipping-business-id,omitempty"`
}

// GetShipmentDocumentsParamsXAmznShippingBusinessId defines parameters for GetShipmentDocuments.
type GetShipmentDocumentsParamsXAmznShippingBusinessId string

// GetTrackingParams defines parameters for GetTracking.
type GetTrackingParams struct {
	// TrackingId A carrier-generated tracking identifier originally returned by the purchaseShipment operation.
	TrackingId string `form:"trackingId" json:"trackingId"`

	// CarrierId A carrier identifier originally returned by the getRates operation for the selected rate.
	CarrierId string `form:"carrierId" json:"carrierId"`

	// XAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
	XAmznShippingBusinessId *GetTrackingParamsXAmznShippingBusinessId `json:"x-amzn-shipping-business-id,omitempty"`
}

// GetTrackingParamsXAmznShippingBusinessId defines parameters for GetTracking.
type GetTrackingParamsXAmznShippingBusinessId string

// SubmitNdrFeedbackJSONRequestBody defines body for SubmitNdrFeedback for application/json ContentType.
type SubmitNdrFeedbackJSONRequestBody = SubmitNdrFeedbackRequest

// OneClickShipmentJSONRequestBody defines body for OneClickShipment for application/json ContentType.
type OneClickShipmentJSONRequestBody = OneClickShipmentRequest

// PurchaseShipmentJSONRequestBody defines body for PurchaseShipment for application/json ContentType.
type PurchaseShipmentJSONRequestBody = PurchaseShipmentRequest

// GetRatesJSONRequestBody defines body for GetRates for application/json ContentType.
type GetRatesJSONRequestBody = GetRatesRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccessPoints request
	GetAccessPoints(ctx context.Context, params *GetAccessPointsParams) (*http.Response, error)

	// SubmitNdrFeedbackWithBody request with any body
	SubmitNdrFeedbackWithBody(ctx context.Context, params *SubmitNdrFeedbackParams, contentType string, body io.Reader) (*http.Response, error)

	SubmitNdrFeedback(ctx context.Context, params *SubmitNdrFeedbackParams, body SubmitNdrFeedbackJSONRequestBody) (*http.Response, error)

	// OneClickShipmentWithBody request with any body
	OneClickShipmentWithBody(ctx context.Context, params *OneClickShipmentParams, contentType string, body io.Reader) (*http.Response, error)

	OneClickShipment(ctx context.Context, params *OneClickShipmentParams, body OneClickShipmentJSONRequestBody) (*http.Response, error)

	// PurchaseShipmentWithBody request with any body
	PurchaseShipmentWithBody(ctx context.Context, params *PurchaseShipmentParams, contentType string, body io.Reader) (*http.Response, error)

	PurchaseShipment(ctx context.Context, params *PurchaseShipmentParams, body PurchaseShipmentJSONRequestBody) (*http.Response, error)

	// GetRatesWithBody request with any body
	GetRatesWithBody(ctx context.Context, params *GetRatesParams, contentType string, body io.Reader) (*http.Response, error)

	GetRates(ctx context.Context, params *GetRatesParams, body GetRatesJSONRequestBody) (*http.Response, error)

	// CancelShipment request
	CancelShipment(ctx context.Context, shipmentId string, params *CancelShipmentParams) (*http.Response, error)

	// GetShipmentDocuments request
	GetShipmentDocuments(ctx context.Context, shipmentId string, params *GetShipmentDocumentsParams) (*http.Response, error)

	// GetTracking request
	GetTracking(ctx context.Context, params *GetTrackingParams) (*http.Response, error)
}

func (c *Client) GetAccessPoints(ctx context.Context, params *GetAccessPointsParams) (*http.Response, error) {
	req, err := NewGetAccessPointsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SubmitNdrFeedbackWithBody(ctx context.Context, params *SubmitNdrFeedbackParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSubmitNdrFeedbackRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SubmitNdrFeedback(ctx context.Context, params *SubmitNdrFeedbackParams, body SubmitNdrFeedbackJSONRequestBody) (*http.Response, error) {
	req, err := NewSubmitNdrFeedbackRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) OneClickShipmentWithBody(ctx context.Context, params *OneClickShipmentParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewOneClickShipmentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) OneClickShipment(ctx context.Context, params *OneClickShipmentParams, body OneClickShipmentJSONRequestBody) (*http.Response, error) {
	req, err := NewOneClickShipmentRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PurchaseShipmentWithBody(ctx context.Context, params *PurchaseShipmentParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPurchaseShipmentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PurchaseShipment(ctx context.Context, params *PurchaseShipmentParams, body PurchaseShipmentJSONRequestBody) (*http.Response, error) {
	req, err := NewPurchaseShipmentRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetRatesWithBody(ctx context.Context, params *GetRatesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetRatesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetRates(ctx context.Context, params *GetRatesParams, body GetRatesJSONRequestBody) (*http.Response, error) {
	req, err := NewGetRatesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CancelShipment(ctx context.Context, shipmentId string, params *CancelShipmentParams) (*http.Response, error) {
	req, err := NewCancelShipmentRequest(c.Server, shipmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetShipmentDocuments(ctx context.Context, shipmentId string, params *GetShipmentDocumentsParams) (*http.Response, error) {
	req, err := NewGetShipmentDocumentsRequest(c.Server, shipmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetTracking(ctx context.Context, params *GetTrackingParams) (*http.Response, error) {
	req, err := NewGetTrackingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetAccessPointsRequest generates requests for GetAccessPoints
func NewGetAccessPointsRequest(server string, params *GetAccessPointsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v2/accessPoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accessPointTypes", runtime.ParamLocationQuery, params.AccessPointTypes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postalCode", runtime.ParamLocationQuery, params.PostalCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XAmznShippingBusinessId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-amzn-shipping-business-id", runtime.ParamLocationHeader, *params.XAmznShippingBusinessId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-amzn-shipping-business-id", headerParam0)
		}

	}

	return req, nil
}

// NewSubmitNdrFeedbackRequest calls the generic SubmitNdrFeedback builder with application/json body
func NewSubmitNdrFeedbackRequest(server string, params *SubmitNdrFeedbackParams, body SubmitNdrFeedbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitNdrFeedbackRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSubmitNdrFeedbackRequestWithBody generates requests for SubmitNdrFeedback with any type of body
func NewSubmitNdrFeedbackRequestWithBody(server string, params *SubmitNdrFeedbackParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v2/ndrFeedback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XAmznShippingBusinessId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-amzn-shipping-business-id", runtime.ParamLocationHeader, *params.XAmznShippingBusinessId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-amzn-shipping-business-id", headerParam0)
		}

	}

	return req, nil
}

// NewOneClickShipmentRequest calls the generic OneClickShipment builder with application/json body
func NewOneClickShipmentRequest(server string, params *OneClickShipmentParams, body OneClickShipmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOneClickShipmentRequestWithBody(server, params, "application/json", bodyReader)
}

// NewOneClickShipmentRequestWithBody generates requests for OneClickShipment with any type of body
func NewOneClickShipmentRequestWithBody(server string, params *OneClickShipmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v2/oneClickShipment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XAmznShippingBusinessId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-amzn-shipping-business-id", runtime.ParamLocationHeader, *params.XAmznShippingBusinessId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-amzn-shipping-business-id", headerParam0)
		}

	}

	return req, nil
}

// NewPurchaseShipmentRequest calls the generic PurchaseShipment builder with application/json body
func NewPurchaseShipmentRequest(server string, params *PurchaseShipmentParams, body PurchaseShipmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPurchaseShipmentRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPurchaseShipmentRequestWithBody generates requests for PurchaseShipment with any type of body
func NewPurchaseShipmentRequestWithBody(server string, params *PurchaseShipmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v2/shipments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XAmznIdempotencyKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-amzn-IdempotencyKey", runtime.ParamLocationHeader, *params.XAmznIdempotencyKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-amzn-IdempotencyKey", headerParam0)
		}

		if params.XAmznShippingBusinessId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-amzn-shipping-business-id", runtime.ParamLocationHeader, *params.XAmznShippingBusinessId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-amzn-shipping-business-id", headerParam1)
		}

	}

	return req, nil
}

// NewGetRatesRequest calls the generic GetRates builder with application/json body
func NewGetRatesRequest(server string, params *GetRatesParams, body GetRatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := sonic.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRatesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetRatesRequestWithBody generates requests for GetRates with any type of body
func NewGetRatesRequestWithBody(server string, params *GetRatesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v2/shipments/rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XAmznShippingBusinessId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-amzn-shipping-business-id", runtime.ParamLocationHeader, *params.XAmznShippingBusinessId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-amzn-shipping-business-id", headerParam0)
		}

	}

	return req, nil
}

// NewCancelShipmentRequest generates requests for CancelShipment
func NewCancelShipmentRequest(server string, shipmentId string, params *CancelShipmentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v2/shipments/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XAmznShippingBusinessId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-amzn-shipping-business-id", runtime.ParamLocationHeader, *params.XAmznShippingBusinessId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-amzn-shipping-business-id", headerParam0)
		}

	}

	return req, nil
}

// NewGetShipmentDocumentsRequest generates requests for GetShipmentDocuments
func NewGetShipmentDocumentsRequest(server string, shipmentId string, params *GetShipmentDocumentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v2/shipments/%s/documents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "packageClientReferenceId", runtime.ParamLocationQuery, params.PackageClientReferenceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Dpi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dpi", runtime.ParamLocationQuery, *params.Dpi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, len(v))
					copy(values, v)
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XAmznShippingBusinessId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-amzn-shipping-business-id", runtime.ParamLocationHeader, *params.XAmznShippingBusinessId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-amzn-shipping-business-id", headerParam0)
		}

	}

	return req, nil
}

// NewGetTrackingRequest generates requests for GetTracking
func NewGetTrackingRequest(server string, params *GetTrackingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shipping/v2/tracking")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trackingId", runtime.ParamLocationQuery, params.TrackingId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "carrierId", runtime.ParamLocationQuery, params.CarrierId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, len(v))
				copy(values, v)
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XAmznShippingBusinessId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-amzn-shipping-business-id", runtime.ParamLocationHeader, *params.XAmznShippingBusinessId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-amzn-shipping-business-id", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccessPointsWithResponse request
	GetAccessPointsWithResponse(ctx context.Context, params *GetAccessPointsParams) (*GetAccessPointsResp, error)

	// SubmitNdrFeedbackWithBodyWithResponse request with any body
	SubmitNdrFeedbackWithBodyWithResponse(ctx context.Context, params *SubmitNdrFeedbackParams, contentType string, body io.Reader) (*SubmitNdrFeedbackResp, error)

	SubmitNdrFeedbackWithResponse(ctx context.Context, params *SubmitNdrFeedbackParams, body SubmitNdrFeedbackJSONRequestBody) (*SubmitNdrFeedbackResp, error)

	// OneClickShipmentWithBodyWithResponse request with any body
	OneClickShipmentWithBodyWithResponse(ctx context.Context, params *OneClickShipmentParams, contentType string, body io.Reader) (*OneClickShipmentResp, error)

	OneClickShipmentWithResponse(ctx context.Context, params *OneClickShipmentParams, body OneClickShipmentJSONRequestBody) (*OneClickShipmentResp, error)

	// PurchaseShipmentWithBodyWithResponse request with any body
	PurchaseShipmentWithBodyWithResponse(ctx context.Context, params *PurchaseShipmentParams, contentType string, body io.Reader) (*PurchaseShipmentResp, error)

	PurchaseShipmentWithResponse(ctx context.Context, params *PurchaseShipmentParams, body PurchaseShipmentJSONRequestBody) (*PurchaseShipmentResp, error)

	// GetRatesWithBodyWithResponse request with any body
	GetRatesWithBodyWithResponse(ctx context.Context, params *GetRatesParams, contentType string, body io.Reader) (*GetRatesResp, error)

	GetRatesWithResponse(ctx context.Context, params *GetRatesParams, body GetRatesJSONRequestBody) (*GetRatesResp, error)

	// CancelShipmentWithResponse request
	CancelShipmentWithResponse(ctx context.Context, shipmentId string, params *CancelShipmentParams) (*CancelShipmentResp, error)

	// GetShipmentDocumentsWithResponse request
	GetShipmentDocumentsWithResponse(ctx context.Context, shipmentId string, params *GetShipmentDocumentsParams) (*GetShipmentDocumentsResp, error)

	// GetTrackingWithResponse request
	GetTrackingWithResponse(ctx context.Context, params *GetTrackingParams) (*GetTrackingResp, error)
}

type GetAccessPointsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAccessPointsResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r GetAccessPointsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccessPointsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitNdrFeedbackResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r SubmitNdrFeedbackResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitNdrFeedbackResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneClickShipmentResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OneClickShipmentResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r OneClickShipmentResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneClickShipmentResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PurchaseShipmentResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PurchaseShipmentResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r PurchaseShipmentResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PurchaseShipmentResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRatesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRatesResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r GetRatesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRatesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelShipmentResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelShipmentResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r CancelShipmentResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelShipmentResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShipmentDocumentsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetShipmentDocumentsResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r GetShipmentDocumentsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipmentDocumentsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrackingResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTrackingResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r GetTrackingResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrackingResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccessPointsWithResponse request returning *GetAccessPointsResp
func (c *ClientWithResponses) GetAccessPointsWithResponse(ctx context.Context, params *GetAccessPointsParams) (*GetAccessPointsResp, error) {
	rsp, err := c.GetAccessPoints(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAccessPointsResp(rsp)
}

// SubmitNdrFeedbackWithBodyWithResponse request with arbitrary body returning *SubmitNdrFeedbackResp
func (c *ClientWithResponses) SubmitNdrFeedbackWithBodyWithResponse(ctx context.Context, params *SubmitNdrFeedbackParams, contentType string, body io.Reader) (*SubmitNdrFeedbackResp, error) {
	rsp, err := c.SubmitNdrFeedbackWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitNdrFeedbackResp(rsp)
}

func (c *ClientWithResponses) SubmitNdrFeedbackWithResponse(ctx context.Context, params *SubmitNdrFeedbackParams, body SubmitNdrFeedbackJSONRequestBody) (*SubmitNdrFeedbackResp, error) {
	rsp, err := c.SubmitNdrFeedback(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitNdrFeedbackResp(rsp)
}

// OneClickShipmentWithBodyWithResponse request with arbitrary body returning *OneClickShipmentResp
func (c *ClientWithResponses) OneClickShipmentWithBodyWithResponse(ctx context.Context, params *OneClickShipmentParams, contentType string, body io.Reader) (*OneClickShipmentResp, error) {
	rsp, err := c.OneClickShipmentWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseOneClickShipmentResp(rsp)
}

func (c *ClientWithResponses) OneClickShipmentWithResponse(ctx context.Context, params *OneClickShipmentParams, body OneClickShipmentJSONRequestBody) (*OneClickShipmentResp, error) {
	rsp, err := c.OneClickShipment(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseOneClickShipmentResp(rsp)
}

// PurchaseShipmentWithBodyWithResponse request with arbitrary body returning *PurchaseShipmentResp
func (c *ClientWithResponses) PurchaseShipmentWithBodyWithResponse(ctx context.Context, params *PurchaseShipmentParams, contentType string, body io.Reader) (*PurchaseShipmentResp, error) {
	rsp, err := c.PurchaseShipmentWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseShipmentResp(rsp)
}

func (c *ClientWithResponses) PurchaseShipmentWithResponse(ctx context.Context, params *PurchaseShipmentParams, body PurchaseShipmentJSONRequestBody) (*PurchaseShipmentResp, error) {
	rsp, err := c.PurchaseShipment(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseShipmentResp(rsp)
}

// GetRatesWithBodyWithResponse request with arbitrary body returning *GetRatesResp
func (c *ClientWithResponses) GetRatesWithBodyWithResponse(ctx context.Context, params *GetRatesParams, contentType string, body io.Reader) (*GetRatesResp, error) {
	rsp, err := c.GetRatesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetRatesResp(rsp)
}

func (c *ClientWithResponses) GetRatesWithResponse(ctx context.Context, params *GetRatesParams, body GetRatesJSONRequestBody) (*GetRatesResp, error) {
	rsp, err := c.GetRates(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetRatesResp(rsp)
}

// CancelShipmentWithResponse request returning *CancelShipmentResp
func (c *ClientWithResponses) CancelShipmentWithResponse(ctx context.Context, shipmentId string, params *CancelShipmentParams) (*CancelShipmentResp, error) {
	rsp, err := c.CancelShipment(ctx, shipmentId, params)
	if err != nil {
		return nil, err
	}
	return ParseCancelShipmentResp(rsp)
}

// GetShipmentDocumentsWithResponse request returning *GetShipmentDocumentsResp
func (c *ClientWithResponses) GetShipmentDocumentsWithResponse(ctx context.Context, shipmentId string, params *GetShipmentDocumentsParams) (*GetShipmentDocumentsResp, error) {
	rsp, err := c.GetShipmentDocuments(ctx, shipmentId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetShipmentDocumentsResp(rsp)
}

// GetTrackingWithResponse request returning *GetTrackingResp
func (c *ClientWithResponses) GetTrackingWithResponse(ctx context.Context, params *GetTrackingParams) (*GetTrackingResp, error) {
	rsp, err := c.GetTracking(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTrackingResp(rsp)
}

// ParseGetAccessPointsResp parses an HTTP response from a GetAccessPointsWithResponse call
func ParseGetAccessPointsResp(rsp *http.Response) (*GetAccessPointsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccessPointsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccessPointsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseSubmitNdrFeedbackResp parses an HTTP response from a SubmitNdrFeedbackWithResponse call
func ParseSubmitNdrFeedbackResp(rsp *http.Response) (*SubmitNdrFeedbackResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitNdrFeedbackResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseOneClickShipmentResp parses an HTTP response from a OneClickShipmentWithResponse call
func ParseOneClickShipmentResp(rsp *http.Response) (*OneClickShipmentResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneClickShipmentResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OneClickShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePurchaseShipmentResp parses an HTTP response from a PurchaseShipmentWithResponse call
func ParsePurchaseShipmentResp(rsp *http.Response) (*PurchaseShipmentResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PurchaseShipmentResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PurchaseShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetRatesResp parses an HTTP response from a GetRatesWithResponse call
func ParseGetRatesResp(rsp *http.Response) (*GetRatesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRatesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCancelShipmentResp parses an HTTP response from a CancelShipmentWithResponse call
func ParseCancelShipmentResp(rsp *http.Response) (*CancelShipmentResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelShipmentResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetShipmentDocumentsResp parses an HTTP response from a GetShipmentDocumentsWithResponse call
func ParseGetShipmentDocumentsResp(rsp *http.Response) (*GetShipmentDocumentsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShipmentDocumentsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetShipmentDocumentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetTrackingResp parses an HTTP response from a GetTrackingWithResponse call
func ParseGetTrackingResp(rsp *http.Response) (*GetTrackingResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrackingResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTrackingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
