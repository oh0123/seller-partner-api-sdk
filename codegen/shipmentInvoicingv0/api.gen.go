// Package shipmentinvoicingv0 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package shipmentinvoicingv0

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for AddressTypeEnum.
const (
	Commercial  AddressTypeEnum = "Commercial"
	Residential AddressTypeEnum = "Residential"
)

// Defines values for ShipmentInvoiceStatus.
const (
	Accepted   ShipmentInvoiceStatus = "Accepted"
	Errored    ShipmentInvoiceStatus = "Errored"
	NotFound   ShipmentInvoiceStatus = "NotFound"
	Processing ShipmentInvoiceStatus = "Processing"
)

// Address The shipping address details of the shipment.
type Address struct {
	// AddressLine1 The street address.
	AddressLine1 *string `json:"AddressLine1,omitempty"`

	// AddressLine2 Additional street address information, if required.
	AddressLine2 *string `json:"AddressLine2,omitempty"`

	// AddressLine3 Additional street address information, if required.
	AddressLine3 *string `json:"AddressLine3,omitempty"`

	// AddressType The shipping address type.
	AddressType *AddressTypeEnum `json:"AddressType,omitempty"`

	// City The city.
	City *string `json:"City,omitempty"`

	// CountryCode The country code.
	CountryCode *string `json:"CountryCode,omitempty"`

	// County The county.
	County *string `json:"County,omitempty"`

	// District The district.
	District *string `json:"District,omitempty"`

	// Name The name.
	Name *string `json:"Name,omitempty"`

	// Phone The phone number.
	Phone *string `json:"Phone,omitempty"`

	// PostalCode The postal code.
	PostalCode *string `json:"PostalCode,omitempty"`

	// StateOrRegion The state or region.
	StateOrRegion *string `json:"StateOrRegion,omitempty"`
}

// AddressTypeEnum The shipping address type.
type AddressTypeEnum string

// Blob Shipment invoice document content.
type Blob = []byte

// BuyerTaxInfo Tax information about the buyer.
type BuyerTaxInfo struct {
	// CompanyLegalName The legal name of the company.
	CompanyLegalName *string `json:"CompanyLegalName,omitempty"`

	// TaxClassifications The list of tax classifications.
	TaxClassifications *TaxClassificationList `json:"TaxClassifications,omitempty"`

	// TaxingRegion The country or region imposing the tax.
	TaxingRegion *string `json:"TaxingRegion,omitempty"`
}

// Error An error response returned when the request is unsuccessful.
type Error struct {
	// Code An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Details Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// Message A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList A list of error responses returned when a request is unsuccessful.
type ErrorList = []Error

// GetInvoiceStatusResponse The response schema for the getInvoiceStatus operation.
type GetInvoiceStatusResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The shipment invoice status response.
	Payload *ShipmentInvoiceStatusResponse `json:"payload,omitempty"`
}

// GetShipmentDetailsResponse The response schema for the getShipmentDetails operation.
type GetShipmentDetailsResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Payload The information required by a selling partner to issue a shipment invoice.
	Payload *ShipmentDetail `json:"payload,omitempty"`
}

// MarketplaceTaxInfo Tax information about the marketplace.
type MarketplaceTaxInfo struct {
	// CompanyLegalName The legal name of the company.
	CompanyLegalName *string `json:"CompanyLegalName,omitempty"`

	// TaxClassifications The list of tax classifications.
	TaxClassifications *TaxClassificationList `json:"TaxClassifications,omitempty"`

	// TaxingRegion The country or region imposing the tax.
	TaxingRegion *string `json:"TaxingRegion,omitempty"`
}

// Money The currency type and amount.
type Money struct {
	// Amount The currency amount.
	Amount *string `json:"Amount,omitempty"`

	// CurrencyCode Three-digit currency code in ISO 4217 format.
	CurrencyCode *string `json:"CurrencyCode,omitempty"`
}

// PaymentMethodDetailItemList The list of payment method details.
type PaymentMethodDetailItemList = []string

// SerialNumbersList The list of serial numbers.
type SerialNumbersList = []string

// ShipmentDetail The information required by a selling partner to issue a shipment invoice.
type ShipmentDetail struct {
	// AmazonOrderId The Amazon-defined identifier for the order.
	AmazonOrderId *string `json:"AmazonOrderId,omitempty"`

	// AmazonShipmentId The Amazon-defined identifier for the shipment.
	AmazonShipmentId *string `json:"AmazonShipmentId,omitempty"`

	// BuyerCounty The county of the buyer.
	BuyerCounty *string `json:"BuyerCounty,omitempty"`

	// BuyerName The name of the buyer.
	BuyerName *string `json:"BuyerName,omitempty"`

	// BuyerTaxInfo Tax information about the buyer.
	BuyerTaxInfo *BuyerTaxInfo `json:"BuyerTaxInfo,omitempty"`

	// MarketplaceId The identifier for the marketplace where the order was placed.
	MarketplaceId *string `json:"MarketplaceId,omitempty"`

	// MarketplaceTaxInfo Tax information about the marketplace.
	MarketplaceTaxInfo *MarketplaceTaxInfo `json:"MarketplaceTaxInfo,omitempty"`

	// PaymentMethodDetails The list of payment method details.
	PaymentMethodDetails *PaymentMethodDetailItemList `json:"PaymentMethodDetails,omitempty"`

	// PurchaseDate The date and time when the order was created.
	PurchaseDate *time.Time `json:"PurchaseDate,omitempty"`

	// SellerDisplayName The sellerâ€™s friendly name registered in the marketplace.
	SellerDisplayName *string `json:"SellerDisplayName,omitempty"`

	// SellerId The seller identifier.
	SellerId *string `json:"SellerId,omitempty"`

	// ShipmentItems A list of shipment items.
	ShipmentItems *ShipmentItems `json:"ShipmentItems,omitempty"`

	// ShippingAddress The shipping address details of the shipment.
	ShippingAddress *Address `json:"ShippingAddress,omitempty"`

	// WarehouseId The Amazon-defined identifier for the warehouse.
	WarehouseId *string `json:"WarehouseId,omitempty"`
}

// ShipmentInvoiceStatus The shipment invoice status.
type ShipmentInvoiceStatus string

// ShipmentInvoiceStatusInfo The shipment invoice status information.
type ShipmentInvoiceStatusInfo struct {
	// AmazonShipmentId The Amazon-defined shipment identifier.
	AmazonShipmentId *string `json:"AmazonShipmentId,omitempty"`

	// InvoiceStatus The shipment invoice status.
	InvoiceStatus *ShipmentInvoiceStatus `json:"InvoiceStatus,omitempty"`
}

// ShipmentInvoiceStatusResponse The shipment invoice status response.
type ShipmentInvoiceStatusResponse struct {
	// Shipments The shipment invoice status information.
	Shipments *ShipmentInvoiceStatusInfo `json:"Shipments,omitempty"`
}

// ShipmentItem The shipment item information required by a seller to issue a shipment invoice.
type ShipmentItem struct {
	// ASIN The Amazon Standard Identification Number (ASIN) of the item.
	ASIN *string `json:"ASIN,omitempty"`

	// GiftWrapPrice The currency type and amount.
	GiftWrapPrice *Money `json:"GiftWrapPrice,omitempty"`

	// ItemPrice The currency type and amount.
	ItemPrice *Money `json:"ItemPrice,omitempty"`

	// OrderItemId The Amazon-defined identifier for the order item.
	OrderItemId *string `json:"OrderItemId,omitempty"`

	// PromotionDiscount The currency type and amount.
	PromotionDiscount *Money `json:"PromotionDiscount,omitempty"`

	// QuantityOrdered The number of items ordered.
	QuantityOrdered *float32 `json:"QuantityOrdered,omitempty"`

	// SellerSKU The seller SKU of the item.
	SellerSKU *string `json:"SellerSKU,omitempty"`

	// SerialNumbers The list of serial numbers.
	SerialNumbers *SerialNumbersList `json:"SerialNumbers,omitempty"`

	// ShippingDiscount The currency type and amount.
	ShippingDiscount *Money `json:"ShippingDiscount,omitempty"`

	// ShippingPrice The currency type and amount.
	ShippingPrice *Money `json:"ShippingPrice,omitempty"`

	// Title The name of the item.
	Title *string `json:"Title,omitempty"`
}

// ShipmentItems A list of shipment items.
type ShipmentItems = []ShipmentItem

// SubmitInvoiceRequest The request schema for the submitInvoice operation.
type SubmitInvoiceRequest struct {
	// ContentMD5Value MD5 sum for validating the invoice data. For more information about calculating this value, see [Working with Content-MD5 Checksums](https://docs.developer.amazonservices.com/en_US/dev_guide/DG_MD5.html).
	ContentMD5Value string `json:"ContentMD5Value"`

	// InvoiceContent Shipment invoice document content.
	InvoiceContent Blob `json:"InvoiceContent"`

	// MarketplaceId An Amazon marketplace identifier.
	MarketplaceId *string `json:"MarketplaceId,omitempty"`
}

// SubmitInvoiceResponse The response schema for the submitInvoice operation.
type SubmitInvoiceResponse struct {
	// Errors A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// TaxClassification The tax classification for the entity.
type TaxClassification struct {
	// Name The type of tax.
	Name *string `json:"Name,omitempty"`

	// Value The entity's tax identifier.
	Value *string `json:"Value,omitempty"`
}

// TaxClassificationList The list of tax classifications.
type TaxClassificationList = []TaxClassification

// SubmitInvoiceJSONRequestBody defines body for SubmitInvoice for application/json ContentType.
type SubmitInvoiceJSONRequestBody = SubmitInvoiceRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetShipmentDetails request
	GetShipmentDetails(ctx context.Context, shipmentId string) (*http.Response, error)

	// SubmitInvoiceWithBody request with any body
	SubmitInvoiceWithBody(ctx context.Context, shipmentId string, contentType string, body io.Reader) (*http.Response, error)

	SubmitInvoice(ctx context.Context, shipmentId string, body SubmitInvoiceJSONRequestBody) (*http.Response, error)

	// GetInvoiceStatus request
	GetInvoiceStatus(ctx context.Context, shipmentId string) (*http.Response, error)
}

func (c *Client) GetShipmentDetails(ctx context.Context, shipmentId string) (*http.Response, error) {
	req, err := NewGetShipmentDetailsRequest(c.Server, shipmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SubmitInvoiceWithBody(ctx context.Context, shipmentId string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSubmitInvoiceRequestWithBody(c.Server, shipmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SubmitInvoice(ctx context.Context, shipmentId string, body SubmitInvoiceJSONRequestBody) (*http.Response, error) {
	req, err := NewSubmitInvoiceRequest(c.Server, shipmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetInvoiceStatus(ctx context.Context, shipmentId string) (*http.Response, error) {
	req, err := NewGetInvoiceStatusRequest(c.Server, shipmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetShipmentDetailsRequest generates requests for GetShipmentDetails
func NewGetShipmentDetailsRequest(server string, shipmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/brazil/v0/shipments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitInvoiceRequest calls the generic SubmitInvoice builder with application/json body
func NewSubmitInvoiceRequest(server string, shipmentId string, body SubmitInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitInvoiceRequestWithBody(server, shipmentId, "application/json", bodyReader)
}

// NewSubmitInvoiceRequestWithBody generates requests for SubmitInvoice with any type of body
func NewSubmitInvoiceRequestWithBody(server string, shipmentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/brazil/v0/shipments/%s/invoice", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInvoiceStatusRequest generates requests for GetInvoiceStatus
func NewGetInvoiceStatusRequest(server string, shipmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/brazil/v0/shipments/%s/invoice/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetShipmentDetailsWithResponse request
	GetShipmentDetailsWithResponse(ctx context.Context, shipmentId string) (*GetShipmentDetailsResp, error)

	// SubmitInvoiceWithBodyWithResponse request with any body
	SubmitInvoiceWithBodyWithResponse(ctx context.Context, shipmentId string, contentType string, body io.Reader) (*SubmitInvoiceResp, error)

	SubmitInvoiceWithResponse(ctx context.Context, shipmentId string, body SubmitInvoiceJSONRequestBody) (*SubmitInvoiceResp, error)

	// GetInvoiceStatusWithResponse request
	GetInvoiceStatusWithResponse(ctx context.Context, shipmentId string) (*GetInvoiceStatusResp, error)
}

type GetShipmentDetailsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetShipmentDetailsResponse
	JSON400      *GetShipmentDetailsResponse
	JSON401      *GetShipmentDetailsResponse
	JSON403      *GetShipmentDetailsResponse
	JSON404      *GetShipmentDetailsResponse
	JSON415      *GetShipmentDetailsResponse
	JSON429      *GetShipmentDetailsResponse
	JSON500      *GetShipmentDetailsResponse
	JSON503      *GetShipmentDetailsResponse
}

// Status returns HTTPResponse.Status
func (r GetShipmentDetailsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipmentDetailsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitInvoiceResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmitInvoiceResponse
	JSON400      *SubmitInvoiceResponse
	JSON401      *SubmitInvoiceResponse
	JSON403      *SubmitInvoiceResponse
	JSON404      *SubmitInvoiceResponse
	JSON415      *SubmitInvoiceResponse
	JSON429      *SubmitInvoiceResponse
	JSON500      *SubmitInvoiceResponse
	JSON503      *SubmitInvoiceResponse
}

// Status returns HTTPResponse.Status
func (r SubmitInvoiceResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitInvoiceResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoiceStatusResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetInvoiceStatusResponse
	JSON400      *GetInvoiceStatusResponse
	JSON401      *GetInvoiceStatusResponse
	JSON403      *GetInvoiceStatusResponse
	JSON404      *GetInvoiceStatusResponse
	JSON415      *GetInvoiceStatusResponse
	JSON429      *GetInvoiceStatusResponse
	JSON500      *GetInvoiceStatusResponse
	JSON503      *GetInvoiceStatusResponse
}

// Status returns HTTPResponse.Status
func (r GetInvoiceStatusResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoiceStatusResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetShipmentDetailsWithResponse request returning *GetShipmentDetailsResp
func (c *ClientWithResponses) GetShipmentDetailsWithResponse(ctx context.Context, shipmentId string) (*GetShipmentDetailsResp, error) {
	rsp, err := c.GetShipmentDetails(ctx, shipmentId)
	if err != nil {
		return nil, err
	}
	return ParseGetShipmentDetailsResp(rsp)
}

// SubmitInvoiceWithBodyWithResponse request with arbitrary body returning *SubmitInvoiceResp
func (c *ClientWithResponses) SubmitInvoiceWithBodyWithResponse(ctx context.Context, shipmentId string, contentType string, body io.Reader) (*SubmitInvoiceResp, error) {
	rsp, err := c.SubmitInvoiceWithBody(ctx, shipmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitInvoiceResp(rsp)
}

func (c *ClientWithResponses) SubmitInvoiceWithResponse(ctx context.Context, shipmentId string, body SubmitInvoiceJSONRequestBody) (*SubmitInvoiceResp, error) {
	rsp, err := c.SubmitInvoice(ctx, shipmentId, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitInvoiceResp(rsp)
}

// GetInvoiceStatusWithResponse request returning *GetInvoiceStatusResp
func (c *ClientWithResponses) GetInvoiceStatusWithResponse(ctx context.Context, shipmentId string) (*GetInvoiceStatusResp, error) {
	rsp, err := c.GetInvoiceStatus(ctx, shipmentId)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoiceStatusResp(rsp)
}

// ParseGetShipmentDetailsResp parses an HTTP response from a GetShipmentDetailsWithResponse call
func ParseGetShipmentDetailsResp(rsp *http.Response) (*GetShipmentDetailsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShipmentDetailsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetShipmentDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetShipmentDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetShipmentDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetShipmentDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetShipmentDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetShipmentDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetShipmentDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetShipmentDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetShipmentDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseSubmitInvoiceResp parses an HTTP response from a SubmitInvoiceWithResponse call
func ParseSubmitInvoiceResp(rsp *http.Response) (*SubmitInvoiceResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitInvoiceResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest SubmitInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetInvoiceStatusResp parses an HTTP response from a GetInvoiceStatusWithResponse call
func ParseGetInvoiceStatusResp(rsp *http.Response) (*GetInvoiceStatusResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoiceStatusResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetInvoiceStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetInvoiceStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetInvoiceStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetInvoiceStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetInvoiceStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetInvoiceStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetInvoiceStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetInvoiceStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetInvoiceStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
